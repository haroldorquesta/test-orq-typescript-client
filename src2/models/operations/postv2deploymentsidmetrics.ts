/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Usage statistics to add to the deployment
 */
export type Usage = {
  /**
   * Number of tokens in the prompt.
   */
  promptTokens: number;
  /**
   * Number of tokens in the generated completion.
   */
  completionTokens: number;
  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  totalTokens?: number | undefined;
};

export type Performance = {
  /**
   * Total time in milliseconds of the request to the LLM provider API.
   */
  latency: number;
  /**
   * Total time in milliseconds to generate the first token of the completion.
   */
  timeToFirstToken?: number | undefined;
};

/**
 * The role of the prompt message
 */
export const PostV2DeploymentsIdMetricsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type PostV2DeploymentsIdMetricsRole = ClosedEnum<
  typeof PostV2DeploymentsIdMetricsRole
>;

export const PostV2DeploymentsIdMetrics2DeploymentsType = {
  ImageUrl: "image_url",
} as const;
export type PostV2DeploymentsIdMetrics2DeploymentsType = ClosedEnum<
  typeof PostV2DeploymentsIdMetrics2DeploymentsType
>;

export type PostV2DeploymentsIdMetrics2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type PostV2DeploymentsIdMetrics22 = {
  type: PostV2DeploymentsIdMetrics2DeploymentsType;
  imageUrl: PostV2DeploymentsIdMetrics2ImageUrl;
};

export const PostV2DeploymentsIdMetrics2Type = {
  Text: "text",
} as const;
export type PostV2DeploymentsIdMetrics2Type = ClosedEnum<
  typeof PostV2DeploymentsIdMetrics2Type
>;

/**
 * Text content part of a prompt message
 */
export type PostV2DeploymentsIdMetrics21 = {
  type: PostV2DeploymentsIdMetrics2Type;
  text: string;
};

export type PostV2DeploymentsIdMetricsContent2 =
  | PostV2DeploymentsIdMetrics21
  | PostV2DeploymentsIdMetrics22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type PostV2DeploymentsIdMetricsContent =
  | string
  | Array<PostV2DeploymentsIdMetrics21 | PostV2DeploymentsIdMetrics22>;

export const PostV2DeploymentsIdMetricsType = {
  Function: "function",
} as const;
export type PostV2DeploymentsIdMetricsType = ClosedEnum<
  typeof PostV2DeploymentsIdMetricsType
>;

export type PostV2DeploymentsIdMetricsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type PostV2DeploymentsIdMetricsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: PostV2DeploymentsIdMetricsType;
  function: PostV2DeploymentsIdMetricsFunction;
};

export type PostV2DeploymentsIdMetricsMessages = {
  /**
   * The role of the prompt message
   */
  role: PostV2DeploymentsIdMetricsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<PostV2DeploymentsIdMetrics21 | PostV2DeploymentsIdMetrics22>;
  toolCalls?: Array<PostV2DeploymentsIdMetricsToolCalls> | undefined;
};

/**
 * The role of the prompt message
 */
export const PostV2DeploymentsIdMetricsMessageDeploymentsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type PostV2DeploymentsIdMetricsMessageDeploymentsRole = ClosedEnum<
  typeof PostV2DeploymentsIdMetricsMessageDeploymentsRole
>;

export type Three = {
  /**
   * The role of the prompt message
   */
  role: PostV2DeploymentsIdMetricsMessageDeploymentsRole;
  url: string;
};

/**
 * The role of the prompt message
 */
export const PostV2DeploymentsIdMetricsMessageRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type PostV2DeploymentsIdMetricsMessageRole = ClosedEnum<
  typeof PostV2DeploymentsIdMetricsMessageRole
>;

export type Message2 = {
  /**
   * The role of the prompt message
   */
  role: PostV2DeploymentsIdMetricsMessageRole;
  content: string | null;
};

/**
 * The role of the prompt message
 */
export const MessageRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type MessageRole = ClosedEnum<typeof MessageRole>;

export const MessageType = {
  Function: "function",
} as const;
export type MessageType = ClosedEnum<typeof MessageType>;

export type MessageFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type MessageToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: MessageType;
  function: MessageFunction;
};

export type Message1 = {
  /**
   * The role of the prompt message
   */
  role: MessageRole;
  content?: string | null | undefined;
  toolCalls: Array<MessageToolCalls>;
};

export type Message = Message2 | Three | Message1;

export type Choices = {
  index: number;
  message?: Message2 | Three | Message1 | undefined;
  finishReason?: string | null | undefined;
};

/**
 * Feedback from the user on the completion
 */
export type Feedback = {
  /**
   * The feedback score. This allow you to come with specific logic on what a `score` number means
   */
  score: number;
};

/**
 * The deployment request payload
 */
export type PostV2DeploymentsIdMetricsRequestBody = {
  /**
   * Your own custom key-value pairs can be attached to the logs. This is useful for storing additional information related to your interactions with the LLM providers or specifics within your application.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Usage statistics to add to the deployment
   */
  usage?: Usage | undefined;
  performance?: Performance | undefined;
  /**
   * A list of messages sent to the model.
   */
  messages?: Array<PostV2DeploymentsIdMetricsMessages> | undefined;
  /**
   * A list of completion choices. If you are using a `completion` model then you must provide the `completion content` with the chat completion format
   */
  choices?: Array<Choices> | undefined;
  /**
   * Feedback from the user on the completion
   */
  feedback?: Feedback | undefined;
};

export type PostV2DeploymentsIdMetricsRequest = {
  /**
   * Deployment ID
   */
  id: string;
  /**
   * The deployment request payload
   */
  requestBody: PostV2DeploymentsIdMetricsRequestBody;
};

/**
 * Successful operation
 */
export type PostV2DeploymentsIdMetricsResponseBody = {
  /**
   * The status code of the request
   */
  code: number;
  /**
   * Whether the request was successful
   */
  success: boolean;
};

/** @internal */
export const Usage$inboundSchema: z.ZodType<Usage, z.ZodTypeDef, unknown> = z
  .object({
    prompt_tokens: z.number(),
    completion_tokens: z.number(),
    total_tokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "prompt_tokens": "promptTokens",
      "completion_tokens": "completionTokens",
      "total_tokens": "totalTokens",
    });
  });

/** @internal */
export type Usage$Outbound = {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens?: number | undefined;
};

/** @internal */
export const Usage$outboundSchema: z.ZodType<
  Usage$Outbound,
  z.ZodTypeDef,
  Usage
> = z.object({
  promptTokens: z.number(),
  completionTokens: z.number(),
  totalTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Usage$ {
  /** @deprecated use `Usage$inboundSchema` instead. */
  export const inboundSchema = Usage$inboundSchema;
  /** @deprecated use `Usage$outboundSchema` instead. */
  export const outboundSchema = Usage$outboundSchema;
  /** @deprecated use `Usage$Outbound` instead. */
  export type Outbound = Usage$Outbound;
}

/** @internal */
export const Performance$inboundSchema: z.ZodType<
  Performance,
  z.ZodTypeDef,
  unknown
> = z.object({
  latency: z.number(),
  time_to_first_token: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "time_to_first_token": "timeToFirstToken",
  });
});

/** @internal */
export type Performance$Outbound = {
  latency: number;
  time_to_first_token?: number | undefined;
};

/** @internal */
export const Performance$outboundSchema: z.ZodType<
  Performance$Outbound,
  z.ZodTypeDef,
  Performance
> = z.object({
  latency: z.number(),
  timeToFirstToken: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    timeToFirstToken: "time_to_first_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Performance$ {
  /** @deprecated use `Performance$inboundSchema` instead. */
  export const inboundSchema = Performance$inboundSchema;
  /** @deprecated use `Performance$outboundSchema` instead. */
  export const outboundSchema = Performance$outboundSchema;
  /** @deprecated use `Performance$Outbound` instead. */
  export type Outbound = Performance$Outbound;
}

/** @internal */
export const PostV2DeploymentsIdMetricsRole$inboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsIdMetricsRole
> = z.nativeEnum(PostV2DeploymentsIdMetricsRole);

/** @internal */
export const PostV2DeploymentsIdMetricsRole$outboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsIdMetricsRole
> = PostV2DeploymentsIdMetricsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetricsRole$ {
  /** @deprecated use `PostV2DeploymentsIdMetricsRole$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsIdMetricsRole$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsRole$outboundSchema` instead. */
  export const outboundSchema = PostV2DeploymentsIdMetricsRole$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsIdMetrics2DeploymentsType$inboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsIdMetrics2DeploymentsType> = z
    .nativeEnum(PostV2DeploymentsIdMetrics2DeploymentsType);

/** @internal */
export const PostV2DeploymentsIdMetrics2DeploymentsType$outboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsIdMetrics2DeploymentsType> =
    PostV2DeploymentsIdMetrics2DeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetrics2DeploymentsType$ {
  /** @deprecated use `PostV2DeploymentsIdMetrics2DeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsIdMetrics2DeploymentsType$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetrics2DeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsIdMetrics2DeploymentsType$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsIdMetrics2ImageUrl$inboundSchema: z.ZodType<
  PostV2DeploymentsIdMetrics2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type PostV2DeploymentsIdMetrics2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const PostV2DeploymentsIdMetrics2ImageUrl$outboundSchema: z.ZodType<
  PostV2DeploymentsIdMetrics2ImageUrl$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsIdMetrics2ImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetrics2ImageUrl$ {
  /** @deprecated use `PostV2DeploymentsIdMetrics2ImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsIdMetrics2ImageUrl$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetrics2ImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsIdMetrics2ImageUrl$outboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetrics2ImageUrl$Outbound` instead. */
  export type Outbound = PostV2DeploymentsIdMetrics2ImageUrl$Outbound;
}

/** @internal */
export const PostV2DeploymentsIdMetrics22$inboundSchema: z.ZodType<
  PostV2DeploymentsIdMetrics22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PostV2DeploymentsIdMetrics2DeploymentsType$inboundSchema,
  image_url: z.lazy(() => PostV2DeploymentsIdMetrics2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type PostV2DeploymentsIdMetrics22$Outbound = {
  type: string;
  image_url: PostV2DeploymentsIdMetrics2ImageUrl$Outbound;
};

/** @internal */
export const PostV2DeploymentsIdMetrics22$outboundSchema: z.ZodType<
  PostV2DeploymentsIdMetrics22$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsIdMetrics22
> = z.object({
  type: PostV2DeploymentsIdMetrics2DeploymentsType$outboundSchema,
  imageUrl: z.lazy(() => PostV2DeploymentsIdMetrics2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetrics22$ {
  /** @deprecated use `PostV2DeploymentsIdMetrics22$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsIdMetrics22$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetrics22$outboundSchema` instead. */
  export const outboundSchema = PostV2DeploymentsIdMetrics22$outboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetrics22$Outbound` instead. */
  export type Outbound = PostV2DeploymentsIdMetrics22$Outbound;
}

/** @internal */
export const PostV2DeploymentsIdMetrics2Type$inboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsIdMetrics2Type
> = z.nativeEnum(PostV2DeploymentsIdMetrics2Type);

/** @internal */
export const PostV2DeploymentsIdMetrics2Type$outboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsIdMetrics2Type
> = PostV2DeploymentsIdMetrics2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetrics2Type$ {
  /** @deprecated use `PostV2DeploymentsIdMetrics2Type$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsIdMetrics2Type$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetrics2Type$outboundSchema` instead. */
  export const outboundSchema = PostV2DeploymentsIdMetrics2Type$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsIdMetrics21$inboundSchema: z.ZodType<
  PostV2DeploymentsIdMetrics21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PostV2DeploymentsIdMetrics2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type PostV2DeploymentsIdMetrics21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const PostV2DeploymentsIdMetrics21$outboundSchema: z.ZodType<
  PostV2DeploymentsIdMetrics21$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsIdMetrics21
> = z.object({
  type: PostV2DeploymentsIdMetrics2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetrics21$ {
  /** @deprecated use `PostV2DeploymentsIdMetrics21$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsIdMetrics21$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetrics21$outboundSchema` instead. */
  export const outboundSchema = PostV2DeploymentsIdMetrics21$outboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetrics21$Outbound` instead. */
  export type Outbound = PostV2DeploymentsIdMetrics21$Outbound;
}

/** @internal */
export const PostV2DeploymentsIdMetricsContent2$inboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostV2DeploymentsIdMetrics21$inboundSchema),
  z.lazy(() => PostV2DeploymentsIdMetrics22$inboundSchema),
]);

/** @internal */
export type PostV2DeploymentsIdMetricsContent2$Outbound =
  | PostV2DeploymentsIdMetrics21$Outbound
  | PostV2DeploymentsIdMetrics22$Outbound;

/** @internal */
export const PostV2DeploymentsIdMetricsContent2$outboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsContent2$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsIdMetricsContent2
> = z.union([
  z.lazy(() => PostV2DeploymentsIdMetrics21$outboundSchema),
  z.lazy(() => PostV2DeploymentsIdMetrics22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetricsContent2$ {
  /** @deprecated use `PostV2DeploymentsIdMetricsContent2$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsIdMetricsContent2$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsContent2$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsIdMetricsContent2$outboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsContent2$Outbound` instead. */
  export type Outbound = PostV2DeploymentsIdMetricsContent2$Outbound;
}

/** @internal */
export const PostV2DeploymentsIdMetricsContent$inboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => PostV2DeploymentsIdMetrics21$inboundSchema),
    z.lazy(() => PostV2DeploymentsIdMetrics22$inboundSchema),
  ])),
]);

/** @internal */
export type PostV2DeploymentsIdMetricsContent$Outbound =
  | string
  | Array<
    | PostV2DeploymentsIdMetrics21$Outbound
    | PostV2DeploymentsIdMetrics22$Outbound
  >;

/** @internal */
export const PostV2DeploymentsIdMetricsContent$outboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsContent$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsIdMetricsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => PostV2DeploymentsIdMetrics21$outboundSchema),
    z.lazy(() => PostV2DeploymentsIdMetrics22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetricsContent$ {
  /** @deprecated use `PostV2DeploymentsIdMetricsContent$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsIdMetricsContent$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsContent$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsIdMetricsContent$outboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsContent$Outbound` instead. */
  export type Outbound = PostV2DeploymentsIdMetricsContent$Outbound;
}

/** @internal */
export const PostV2DeploymentsIdMetricsType$inboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsIdMetricsType
> = z.nativeEnum(PostV2DeploymentsIdMetricsType);

/** @internal */
export const PostV2DeploymentsIdMetricsType$outboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsIdMetricsType
> = PostV2DeploymentsIdMetricsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetricsType$ {
  /** @deprecated use `PostV2DeploymentsIdMetricsType$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsIdMetricsType$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsType$outboundSchema` instead. */
  export const outboundSchema = PostV2DeploymentsIdMetricsType$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsIdMetricsFunction$inboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type PostV2DeploymentsIdMetricsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const PostV2DeploymentsIdMetricsFunction$outboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsFunction$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsIdMetricsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetricsFunction$ {
  /** @deprecated use `PostV2DeploymentsIdMetricsFunction$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsIdMetricsFunction$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsFunction$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsIdMetricsFunction$outboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsFunction$Outbound` instead. */
  export type Outbound = PostV2DeploymentsIdMetricsFunction$Outbound;
}

/** @internal */
export const PostV2DeploymentsIdMetricsToolCalls$inboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: PostV2DeploymentsIdMetricsType$inboundSchema,
  function: z.lazy(() => PostV2DeploymentsIdMetricsFunction$inboundSchema),
});

/** @internal */
export type PostV2DeploymentsIdMetricsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: PostV2DeploymentsIdMetricsFunction$Outbound;
};

/** @internal */
export const PostV2DeploymentsIdMetricsToolCalls$outboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsToolCalls$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsIdMetricsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: PostV2DeploymentsIdMetricsType$outboundSchema,
  function: z.lazy(() => PostV2DeploymentsIdMetricsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetricsToolCalls$ {
  /** @deprecated use `PostV2DeploymentsIdMetricsToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsIdMetricsToolCalls$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsIdMetricsToolCalls$outboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsToolCalls$Outbound` instead. */
  export type Outbound = PostV2DeploymentsIdMetricsToolCalls$Outbound;
}

/** @internal */
export const PostV2DeploymentsIdMetricsMessages$inboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: PostV2DeploymentsIdMetricsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => PostV2DeploymentsIdMetrics21$inboundSchema),
      z.lazy(() => PostV2DeploymentsIdMetrics22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => PostV2DeploymentsIdMetricsToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type PostV2DeploymentsIdMetricsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | PostV2DeploymentsIdMetrics21$Outbound
      | PostV2DeploymentsIdMetrics22$Outbound
    >;
  tool_calls?: Array<PostV2DeploymentsIdMetricsToolCalls$Outbound> | undefined;
};

/** @internal */
export const PostV2DeploymentsIdMetricsMessages$outboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsMessages$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsIdMetricsMessages
> = z.object({
  role: PostV2DeploymentsIdMetricsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => PostV2DeploymentsIdMetrics21$outboundSchema),
      z.lazy(() => PostV2DeploymentsIdMetrics22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => PostV2DeploymentsIdMetricsToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetricsMessages$ {
  /** @deprecated use `PostV2DeploymentsIdMetricsMessages$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsIdMetricsMessages$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsMessages$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsIdMetricsMessages$outboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsMessages$Outbound` instead. */
  export type Outbound = PostV2DeploymentsIdMetricsMessages$Outbound;
}

/** @internal */
export const PostV2DeploymentsIdMetricsMessageDeploymentsRole$inboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsIdMetricsMessageDeploymentsRole> = z
    .nativeEnum(PostV2DeploymentsIdMetricsMessageDeploymentsRole);

/** @internal */
export const PostV2DeploymentsIdMetricsMessageDeploymentsRole$outboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsIdMetricsMessageDeploymentsRole> =
    PostV2DeploymentsIdMetricsMessageDeploymentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetricsMessageDeploymentsRole$ {
  /** @deprecated use `PostV2DeploymentsIdMetricsMessageDeploymentsRole$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsIdMetricsMessageDeploymentsRole$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsMessageDeploymentsRole$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsIdMetricsMessageDeploymentsRole$outboundSchema;
}

/** @internal */
export const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z
  .object({
    role: PostV2DeploymentsIdMetricsMessageDeploymentsRole$inboundSchema,
    url: z.string(),
  });

/** @internal */
export type Three$Outbound = {
  role: string;
  url: string;
};

/** @internal */
export const Three$outboundSchema: z.ZodType<
  Three$Outbound,
  z.ZodTypeDef,
  Three
> = z.object({
  role: PostV2DeploymentsIdMetricsMessageDeploymentsRole$outboundSchema,
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Three$ {
  /** @deprecated use `Three$inboundSchema` instead. */
  export const inboundSchema = Three$inboundSchema;
  /** @deprecated use `Three$outboundSchema` instead. */
  export const outboundSchema = Three$outboundSchema;
  /** @deprecated use `Three$Outbound` instead. */
  export type Outbound = Three$Outbound;
}

/** @internal */
export const PostV2DeploymentsIdMetricsMessageRole$inboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsIdMetricsMessageRole> = z.nativeEnum(
    PostV2DeploymentsIdMetricsMessageRole,
  );

/** @internal */
export const PostV2DeploymentsIdMetricsMessageRole$outboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsIdMetricsMessageRole> =
    PostV2DeploymentsIdMetricsMessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetricsMessageRole$ {
  /** @deprecated use `PostV2DeploymentsIdMetricsMessageRole$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsIdMetricsMessageRole$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsMessageRole$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsIdMetricsMessageRole$outboundSchema;
}

/** @internal */
export const Message2$inboundSchema: z.ZodType<
  Message2,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: PostV2DeploymentsIdMetricsMessageRole$inboundSchema,
  content: z.nullable(z.string()),
});

/** @internal */
export type Message2$Outbound = {
  role: string;
  content: string | null;
};

/** @internal */
export const Message2$outboundSchema: z.ZodType<
  Message2$Outbound,
  z.ZodTypeDef,
  Message2
> = z.object({
  role: PostV2DeploymentsIdMetricsMessageRole$outboundSchema,
  content: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message2$ {
  /** @deprecated use `Message2$inboundSchema` instead. */
  export const inboundSchema = Message2$inboundSchema;
  /** @deprecated use `Message2$outboundSchema` instead. */
  export const outboundSchema = Message2$outboundSchema;
  /** @deprecated use `Message2$Outbound` instead. */
  export type Outbound = Message2$Outbound;
}

/** @internal */
export const MessageRole$inboundSchema: z.ZodNativeEnum<typeof MessageRole> = z
  .nativeEnum(MessageRole);

/** @internal */
export const MessageRole$outboundSchema: z.ZodNativeEnum<typeof MessageRole> =
  MessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageRole$ {
  /** @deprecated use `MessageRole$inboundSchema` instead. */
  export const inboundSchema = MessageRole$inboundSchema;
  /** @deprecated use `MessageRole$outboundSchema` instead. */
  export const outboundSchema = MessageRole$outboundSchema;
}

/** @internal */
export const MessageType$inboundSchema: z.ZodNativeEnum<typeof MessageType> = z
  .nativeEnum(MessageType);

/** @internal */
export const MessageType$outboundSchema: z.ZodNativeEnum<typeof MessageType> =
  MessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageType$ {
  /** @deprecated use `MessageType$inboundSchema` instead. */
  export const inboundSchema = MessageType$inboundSchema;
  /** @deprecated use `MessageType$outboundSchema` instead. */
  export const outboundSchema = MessageType$outboundSchema;
}

/** @internal */
export const MessageFunction$inboundSchema: z.ZodType<
  MessageFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type MessageFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const MessageFunction$outboundSchema: z.ZodType<
  MessageFunction$Outbound,
  z.ZodTypeDef,
  MessageFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageFunction$ {
  /** @deprecated use `MessageFunction$inboundSchema` instead. */
  export const inboundSchema = MessageFunction$inboundSchema;
  /** @deprecated use `MessageFunction$outboundSchema` instead. */
  export const outboundSchema = MessageFunction$outboundSchema;
  /** @deprecated use `MessageFunction$Outbound` instead. */
  export type Outbound = MessageFunction$Outbound;
}

/** @internal */
export const MessageToolCalls$inboundSchema: z.ZodType<
  MessageToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: MessageType$inboundSchema,
  function: z.lazy(() => MessageFunction$inboundSchema),
});

/** @internal */
export type MessageToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: MessageFunction$Outbound;
};

/** @internal */
export const MessageToolCalls$outboundSchema: z.ZodType<
  MessageToolCalls$Outbound,
  z.ZodTypeDef,
  MessageToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: MessageType$outboundSchema,
  function: z.lazy(() => MessageFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageToolCalls$ {
  /** @deprecated use `MessageToolCalls$inboundSchema` instead. */
  export const inboundSchema = MessageToolCalls$inboundSchema;
  /** @deprecated use `MessageToolCalls$outboundSchema` instead. */
  export const outboundSchema = MessageToolCalls$outboundSchema;
  /** @deprecated use `MessageToolCalls$Outbound` instead. */
  export type Outbound = MessageToolCalls$Outbound;
}

/** @internal */
export const Message1$inboundSchema: z.ZodType<
  Message1,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: MessageRole$inboundSchema,
  content: z.nullable(z.string()).optional(),
  tool_calls: z.array(z.lazy(() => MessageToolCalls$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type Message1$Outbound = {
  role: string;
  content?: string | null | undefined;
  tool_calls: Array<MessageToolCalls$Outbound>;
};

/** @internal */
export const Message1$outboundSchema: z.ZodType<
  Message1$Outbound,
  z.ZodTypeDef,
  Message1
> = z.object({
  role: MessageRole$outboundSchema,
  content: z.nullable(z.string()).optional(),
  toolCalls: z.array(z.lazy(() => MessageToolCalls$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message1$ {
  /** @deprecated use `Message1$inboundSchema` instead. */
  export const inboundSchema = Message1$inboundSchema;
  /** @deprecated use `Message1$outboundSchema` instead. */
  export const outboundSchema = Message1$outboundSchema;
  /** @deprecated use `Message1$Outbound` instead. */
  export type Outbound = Message1$Outbound;
}

/** @internal */
export const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> =
  z.union([
    z.lazy(() => Message2$inboundSchema),
    z.lazy(() => Three$inboundSchema),
    z.lazy(() => Message1$inboundSchema),
  ]);

/** @internal */
export type Message$Outbound =
  | Message2$Outbound
  | Three$Outbound
  | Message1$Outbound;

/** @internal */
export const Message$outboundSchema: z.ZodType<
  Message$Outbound,
  z.ZodTypeDef,
  Message
> = z.union([
  z.lazy(() => Message2$outboundSchema),
  z.lazy(() => Three$outboundSchema),
  z.lazy(() => Message1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message$ {
  /** @deprecated use `Message$inboundSchema` instead. */
  export const inboundSchema = Message$inboundSchema;
  /** @deprecated use `Message$outboundSchema` instead. */
  export const outboundSchema = Message$outboundSchema;
  /** @deprecated use `Message$Outbound` instead. */
  export type Outbound = Message$Outbound;
}

/** @internal */
export const Choices$inboundSchema: z.ZodType<Choices, z.ZodTypeDef, unknown> =
  z.object({
    index: z.number(),
    message: z.union([
      z.lazy(() => Message2$inboundSchema),
      z.lazy(() => Three$inboundSchema),
      z.lazy(() => Message1$inboundSchema),
    ]).optional(),
    finish_reason: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "finish_reason": "finishReason",
    });
  });

/** @internal */
export type Choices$Outbound = {
  index: number;
  message?: Message2$Outbound | Three$Outbound | Message1$Outbound | undefined;
  finish_reason?: string | null | undefined;
};

/** @internal */
export const Choices$outboundSchema: z.ZodType<
  Choices$Outbound,
  z.ZodTypeDef,
  Choices
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => Message2$outboundSchema),
    z.lazy(() => Three$outboundSchema),
    z.lazy(() => Message1$outboundSchema),
  ]).optional(),
  finishReason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Choices$ {
  /** @deprecated use `Choices$inboundSchema` instead. */
  export const inboundSchema = Choices$inboundSchema;
  /** @deprecated use `Choices$outboundSchema` instead. */
  export const outboundSchema = Choices$outboundSchema;
  /** @deprecated use `Choices$Outbound` instead. */
  export type Outbound = Choices$Outbound;
}

/** @internal */
export const Feedback$inboundSchema: z.ZodType<
  Feedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  score: z.number().int(),
});

/** @internal */
export type Feedback$Outbound = {
  score: number;
};

/** @internal */
export const Feedback$outboundSchema: z.ZodType<
  Feedback$Outbound,
  z.ZodTypeDef,
  Feedback
> = z.object({
  score: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Feedback$ {
  /** @deprecated use `Feedback$inboundSchema` instead. */
  export const inboundSchema = Feedback$inboundSchema;
  /** @deprecated use `Feedback$outboundSchema` instead. */
  export const outboundSchema = Feedback$outboundSchema;
  /** @deprecated use `Feedback$Outbound` instead. */
  export type Outbound = Feedback$Outbound;
}

/** @internal */
export const PostV2DeploymentsIdMetricsRequestBody$inboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.any()).optional(),
  usage: z.lazy(() => Usage$inboundSchema).optional(),
  performance: z.lazy(() => Performance$inboundSchema).optional(),
  messages: z.array(
    z.lazy(() => PostV2DeploymentsIdMetricsMessages$inboundSchema),
  ).optional(),
  choices: z.array(z.lazy(() => Choices$inboundSchema)).optional(),
  feedback: z.lazy(() => Feedback$inboundSchema).optional(),
});

/** @internal */
export type PostV2DeploymentsIdMetricsRequestBody$Outbound = {
  metadata?: { [k: string]: any } | undefined;
  usage?: Usage$Outbound | undefined;
  performance?: Performance$Outbound | undefined;
  messages?: Array<PostV2DeploymentsIdMetricsMessages$Outbound> | undefined;
  choices?: Array<Choices$Outbound> | undefined;
  feedback?: Feedback$Outbound | undefined;
};

/** @internal */
export const PostV2DeploymentsIdMetricsRequestBody$outboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsIdMetricsRequestBody
> = z.object({
  metadata: z.record(z.any()).optional(),
  usage: z.lazy(() => Usage$outboundSchema).optional(),
  performance: z.lazy(() => Performance$outboundSchema).optional(),
  messages: z.array(
    z.lazy(() => PostV2DeploymentsIdMetricsMessages$outboundSchema),
  ).optional(),
  choices: z.array(z.lazy(() => Choices$outboundSchema)).optional(),
  feedback: z.lazy(() => Feedback$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetricsRequestBody$ {
  /** @deprecated use `PostV2DeploymentsIdMetricsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsIdMetricsRequestBody$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsIdMetricsRequestBody$outboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsRequestBody$Outbound` instead. */
  export type Outbound = PostV2DeploymentsIdMetricsRequestBody$Outbound;
}

/** @internal */
export const PostV2DeploymentsIdMetricsRequest$inboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() =>
    PostV2DeploymentsIdMetricsRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostV2DeploymentsIdMetricsRequest$Outbound = {
  id: string;
  RequestBody: PostV2DeploymentsIdMetricsRequestBody$Outbound;
};

/** @internal */
export const PostV2DeploymentsIdMetricsRequest$outboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsRequest$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsIdMetricsRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() =>
    PostV2DeploymentsIdMetricsRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetricsRequest$ {
  /** @deprecated use `PostV2DeploymentsIdMetricsRequest$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsIdMetricsRequest$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsIdMetricsRequest$outboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsRequest$Outbound` instead. */
  export type Outbound = PostV2DeploymentsIdMetricsRequest$Outbound;
}

/** @internal */
export const PostV2DeploymentsIdMetricsResponseBody$inboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.number(),
  success: z.boolean(),
});

/** @internal */
export type PostV2DeploymentsIdMetricsResponseBody$Outbound = {
  code: number;
  success: boolean;
};

/** @internal */
export const PostV2DeploymentsIdMetricsResponseBody$outboundSchema: z.ZodType<
  PostV2DeploymentsIdMetricsResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsIdMetricsResponseBody
> = z.object({
  code: z.number(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsIdMetricsResponseBody$ {
  /** @deprecated use `PostV2DeploymentsIdMetricsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsIdMetricsResponseBody$inboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsIdMetricsResponseBody$outboundSchema;
  /** @deprecated use `PostV2DeploymentsIdMetricsResponseBody$Outbound` instead. */
  export type Outbound = PostV2DeploymentsIdMetricsResponseBody$Outbound;
}
