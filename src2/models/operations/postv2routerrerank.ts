/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type Documents = string | { [k: string]: string };

/**
 * A request body that follows the official OpenAI schema
 */
export type PostV2RouterRerankRequestBody = {
  /**
   * The search query
   */
  query: string;
  /**
   * A list of document objects or strings to rerank.
   */
  documents: Array<string | { [k: string]: string }>;
  /**
   * The identifier of the model to use
   */
  model: string;
  /**
   * The number of most relevant documents or indices to return, defaults to the length of the documents
   */
  topN?: number | undefined;
  /**
   * Returns the docs with or without the doc text passed in
   */
  returnDocuments?: boolean | undefined;
};

/**
 * If return_documents is set as false this will return none, if true it will return the documents passed in
 */
export type Document = {
  /**
   * The text of the document to rerank
   */
  text: string;
};

export type Results = {
  /**
   * Corresponds to the index in the original list of documents to which the ranked document belongs.
   */
  index: number;
  /**
   * Relevance scores are normalized to be in the range [0, 1]. Scores close to 1 indicate a high relevance to the query, and scores closer to 0 indicate low relevance.
   */
  relevanceScore: number;
  /**
   * If return_documents is set as false this will return none, if true it will return the documents passed in
   */
  document?: Document | undefined;
};

export type ApiVersion = {
  version: string;
  isDeprecated?: boolean | undefined;
  isExperimental?: boolean | undefined;
};

export type BilledUnits = {
  /**
   * The number of billed input tokens.
   */
  inputTokens?: number | undefined;
  /**
   * The number of billed output tokens.
   */
  outputTokens?: number | undefined;
  /**
   * The number of billed search units.
   */
  searchUnits?: number | undefined;
  /**
   * The number of billed classifications units.
   */
  classifications?: number | undefined;
};

export type Tokens = {
  /**
   * The number of tokens used as input to the model.
   */
  inputTokens?: number | undefined;
  /**
   * The number of tokens produced by the model.
   */
  outputTokens?: number | undefined;
};

/**
 * Some information about the response
 */
export type Meta = {
  apiVersion?: ApiVersion | undefined;
  billedUnits?: BilledUnits | undefined;
  tokens?: Tokens | undefined;
  warnings?: Array<string> | undefined;
};

/**
 * A response body that follows the official OpenAI schema
 */
export type PostV2RouterRerankResponseBody = {
  /**
   * A unique identifier for the rerank.
   */
  id?: string | undefined;
  /**
   * An ordered list of ranked documents
   */
  results: Array<Results>;
  /**
   * Some information about the response
   */
  meta?: Meta | undefined;
};

/** @internal */
export const Documents$inboundSchema: z.ZodType<
  Documents,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.string())]);

/** @internal */
export type Documents$Outbound = string | { [k: string]: string };

/** @internal */
export const Documents$outboundSchema: z.ZodType<
  Documents$Outbound,
  z.ZodTypeDef,
  Documents
> = z.union([z.string(), z.record(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Documents$ {
  /** @deprecated use `Documents$inboundSchema` instead. */
  export const inboundSchema = Documents$inboundSchema;
  /** @deprecated use `Documents$outboundSchema` instead. */
  export const outboundSchema = Documents$outboundSchema;
  /** @deprecated use `Documents$Outbound` instead. */
  export type Outbound = Documents$Outbound;
}

/** @internal */
export const PostV2RouterRerankRequestBody$inboundSchema: z.ZodType<
  PostV2RouterRerankRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  documents: z.array(z.union([z.string(), z.record(z.string())])),
  model: z.string(),
  top_n: z.number().optional(),
  return_documents: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "top_n": "topN",
    "return_documents": "returnDocuments",
  });
});

/** @internal */
export type PostV2RouterRerankRequestBody$Outbound = {
  query: string;
  documents: Array<string | { [k: string]: string }>;
  model: string;
  top_n?: number | undefined;
  return_documents?: boolean | undefined;
};

/** @internal */
export const PostV2RouterRerankRequestBody$outboundSchema: z.ZodType<
  PostV2RouterRerankRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2RouterRerankRequestBody
> = z.object({
  query: z.string(),
  documents: z.array(z.union([z.string(), z.record(z.string())])),
  model: z.string(),
  topN: z.number().optional(),
  returnDocuments: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    topN: "top_n",
    returnDocuments: "return_documents",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterRerankRequestBody$ {
  /** @deprecated use `PostV2RouterRerankRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostV2RouterRerankRequestBody$inboundSchema;
  /** @deprecated use `PostV2RouterRerankRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostV2RouterRerankRequestBody$outboundSchema;
  /** @deprecated use `PostV2RouterRerankRequestBody$Outbound` instead. */
  export type Outbound = PostV2RouterRerankRequestBody$Outbound;
}

/** @internal */
export const Document$inboundSchema: z.ZodType<
  Document,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
});

/** @internal */
export type Document$Outbound = {
  text: string;
};

/** @internal */
export const Document$outboundSchema: z.ZodType<
  Document$Outbound,
  z.ZodTypeDef,
  Document
> = z.object({
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Document$ {
  /** @deprecated use `Document$inboundSchema` instead. */
  export const inboundSchema = Document$inboundSchema;
  /** @deprecated use `Document$outboundSchema` instead. */
  export const outboundSchema = Document$outboundSchema;
  /** @deprecated use `Document$Outbound` instead. */
  export type Outbound = Document$Outbound;
}

/** @internal */
export const Results$inboundSchema: z.ZodType<Results, z.ZodTypeDef, unknown> =
  z.object({
    index: z.number(),
    relevance_score: z.number(),
    document: z.lazy(() => Document$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "relevance_score": "relevanceScore",
    });
  });

/** @internal */
export type Results$Outbound = {
  index: number;
  relevance_score: number;
  document?: Document$Outbound | undefined;
};

/** @internal */
export const Results$outboundSchema: z.ZodType<
  Results$Outbound,
  z.ZodTypeDef,
  Results
> = z.object({
  index: z.number(),
  relevanceScore: z.number(),
  document: z.lazy(() => Document$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    relevanceScore: "relevance_score",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Results$ {
  /** @deprecated use `Results$inboundSchema` instead. */
  export const inboundSchema = Results$inboundSchema;
  /** @deprecated use `Results$outboundSchema` instead. */
  export const outboundSchema = Results$outboundSchema;
  /** @deprecated use `Results$Outbound` instead. */
  export type Outbound = Results$Outbound;
}

/** @internal */
export const ApiVersion$inboundSchema: z.ZodType<
  ApiVersion,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string(),
  is_deprecated: z.boolean().optional(),
  is_experimental: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_deprecated": "isDeprecated",
    "is_experimental": "isExperimental",
  });
});

/** @internal */
export type ApiVersion$Outbound = {
  version: string;
  is_deprecated?: boolean | undefined;
  is_experimental?: boolean | undefined;
};

/** @internal */
export const ApiVersion$outboundSchema: z.ZodType<
  ApiVersion$Outbound,
  z.ZodTypeDef,
  ApiVersion
> = z.object({
  version: z.string(),
  isDeprecated: z.boolean().optional(),
  isExperimental: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    isDeprecated: "is_deprecated",
    isExperimental: "is_experimental",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiVersion$ {
  /** @deprecated use `ApiVersion$inboundSchema` instead. */
  export const inboundSchema = ApiVersion$inboundSchema;
  /** @deprecated use `ApiVersion$outboundSchema` instead. */
  export const outboundSchema = ApiVersion$outboundSchema;
  /** @deprecated use `ApiVersion$Outbound` instead. */
  export type Outbound = ApiVersion$Outbound;
}

/** @internal */
export const BilledUnits$inboundSchema: z.ZodType<
  BilledUnits,
  z.ZodTypeDef,
  unknown
> = z.object({
  input_tokens: z.number().optional(),
  output_tokens: z.number().optional(),
  search_units: z.number().optional(),
  classifications: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "input_tokens": "inputTokens",
    "output_tokens": "outputTokens",
    "search_units": "searchUnits",
  });
});

/** @internal */
export type BilledUnits$Outbound = {
  input_tokens?: number | undefined;
  output_tokens?: number | undefined;
  search_units?: number | undefined;
  classifications?: number | undefined;
};

/** @internal */
export const BilledUnits$outboundSchema: z.ZodType<
  BilledUnits$Outbound,
  z.ZodTypeDef,
  BilledUnits
> = z.object({
  inputTokens: z.number().optional(),
  outputTokens: z.number().optional(),
  searchUnits: z.number().optional(),
  classifications: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    inputTokens: "input_tokens",
    outputTokens: "output_tokens",
    searchUnits: "search_units",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BilledUnits$ {
  /** @deprecated use `BilledUnits$inboundSchema` instead. */
  export const inboundSchema = BilledUnits$inboundSchema;
  /** @deprecated use `BilledUnits$outboundSchema` instead. */
  export const outboundSchema = BilledUnits$outboundSchema;
  /** @deprecated use `BilledUnits$Outbound` instead. */
  export type Outbound = BilledUnits$Outbound;
}

/** @internal */
export const Tokens$inboundSchema: z.ZodType<Tokens, z.ZodTypeDef, unknown> = z
  .object({
    input_tokens: z.number().optional(),
    output_tokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "input_tokens": "inputTokens",
      "output_tokens": "outputTokens",
    });
  });

/** @internal */
export type Tokens$Outbound = {
  input_tokens?: number | undefined;
  output_tokens?: number | undefined;
};

/** @internal */
export const Tokens$outboundSchema: z.ZodType<
  Tokens$Outbound,
  z.ZodTypeDef,
  Tokens
> = z.object({
  inputTokens: z.number().optional(),
  outputTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    inputTokens: "input_tokens",
    outputTokens: "output_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tokens$ {
  /** @deprecated use `Tokens$inboundSchema` instead. */
  export const inboundSchema = Tokens$inboundSchema;
  /** @deprecated use `Tokens$outboundSchema` instead. */
  export const outboundSchema = Tokens$outboundSchema;
  /** @deprecated use `Tokens$Outbound` instead. */
  export type Outbound = Tokens$Outbound;
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    api_version: z.lazy(() => ApiVersion$inboundSchema).optional(),
    billed_units: z.lazy(() => BilledUnits$inboundSchema).optional(),
    tokens: z.lazy(() => Tokens$inboundSchema).optional(),
    warnings: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "api_version": "apiVersion",
      "billed_units": "billedUnits",
    });
  });

/** @internal */
export type Meta$Outbound = {
  api_version?: ApiVersion$Outbound | undefined;
  billed_units?: BilledUnits$Outbound | undefined;
  tokens?: Tokens$Outbound | undefined;
  warnings?: Array<string> | undefined;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    apiVersion: z.lazy(() => ApiVersion$outboundSchema).optional(),
    billedUnits: z.lazy(() => BilledUnits$outboundSchema).optional(),
    tokens: z.lazy(() => Tokens$outboundSchema).optional(),
    warnings: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      apiVersion: "api_version",
      billedUnits: "billed_units",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

/** @internal */
export const PostV2RouterRerankResponseBody$inboundSchema: z.ZodType<
  PostV2RouterRerankResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  results: z.array(z.lazy(() => Results$inboundSchema)),
  meta: z.lazy(() => Meta$inboundSchema).optional(),
});

/** @internal */
export type PostV2RouterRerankResponseBody$Outbound = {
  id?: string | undefined;
  results: Array<Results$Outbound>;
  meta?: Meta$Outbound | undefined;
};

/** @internal */
export const PostV2RouterRerankResponseBody$outboundSchema: z.ZodType<
  PostV2RouterRerankResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2RouterRerankResponseBody
> = z.object({
  id: z.string().optional(),
  results: z.array(z.lazy(() => Results$outboundSchema)),
  meta: z.lazy(() => Meta$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterRerankResponseBody$ {
  /** @deprecated use `PostV2RouterRerankResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostV2RouterRerankResponseBody$inboundSchema;
  /** @deprecated use `PostV2RouterRerankResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostV2RouterRerankResponseBody$outboundSchema;
  /** @deprecated use `PostV2RouterRerankResponseBody$Outbound` instead. */
  export type Outbound = PostV2RouterRerankResponseBody$Outbound;
}
