/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The role of the messages author, in this case **tool**.
 */
export const RouterChatCompletionsMessagesRouterChatCompletionsRequestRole = {
  Tool: "tool",
} as const;
/**
 * The role of the messages author, in this case **tool**.
 */
export type RouterChatCompletionsMessagesRouterChatCompletionsRequestRole =
  ClosedEnum<
    typeof RouterChatCompletionsMessagesRouterChatCompletionsRequestRole
  >;

export const RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type =
  {
    ImageUrl: "image_url",
  } as const;
export type RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type =
  ClosedEnum<
    typeof RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type
  >;

/**
 * Specifies the detail level of the image.
 */
export const RouterChatCompletions2Detail = {
  Low: "low",
  High: "high",
  Auto: "auto",
} as const;
/**
 * Specifies the detail level of the image.
 */
export type RouterChatCompletions2Detail = ClosedEnum<
  typeof RouterChatCompletions2Detail
>;

export type RouterChatCompletions2RouterChatCompletionsRequestImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded image data.
   */
  url: string;
  /**
   * Specifies the detail level of the image.
   */
  detail?: RouterChatCompletions2Detail | undefined;
};

export type RouterChatCompletions2RouterChatCompletionsRequest2 = {
  type:
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type;
  imageUrl: RouterChatCompletions2RouterChatCompletionsRequestImageUrl;
};

export const RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType =
  {
    Text: "text",
  } as const;
export type RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType =
  ClosedEnum<
    typeof RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType
  >;

export type RouterChatCompletions2RouterChatCompletionsRequest1 = {
  type:
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType;
  text: string;
};

export type RouterChatCompletionsContentRouterChatCompletionsRequest2 =
  | RouterChatCompletions2RouterChatCompletionsRequest1
  | RouterChatCompletions2RouterChatCompletionsRequest2;

/**
 * The contents of a particular role's message.
 */
export type RouterChatCompletionsMessagesRouterChatCompletionsRequestContent =
  | string
  | Array<
    | RouterChatCompletions2RouterChatCompletionsRequest1
    | RouterChatCompletions2RouterChatCompletionsRequest2
  >;

export type Four = {
  /**
   * The role of the messages author, in this case **tool**.
   */
  role: RouterChatCompletionsMessagesRouterChatCompletionsRequestRole;
  toolCallId: string;
  /**
   * The contents of a particular role's message.
   */
  content:
    | string
    | Array<
      | RouterChatCompletions2RouterChatCompletionsRequest1
      | RouterChatCompletions2RouterChatCompletionsRequest2
    >;
};

/**
 * The role of the messages author, in this case **assistant**.
 */
export const RouterChatCompletionsMessagesRouterChatCompletionsRole = {
  Assistant: "assistant",
} as const;
/**
 * The role of the messages author, in this case **assistant**.
 */
export type RouterChatCompletionsMessagesRouterChatCompletionsRole = ClosedEnum<
  typeof RouterChatCompletionsMessagesRouterChatCompletionsRole
>;

/**
 * The contents of the assistant message. Required unless tool_calls is specified.
 */
export type RouterChatCompletionsMessagesRouterChatCompletionsContent =
  | string
  | Array<any>;

/**
 * The type of the tool. Currently, only **function** is supported.
 */
export const MessagesType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only **function** is supported.
 */
export type MessagesType = ClosedEnum<typeof MessagesType>;

/**
 * The function that the model called.
 */
export type MessagesFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments: string;
};

export type MessagesToolCalls = {
  /**
   * The ID of the tool call.
   */
  id: string;
  /**
   * The type of the tool. Currently, only **function** is supported.
   */
  type: MessagesType;
  /**
   * The function that the model called.
   */
  function: MessagesFunction;
};

export type Messages3 = {
  /**
   * The role of the messages author, in this case **assistant**.
   */
  role: RouterChatCompletionsMessagesRouterChatCompletionsRole;
  /**
   * The contents of the assistant message. Required unless tool_calls is specified.
   */
  content?: string | Array<any> | undefined;
  /**
   * The refusal message by the assistant.
   */
  refusal?: string | null | undefined;
  /**
   * The tool calls generated by the model, such as function calls.
   */
  toolCalls: Array<MessagesToolCalls>;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
};

/**
 * The role of the messages author, in this case **user**.
 */
export const RouterChatCompletionsMessagesRole = {
  User: "user",
} as const;
/**
 * The role of the messages author, in this case **user**.
 */
export type RouterChatCompletionsMessagesRole = ClosedEnum<
  typeof RouterChatCompletionsMessagesRole
>;

export const RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType =
  {
    ImageUrl: "image_url",
  } as const;
export type RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType =
  ClosedEnum<
    typeof RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType
  >;

/**
 * Specifies the detail level of the image.
 */
export const TwoDetail = {
  Low: "low",
  High: "high",
  Auto: "auto",
} as const;
/**
 * Specifies the detail level of the image.
 */
export type TwoDetail = ClosedEnum<typeof TwoDetail>;

export type RouterChatCompletions2RouterChatCompletionsImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded image data.
   */
  url: string;
  /**
   * Specifies the detail level of the image.
   */
  detail?: TwoDetail | undefined;
};

export type RouterChatCompletions2RouterChatCompletions2 = {
  type: RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType;
  imageUrl: RouterChatCompletions2RouterChatCompletionsImageUrl;
};

export const RouterChatCompletions2RouterChatCompletionsRequestType = {
  Text: "text",
} as const;
export type RouterChatCompletions2RouterChatCompletionsRequestType = ClosedEnum<
  typeof RouterChatCompletions2RouterChatCompletionsRequestType
>;

export type RouterChatCompletions2RouterChatCompletions1 = {
  type: RouterChatCompletions2RouterChatCompletionsRequestType;
  text: string;
};

export type RouterChatCompletionsContentRouterChatCompletions2 =
  | RouterChatCompletions2RouterChatCompletions1
  | RouterChatCompletions2RouterChatCompletions2;

/**
 * The contents of a particular role's message.
 */
export type RouterChatCompletionsMessagesContent =
  | string
  | Array<
    | RouterChatCompletions2RouterChatCompletions1
    | RouterChatCompletions2RouterChatCompletions2
  >;

export type Messages2 = {
  /**
   * The role of the messages author, in this case **user**.
   */
  role: RouterChatCompletionsMessagesRole;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
  /**
   * The contents of a particular role's message.
   */
  content:
    | string
    | Array<
      | RouterChatCompletions2RouterChatCompletions1
      | RouterChatCompletions2RouterChatCompletions2
    >;
};

/**
 * The role of the messages author, in this case **system**.
 */
export const MessagesRole = {
  System: "system",
} as const;
/**
 * The role of the messages author, in this case **system**.
 */
export type MessagesRole = ClosedEnum<typeof MessagesRole>;

export const RouterChatCompletions2RouterChatCompletionsType = {
  ImageUrl: "image_url",
} as const;
export type RouterChatCompletions2RouterChatCompletionsType = ClosedEnum<
  typeof RouterChatCompletions2RouterChatCompletionsType
>;

/**
 * Specifies the detail level of the image.
 */
export const Detail = {
  Low: "low",
  High: "high",
  Auto: "auto",
} as const;
/**
 * Specifies the detail level of the image.
 */
export type Detail = ClosedEnum<typeof Detail>;

export type RouterChatCompletions2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded image data.
   */
  url: string;
  /**
   * Specifies the detail level of the image.
   */
  detail?: Detail | undefined;
};

export type RouterChatCompletions22 = {
  type: RouterChatCompletions2RouterChatCompletionsType;
  imageUrl: RouterChatCompletions2ImageUrl;
};

export const RouterChatCompletions2Type = {
  Text: "text",
} as const;
export type RouterChatCompletions2Type = ClosedEnum<
  typeof RouterChatCompletions2Type
>;

export type RouterChatCompletions21 = {
  type: RouterChatCompletions2Type;
  text: string;
};

export type RouterChatCompletionsContent2 =
  | RouterChatCompletions21
  | RouterChatCompletions22;

/**
 * The contents of a particular role's message.
 */
export type MessagesContent =
  | string
  | Array<RouterChatCompletions21 | RouterChatCompletions22>;

export type Messages1 = {
  /**
   * The role of the messages author, in this case **system**.
   */
  role: MessagesRole;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
  /**
   * The contents of a particular role's message.
   */
  content: string | Array<RouterChatCompletions21 | RouterChatCompletions22>;
};

export type RouterChatCompletionsMessages =
  | Messages1
  | Messages2
  | Four
  | Messages3;

/**
 * The type of the tool. Currently, only function is supported.
 */
export const RouterChatCompletionsType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only function is supported.
 */
export type RouterChatCompletionsType = ClosedEnum<
  typeof RouterChatCompletionsType
>;

export const RouterChatCompletionsRouterChatCompletionsType = {
  Object: "object",
} as const;
export type RouterChatCompletionsRouterChatCompletionsType = ClosedEnum<
  typeof RouterChatCompletionsRouterChatCompletionsType
>;

/**
 * The parameters the functions accepts, described as a JSON Schema object
 */
export type ParametersT = {
  type: RouterChatCompletionsRouterChatCompletionsType;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
};

export type RouterChatCompletionsFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object
   */
  parameters?: ParametersT | undefined;
  /**
   * Whether to enable strict schema adherence when generating the function call.
   */
  strict?: boolean | null | undefined;
};

export type Tools = {
  /**
   * The type of the tool. Currently, only function is supported.
   */
  type: RouterChatCompletionsType;
  function: RouterChatCompletionsFunction;
};

/**
 * Creates a model response for the given chat conversation.
 */
export type RouterChatCompletionsRequestBody = {
  /**
   * ID of the model to use
   */
  model: string;
  /**
   * A list of messages comprising the conversation so far.
   */
  messages: Array<Messages1 | Messages2 | Four | Messages3>;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
   */
  frequencyPenalty?: number | null | undefined;
  /**
   * The maximum number of tokens that can be generated in the chat completion.
   */
  maxTokens?: number | null | undefined;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
   */
  presencePenalty?: number | null | undefined;
  /**
   * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result.
   */
  seed?: number | null | undefined;
  /**
   * If set, partial message deltas will be sent, like in ChatGPT.
   */
  stream?: boolean | null | undefined;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   */
  temperature?: number | null | undefined;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
   */
  topP?: number | null | undefined;
  /**
   * A list of tools the model may call.
   */
  tools?: Array<Tools> | undefined;
};

/**
 * A response body that follows the official OpenAI schema
 */
export type RouterChatCompletionsRouterChatCompletionsResponseBody = {
  data: string;
  event?: string | undefined;
  id?: string | undefined;
  retry?: number | undefined;
};

/**
 * The reason the model stopped generating tokens.
 */
export const ResponseBodyFinishReason = {
  Stop: "stop",
  Length: "length",
  ContentFilter: "content_filter",
  ToolCalls: "tool_calls",
} as const;
/**
 * The reason the model stopped generating tokens.
 */
export type ResponseBodyFinishReason = ClosedEnum<
  typeof ResponseBodyFinishReason
>;

export type RouterChatCompletionsResponseBodyTopLogprobs = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
};

export type RouterChatCompletionsResponseBodyContent = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
  /**
   * List of the most likely tokens and their log probability, at this token position.
   */
  topLogprobs: Array<RouterChatCompletionsResponseBodyTopLogprobs>;
};

export type RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs =
  {
    /**
     * The token.
     */
    token: string;
    /**
     * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
     */
    logprob: number;
    /**
     * A list of integers representing the UTF-8 bytes representation of the token.
     */
    bytes: Array<number> | null;
  };

export type ResponseBodyRefusal = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
  /**
   * List of the most likely tokens and their log probability, at this token position.
   */
  topLogprobs: Array<
    RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs
  >;
};

/**
 * Log probability information for the choice.
 */
export type ResponseBodyLogprobs = {
  /**
   * A list of message content tokens with log probability information.
   */
  content: Array<RouterChatCompletionsResponseBodyContent> | null;
  /**
   * A list of message refusal tokens with log probability information.
   */
  refusal: Array<ResponseBodyRefusal> | null;
};

export const RouterChatCompletionsResponseBodyType = {
  Function: "function",
} as const;
export type RouterChatCompletionsResponseBodyType = ClosedEnum<
  typeof RouterChatCompletionsResponseBodyType
>;

/**
 * The function that the model called.
 */
export type RouterChatCompletionsResponseBodyFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments: string;
};

export type RouterChatCompletionsResponseBodyToolCalls = {
  id: string;
  type: RouterChatCompletionsResponseBodyType;
  /**
   * The function that the model called.
   */
  function: RouterChatCompletionsResponseBodyFunction;
};

export const RouterChatCompletionsResponseBodyRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
export type RouterChatCompletionsResponseBodyRole = ClosedEnum<
  typeof RouterChatCompletionsResponseBodyRole
>;

/**
 * A chat completion delta generated by streamed model responses.
 */
export type Delta = {
  content: string | null;
  refusal: string | null;
  toolCalls: Array<RouterChatCompletionsResponseBodyToolCalls>;
  role: RouterChatCompletionsResponseBodyRole;
};

export type RouterChatCompletionsResponseBodyChoices = {
  /**
   * The reason the model stopped generating tokens.
   */
  finishReason: ResponseBodyFinishReason;
  /**
   * The index of the choice in the list of choices.
   */
  index: number;
  /**
   * Log probability information for the choice.
   */
  logprobs: ResponseBodyLogprobs | null;
  /**
   * A chat completion delta generated by streamed model responses.
   */
  delta: Delta;
};

/**
 * Usage statistics for the completion request.
 */
export type RouterChatCompletionsResponseBodyUsage = {
  /**
   * Number of tokens in the generated completion.
   */
  completionTokens?: number | undefined;
  /**
   * Number of tokens in the prompt.
   */
  promptTokens?: number | undefined;
  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  totalTokens?: number | undefined;
};

/**
 * Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
 */
export type ResponseBody2 = {
  /**
   * A unique identifier for the chat completion.
   */
  id: string;
  /**
   * A list of chat completion choices. Can contain more than one elements if n is greater than 1. Can also be empty for the last chunk if you set stream_options: {"include_usage": true}.
   */
  choices: Array<RouterChatCompletionsResponseBodyChoices>;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created.
   */
  created: number;
  /**
   * The model used for the chat completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with.
   */
  systemFingerprint: string;
  /**
   * The object type
   */
  object: string;
  /**
   * Usage statistics for the completion request.
   */
  usage: RouterChatCompletionsResponseBodyUsage;
};

/**
 * The reason the model stopped generating tokens.
 */
export const RouterChatCompletionsResponseBodyFinishReason = {
  Stop: "stop",
  Length: "length",
  ContentFilter: "content_filter",
  ToolCalls: "tool_calls",
} as const;
/**
 * The reason the model stopped generating tokens.
 */
export type RouterChatCompletionsResponseBodyFinishReason = ClosedEnum<
  typeof RouterChatCompletionsResponseBodyFinishReason
>;

export const ResponseBodyType = {
  Function: "function",
} as const;
export type ResponseBodyType = ClosedEnum<typeof ResponseBodyType>;

/**
 * The function that the model called.
 */
export type ResponseBodyFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments: string;
};

export type ResponseBodyToolCalls = {
  id: string;
  type: ResponseBodyType;
  /**
   * The function that the model called.
   */
  function: ResponseBodyFunction;
};

export const ResponseBodyRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
export type ResponseBodyRole = ClosedEnum<typeof ResponseBodyRole>;

/**
 * A chat completion message generated by the model.
 */
export type ResponseBodyMessage = {
  content: string | null;
  refusal: string | null;
  toolCalls: Array<ResponseBodyToolCalls>;
  role: ResponseBodyRole;
};

export type TopLogprobs = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
};

export type ResponseBodyContent = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
  /**
   * List of the most likely tokens and their log probability, at this token position.
   */
  topLogprobs: Array<TopLogprobs>;
};

export type ResponseBodyTopLogprobs = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
};

export type Refusal = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
  /**
   * List of the most likely tokens and their log probability, at this token position.
   */
  topLogprobs: Array<ResponseBodyTopLogprobs>;
};

/**
 * Log probability information for the choice.
 */
export type Logprobs = {
  /**
   * A list of message content tokens with log probability information.
   */
  content: Array<ResponseBodyContent> | null;
  /**
   * A list of message refusal tokens with log probability information.
   */
  refusal: Array<Refusal> | null;
};

export type ResponseBodyChoices = {
  /**
   * The reason the model stopped generating tokens.
   */
  finishReason: RouterChatCompletionsResponseBodyFinishReason;
  /**
   * The index of the choice in the list of choices.
   */
  index: number;
  /**
   * A chat completion message generated by the model.
   */
  message: ResponseBodyMessage;
  /**
   * Log probability information for the choice.
   */
  logprobs: Logprobs | null;
};

/**
 * Usage statistics for the completion request.
 */
export type ResponseBodyUsage = {
  /**
   * Number of tokens in the generated completion.
   */
  completionTokens?: number | undefined;
  /**
   * Number of tokens in the prompt.
   */
  promptTokens?: number | undefined;
  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  totalTokens?: number | undefined;
};

/**
 * Represents a chat completion response returned by model, based on the provided input.
 */
export type ResponseBody1 = {
  /**
   * A unique identifier for the chat completion.
   */
  id: string;
  /**
   * A list of chat completion choices. Can be more than one if n is greater than 1.
   */
  choices: Array<ResponseBodyChoices>;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created.
   */
  created: number;
  /**
   * The model used for the chat completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with.
   */
  systemFingerprint: string;
  /**
   * The object type
   */
  object: string;
  /**
   * Usage statistics for the completion request.
   */
  usage: ResponseBodyUsage;
};

/**
 * A response body that follows the official OpenAI schema
 */
export type RouterChatCompletionsResponseBody = ResponseBody1 | ResponseBody2;

export type RouterChatCompletionsResponse =
  | ResponseBody1
  | ResponseBody2
  | EventStream<RouterChatCompletionsRouterChatCompletionsResponseBody>;

/** @internal */
export const RouterChatCompletionsMessagesRouterChatCompletionsRequestRole$inboundSchema:
  z.ZodNativeEnum<
    typeof RouterChatCompletionsMessagesRouterChatCompletionsRequestRole
  > = z.nativeEnum(
    RouterChatCompletionsMessagesRouterChatCompletionsRequestRole,
  );

/** @internal */
export const RouterChatCompletionsMessagesRouterChatCompletionsRequestRole$outboundSchema:
  z.ZodNativeEnum<
    typeof RouterChatCompletionsMessagesRouterChatCompletionsRequestRole
  > =
    RouterChatCompletionsMessagesRouterChatCompletionsRequestRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsMessagesRouterChatCompletionsRequestRole$ {
  /** @deprecated use `RouterChatCompletionsMessagesRouterChatCompletionsRequestRole$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsMessagesRouterChatCompletionsRequestRole$inboundSchema;
  /** @deprecated use `RouterChatCompletionsMessagesRouterChatCompletionsRequestRole$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsMessagesRouterChatCompletionsRequestRole$outboundSchema;
}

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type
  > = z.nativeEnum(
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type,
  );

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type
  > =
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$ {
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$inboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$outboundSchema;
}

/** @internal */
export const RouterChatCompletions2Detail$inboundSchema: z.ZodNativeEnum<
  typeof RouterChatCompletions2Detail
> = z.nativeEnum(RouterChatCompletions2Detail);

/** @internal */
export const RouterChatCompletions2Detail$outboundSchema: z.ZodNativeEnum<
  typeof RouterChatCompletions2Detail
> = RouterChatCompletions2Detail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2Detail$ {
  /** @deprecated use `RouterChatCompletions2Detail$inboundSchema` instead. */
  export const inboundSchema = RouterChatCompletions2Detail$inboundSchema;
  /** @deprecated use `RouterChatCompletions2Detail$outboundSchema` instead. */
  export const outboundSchema = RouterChatCompletions2Detail$outboundSchema;
}

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequestImageUrl$inboundSchema:
  z.ZodType<
    RouterChatCompletions2RouterChatCompletionsRequestImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    url: z.string(),
    detail: RouterChatCompletions2Detail$inboundSchema.optional(),
  });

/** @internal */
export type RouterChatCompletions2RouterChatCompletionsRequestImageUrl$Outbound =
  {
    url: string;
    detail?: string | undefined;
  };

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequestImageUrl$outboundSchema:
  z.ZodType<
    RouterChatCompletions2RouterChatCompletionsRequestImageUrl$Outbound,
    z.ZodTypeDef,
    RouterChatCompletions2RouterChatCompletionsRequestImageUrl
  > = z.object({
    url: z.string(),
    detail: RouterChatCompletions2Detail$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2RouterChatCompletionsRequestImageUrl$ {
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequestImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequestImageUrl$inboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequestImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequestImageUrl$outboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequestImageUrl$Outbound` instead. */
  export type Outbound =
    RouterChatCompletions2RouterChatCompletionsRequestImageUrl$Outbound;
}

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequest2$inboundSchema:
  z.ZodType<
    RouterChatCompletions2RouterChatCompletionsRequest2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$inboundSchema,
    image_url: z.lazy(() =>
      RouterChatCompletions2RouterChatCompletionsRequestImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type RouterChatCompletions2RouterChatCompletionsRequest2$Outbound = {
  type: string;
  image_url:
    RouterChatCompletions2RouterChatCompletionsRequestImageUrl$Outbound;
};

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequest2$outboundSchema:
  z.ZodType<
    RouterChatCompletions2RouterChatCompletionsRequest2$Outbound,
    z.ZodTypeDef,
    RouterChatCompletions2RouterChatCompletionsRequest2
  > = z.object({
    type:
      RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$outboundSchema,
    imageUrl: z.lazy(() =>
      RouterChatCompletions2RouterChatCompletionsRequestImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2RouterChatCompletionsRequest2$ {
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequest2$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequest2$inboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequest2$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequest2$outboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequest2$Outbound` instead. */
  export type Outbound =
    RouterChatCompletions2RouterChatCompletionsRequest2$Outbound;
}

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$inboundSchema:
  z.ZodNativeEnum<
    typeof RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType
  > = z.nativeEnum(
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType,
  );

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$outboundSchema:
  z.ZodNativeEnum<
    typeof RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType
  > =
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$ {
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$inboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$outboundSchema;
}

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequest1$inboundSchema:
  z.ZodType<
    RouterChatCompletions2RouterChatCompletionsRequest1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type RouterChatCompletions2RouterChatCompletionsRequest1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequest1$outboundSchema:
  z.ZodType<
    RouterChatCompletions2RouterChatCompletionsRequest1$Outbound,
    z.ZodTypeDef,
    RouterChatCompletions2RouterChatCompletionsRequest1
  > = z.object({
    type:
      RouterChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2RouterChatCompletionsRequest1$ {
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequest1$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequest1$inboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequest1$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequest1$outboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequest1$Outbound` instead. */
  export type Outbound =
    RouterChatCompletions2RouterChatCompletionsRequest1$Outbound;
}

/** @internal */
export const RouterChatCompletionsContentRouterChatCompletionsRequest2$inboundSchema:
  z.ZodType<
    RouterChatCompletionsContentRouterChatCompletionsRequest2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      RouterChatCompletions2RouterChatCompletionsRequest1$inboundSchema
    ),
    z.lazy(() =>
      RouterChatCompletions2RouterChatCompletionsRequest2$inboundSchema
    ),
  ]);

/** @internal */
export type RouterChatCompletionsContentRouterChatCompletionsRequest2$Outbound =
  | RouterChatCompletions2RouterChatCompletionsRequest1$Outbound
  | RouterChatCompletions2RouterChatCompletionsRequest2$Outbound;

/** @internal */
export const RouterChatCompletionsContentRouterChatCompletionsRequest2$outboundSchema:
  z.ZodType<
    RouterChatCompletionsContentRouterChatCompletionsRequest2$Outbound,
    z.ZodTypeDef,
    RouterChatCompletionsContentRouterChatCompletionsRequest2
  > = z.union([
    z.lazy(() =>
      RouterChatCompletions2RouterChatCompletionsRequest1$outboundSchema
    ),
    z.lazy(() =>
      RouterChatCompletions2RouterChatCompletionsRequest2$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsContentRouterChatCompletionsRequest2$ {
  /** @deprecated use `RouterChatCompletionsContentRouterChatCompletionsRequest2$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsContentRouterChatCompletionsRequest2$inboundSchema;
  /** @deprecated use `RouterChatCompletionsContentRouterChatCompletionsRequest2$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsContentRouterChatCompletionsRequest2$outboundSchema;
  /** @deprecated use `RouterChatCompletionsContentRouterChatCompletionsRequest2$Outbound` instead. */
  export type Outbound =
    RouterChatCompletionsContentRouterChatCompletionsRequest2$Outbound;
}

/** @internal */
export const RouterChatCompletionsMessagesRouterChatCompletionsRequestContent$inboundSchema:
  z.ZodType<
    RouterChatCompletionsMessagesRouterChatCompletionsRequestContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        RouterChatCompletions2RouterChatCompletionsRequest1$inboundSchema
      ),
      z.lazy(() =>
        RouterChatCompletions2RouterChatCompletionsRequest2$inboundSchema
      ),
    ])),
  ]);

/** @internal */
export type RouterChatCompletionsMessagesRouterChatCompletionsRequestContent$Outbound =
  | string
  | Array<
    | RouterChatCompletions2RouterChatCompletionsRequest1$Outbound
    | RouterChatCompletions2RouterChatCompletionsRequest2$Outbound
  >;

/** @internal */
export const RouterChatCompletionsMessagesRouterChatCompletionsRequestContent$outboundSchema:
  z.ZodType<
    RouterChatCompletionsMessagesRouterChatCompletionsRequestContent$Outbound,
    z.ZodTypeDef,
    RouterChatCompletionsMessagesRouterChatCompletionsRequestContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        RouterChatCompletions2RouterChatCompletionsRequest1$outboundSchema
      ),
      z.lazy(() =>
        RouterChatCompletions2RouterChatCompletionsRequest2$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsMessagesRouterChatCompletionsRequestContent$ {
  /** @deprecated use `RouterChatCompletionsMessagesRouterChatCompletionsRequestContent$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsMessagesRouterChatCompletionsRequestContent$inboundSchema;
  /** @deprecated use `RouterChatCompletionsMessagesRouterChatCompletionsRequestContent$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsMessagesRouterChatCompletionsRequestContent$outboundSchema;
  /** @deprecated use `RouterChatCompletionsMessagesRouterChatCompletionsRequestContent$Outbound` instead. */
  export type Outbound =
    RouterChatCompletionsMessagesRouterChatCompletionsRequestContent$Outbound;
}

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({
    role:
      RouterChatCompletionsMessagesRouterChatCompletionsRequestRole$inboundSchema,
    tool_call_id: z.string(),
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          RouterChatCompletions2RouterChatCompletionsRequest1$inboundSchema
        ),
        z.lazy(() =>
          RouterChatCompletions2RouterChatCompletionsRequest2$inboundSchema
        ),
      ])),
    ]),
  }).transform((v) => {
    return remap$(v, {
      "tool_call_id": "toolCallId",
    });
  });

/** @internal */
export type Four$Outbound = {
  role: string;
  tool_call_id: string;
  content:
    | string
    | Array<
      | RouterChatCompletions2RouterChatCompletionsRequest1$Outbound
      | RouterChatCompletions2RouterChatCompletionsRequest2$Outbound
    >;
};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({
    role:
      RouterChatCompletionsMessagesRouterChatCompletionsRequestRole$outboundSchema,
    toolCallId: z.string(),
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          RouterChatCompletions2RouterChatCompletionsRequest1$outboundSchema
        ),
        z.lazy(() =>
          RouterChatCompletions2RouterChatCompletionsRequest2$outboundSchema
        ),
      ])),
    ]),
  }).transform((v) => {
    return remap$(v, {
      toolCallId: "tool_call_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

/** @internal */
export const RouterChatCompletionsMessagesRouterChatCompletionsRole$inboundSchema:
  z.ZodNativeEnum<
    typeof RouterChatCompletionsMessagesRouterChatCompletionsRole
  > = z.nativeEnum(RouterChatCompletionsMessagesRouterChatCompletionsRole);

/** @internal */
export const RouterChatCompletionsMessagesRouterChatCompletionsRole$outboundSchema:
  z.ZodNativeEnum<
    typeof RouterChatCompletionsMessagesRouterChatCompletionsRole
  > = RouterChatCompletionsMessagesRouterChatCompletionsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsMessagesRouterChatCompletionsRole$ {
  /** @deprecated use `RouterChatCompletionsMessagesRouterChatCompletionsRole$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsMessagesRouterChatCompletionsRole$inboundSchema;
  /** @deprecated use `RouterChatCompletionsMessagesRouterChatCompletionsRole$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsMessagesRouterChatCompletionsRole$outboundSchema;
}

/** @internal */
export const RouterChatCompletionsMessagesRouterChatCompletionsContent$inboundSchema:
  z.ZodType<
    RouterChatCompletionsMessagesRouterChatCompletionsContent,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.any())]);

/** @internal */
export type RouterChatCompletionsMessagesRouterChatCompletionsContent$Outbound =
  | string
  | Array<any>;

/** @internal */
export const RouterChatCompletionsMessagesRouterChatCompletionsContent$outboundSchema:
  z.ZodType<
    RouterChatCompletionsMessagesRouterChatCompletionsContent$Outbound,
    z.ZodTypeDef,
    RouterChatCompletionsMessagesRouterChatCompletionsContent
  > = z.union([z.string(), z.array(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsMessagesRouterChatCompletionsContent$ {
  /** @deprecated use `RouterChatCompletionsMessagesRouterChatCompletionsContent$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsMessagesRouterChatCompletionsContent$inboundSchema;
  /** @deprecated use `RouterChatCompletionsMessagesRouterChatCompletionsContent$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsMessagesRouterChatCompletionsContent$outboundSchema;
  /** @deprecated use `RouterChatCompletionsMessagesRouterChatCompletionsContent$Outbound` instead. */
  export type Outbound =
    RouterChatCompletionsMessagesRouterChatCompletionsContent$Outbound;
}

/** @internal */
export const MessagesType$inboundSchema: z.ZodNativeEnum<typeof MessagesType> =
  z.nativeEnum(MessagesType);

/** @internal */
export const MessagesType$outboundSchema: z.ZodNativeEnum<typeof MessagesType> =
  MessagesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesType$ {
  /** @deprecated use `MessagesType$inboundSchema` instead. */
  export const inboundSchema = MessagesType$inboundSchema;
  /** @deprecated use `MessagesType$outboundSchema` instead. */
  export const outboundSchema = MessagesType$outboundSchema;
}

/** @internal */
export const MessagesFunction$inboundSchema: z.ZodType<
  MessagesFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type MessagesFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const MessagesFunction$outboundSchema: z.ZodType<
  MessagesFunction$Outbound,
  z.ZodTypeDef,
  MessagesFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesFunction$ {
  /** @deprecated use `MessagesFunction$inboundSchema` instead. */
  export const inboundSchema = MessagesFunction$inboundSchema;
  /** @deprecated use `MessagesFunction$outboundSchema` instead. */
  export const outboundSchema = MessagesFunction$outboundSchema;
  /** @deprecated use `MessagesFunction$Outbound` instead. */
  export type Outbound = MessagesFunction$Outbound;
}

/** @internal */
export const MessagesToolCalls$inboundSchema: z.ZodType<
  MessagesToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: MessagesType$inboundSchema,
  function: z.lazy(() => MessagesFunction$inboundSchema),
});

/** @internal */
export type MessagesToolCalls$Outbound = {
  id: string;
  type: string;
  function: MessagesFunction$Outbound;
};

/** @internal */
export const MessagesToolCalls$outboundSchema: z.ZodType<
  MessagesToolCalls$Outbound,
  z.ZodTypeDef,
  MessagesToolCalls
> = z.object({
  id: z.string(),
  type: MessagesType$outboundSchema,
  function: z.lazy(() => MessagesFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesToolCalls$ {
  /** @deprecated use `MessagesToolCalls$inboundSchema` instead. */
  export const inboundSchema = MessagesToolCalls$inboundSchema;
  /** @deprecated use `MessagesToolCalls$outboundSchema` instead. */
  export const outboundSchema = MessagesToolCalls$outboundSchema;
  /** @deprecated use `MessagesToolCalls$Outbound` instead. */
  export type Outbound = MessagesToolCalls$Outbound;
}

/** @internal */
export const Messages3$inboundSchema: z.ZodType<
  Messages3,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: RouterChatCompletionsMessagesRouterChatCompletionsRole$inboundSchema,
  content: z.union([z.string(), z.array(z.any())]).optional(),
  refusal: z.nullable(z.string()).optional(),
  tool_calls: z.array(z.lazy(() => MessagesToolCalls$inboundSchema)),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type Messages3$Outbound = {
  role: string;
  content?: string | Array<any> | undefined;
  refusal?: string | null | undefined;
  tool_calls: Array<MessagesToolCalls$Outbound>;
  name?: string | undefined;
};

/** @internal */
export const Messages3$outboundSchema: z.ZodType<
  Messages3$Outbound,
  z.ZodTypeDef,
  Messages3
> = z.object({
  role: RouterChatCompletionsMessagesRouterChatCompletionsRole$outboundSchema,
  content: z.union([z.string(), z.array(z.any())]).optional(),
  refusal: z.nullable(z.string()).optional(),
  toolCalls: z.array(z.lazy(() => MessagesToolCalls$outboundSchema)),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages3$ {
  /** @deprecated use `Messages3$inboundSchema` instead. */
  export const inboundSchema = Messages3$inboundSchema;
  /** @deprecated use `Messages3$outboundSchema` instead. */
  export const outboundSchema = Messages3$outboundSchema;
  /** @deprecated use `Messages3$Outbound` instead. */
  export type Outbound = Messages3$Outbound;
}

/** @internal */
export const RouterChatCompletionsMessagesRole$inboundSchema: z.ZodNativeEnum<
  typeof RouterChatCompletionsMessagesRole
> = z.nativeEnum(RouterChatCompletionsMessagesRole);

/** @internal */
export const RouterChatCompletionsMessagesRole$outboundSchema: z.ZodNativeEnum<
  typeof RouterChatCompletionsMessagesRole
> = RouterChatCompletionsMessagesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsMessagesRole$ {
  /** @deprecated use `RouterChatCompletionsMessagesRole$inboundSchema` instead. */
  export const inboundSchema = RouterChatCompletionsMessagesRole$inboundSchema;
  /** @deprecated use `RouterChatCompletionsMessagesRole$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsMessagesRole$outboundSchema;
}

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType
  > = z.nativeEnum(
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType,
  );

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType
  > =
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType$ {
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const TwoDetail$inboundSchema: z.ZodNativeEnum<typeof TwoDetail> = z
  .nativeEnum(TwoDetail);

/** @internal */
export const TwoDetail$outboundSchema: z.ZodNativeEnum<typeof TwoDetail> =
  TwoDetail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TwoDetail$ {
  /** @deprecated use `TwoDetail$inboundSchema` instead. */
  export const inboundSchema = TwoDetail$inboundSchema;
  /** @deprecated use `TwoDetail$outboundSchema` instead. */
  export const outboundSchema = TwoDetail$outboundSchema;
}

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsImageUrl$inboundSchema:
  z.ZodType<
    RouterChatCompletions2RouterChatCompletionsImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    url: z.string(),
    detail: TwoDetail$inboundSchema.optional(),
  });

/** @internal */
export type RouterChatCompletions2RouterChatCompletionsImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsImageUrl$outboundSchema:
  z.ZodType<
    RouterChatCompletions2RouterChatCompletionsImageUrl$Outbound,
    z.ZodTypeDef,
    RouterChatCompletions2RouterChatCompletionsImageUrl
  > = z.object({
    url: z.string(),
    detail: TwoDetail$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2RouterChatCompletionsImageUrl$ {
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletions2RouterChatCompletionsImageUrl$inboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletions2RouterChatCompletionsImageUrl$outboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsImageUrl$Outbound` instead. */
  export type Outbound =
    RouterChatCompletions2RouterChatCompletionsImageUrl$Outbound;
}

/** @internal */
export const RouterChatCompletions2RouterChatCompletions2$inboundSchema:
  z.ZodType<
    RouterChatCompletions2RouterChatCompletions2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType$inboundSchema,
    image_url: z.lazy(() =>
      RouterChatCompletions2RouterChatCompletionsImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type RouterChatCompletions2RouterChatCompletions2$Outbound = {
  type: string;
  image_url: RouterChatCompletions2RouterChatCompletionsImageUrl$Outbound;
};

/** @internal */
export const RouterChatCompletions2RouterChatCompletions2$outboundSchema:
  z.ZodType<
    RouterChatCompletions2RouterChatCompletions2$Outbound,
    z.ZodTypeDef,
    RouterChatCompletions2RouterChatCompletions2
  > = z.object({
    type:
      RouterChatCompletions2RouterChatCompletionsRequestRequestBodyType$outboundSchema,
    imageUrl: z.lazy(() =>
      RouterChatCompletions2RouterChatCompletionsImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2RouterChatCompletions2$ {
  /** @deprecated use `RouterChatCompletions2RouterChatCompletions2$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletions2RouterChatCompletions2$inboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletions2$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletions2RouterChatCompletions2$outboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletions2$Outbound` instead. */
  export type Outbound = RouterChatCompletions2RouterChatCompletions2$Outbound;
}

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequestType$inboundSchema:
  z.ZodNativeEnum<
    typeof RouterChatCompletions2RouterChatCompletionsRequestType
  > = z.nativeEnum(RouterChatCompletions2RouterChatCompletionsRequestType);

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsRequestType$outboundSchema:
  z.ZodNativeEnum<
    typeof RouterChatCompletions2RouterChatCompletionsRequestType
  > = RouterChatCompletions2RouterChatCompletionsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2RouterChatCompletionsRequestType$ {
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequestType$inboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletions2RouterChatCompletionsRequestType$outboundSchema;
}

/** @internal */
export const RouterChatCompletions2RouterChatCompletions1$inboundSchema:
  z.ZodType<
    RouterChatCompletions2RouterChatCompletions1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: RouterChatCompletions2RouterChatCompletionsRequestType$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type RouterChatCompletions2RouterChatCompletions1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const RouterChatCompletions2RouterChatCompletions1$outboundSchema:
  z.ZodType<
    RouterChatCompletions2RouterChatCompletions1$Outbound,
    z.ZodTypeDef,
    RouterChatCompletions2RouterChatCompletions1
  > = z.object({
    type: RouterChatCompletions2RouterChatCompletionsRequestType$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2RouterChatCompletions1$ {
  /** @deprecated use `RouterChatCompletions2RouterChatCompletions1$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletions2RouterChatCompletions1$inboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletions1$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletions2RouterChatCompletions1$outboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletions1$Outbound` instead. */
  export type Outbound = RouterChatCompletions2RouterChatCompletions1$Outbound;
}

/** @internal */
export const RouterChatCompletionsContentRouterChatCompletions2$inboundSchema:
  z.ZodType<
    RouterChatCompletionsContentRouterChatCompletions2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => RouterChatCompletions2RouterChatCompletions1$inboundSchema),
    z.lazy(() => RouterChatCompletions2RouterChatCompletions2$inboundSchema),
  ]);

/** @internal */
export type RouterChatCompletionsContentRouterChatCompletions2$Outbound =
  | RouterChatCompletions2RouterChatCompletions1$Outbound
  | RouterChatCompletions2RouterChatCompletions2$Outbound;

/** @internal */
export const RouterChatCompletionsContentRouterChatCompletions2$outboundSchema:
  z.ZodType<
    RouterChatCompletionsContentRouterChatCompletions2$Outbound,
    z.ZodTypeDef,
    RouterChatCompletionsContentRouterChatCompletions2
  > = z.union([
    z.lazy(() => RouterChatCompletions2RouterChatCompletions1$outboundSchema),
    z.lazy(() => RouterChatCompletions2RouterChatCompletions2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsContentRouterChatCompletions2$ {
  /** @deprecated use `RouterChatCompletionsContentRouterChatCompletions2$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsContentRouterChatCompletions2$inboundSchema;
  /** @deprecated use `RouterChatCompletionsContentRouterChatCompletions2$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsContentRouterChatCompletions2$outboundSchema;
  /** @deprecated use `RouterChatCompletionsContentRouterChatCompletions2$Outbound` instead. */
  export type Outbound =
    RouterChatCompletionsContentRouterChatCompletions2$Outbound;
}

/** @internal */
export const RouterChatCompletionsMessagesContent$inboundSchema: z.ZodType<
  RouterChatCompletionsMessagesContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => RouterChatCompletions2RouterChatCompletions1$inboundSchema),
    z.lazy(() => RouterChatCompletions2RouterChatCompletions2$inboundSchema),
  ])),
]);

/** @internal */
export type RouterChatCompletionsMessagesContent$Outbound =
  | string
  | Array<
    | RouterChatCompletions2RouterChatCompletions1$Outbound
    | RouterChatCompletions2RouterChatCompletions2$Outbound
  >;

/** @internal */
export const RouterChatCompletionsMessagesContent$outboundSchema: z.ZodType<
  RouterChatCompletionsMessagesContent$Outbound,
  z.ZodTypeDef,
  RouterChatCompletionsMessagesContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => RouterChatCompletions2RouterChatCompletions1$outboundSchema),
    z.lazy(() => RouterChatCompletions2RouterChatCompletions2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsMessagesContent$ {
  /** @deprecated use `RouterChatCompletionsMessagesContent$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsMessagesContent$inboundSchema;
  /** @deprecated use `RouterChatCompletionsMessagesContent$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsMessagesContent$outboundSchema;
  /** @deprecated use `RouterChatCompletionsMessagesContent$Outbound` instead. */
  export type Outbound = RouterChatCompletionsMessagesContent$Outbound;
}

/** @internal */
export const Messages2$inboundSchema: z.ZodType<
  Messages2,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: RouterChatCompletionsMessagesRole$inboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => RouterChatCompletions2RouterChatCompletions1$inboundSchema),
      z.lazy(() =>
        RouterChatCompletions2RouterChatCompletions2$inboundSchema
      ),
    ])),
  ]),
});

/** @internal */
export type Messages2$Outbound = {
  role: string;
  name?: string | undefined;
  content:
    | string
    | Array<
      | RouterChatCompletions2RouterChatCompletions1$Outbound
      | RouterChatCompletions2RouterChatCompletions2$Outbound
    >;
};

/** @internal */
export const Messages2$outboundSchema: z.ZodType<
  Messages2$Outbound,
  z.ZodTypeDef,
  Messages2
> = z.object({
  role: RouterChatCompletionsMessagesRole$outboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => RouterChatCompletions2RouterChatCompletions1$outboundSchema),
      z.lazy(() =>
        RouterChatCompletions2RouterChatCompletions2$outboundSchema
      ),
    ])),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages2$ {
  /** @deprecated use `Messages2$inboundSchema` instead. */
  export const inboundSchema = Messages2$inboundSchema;
  /** @deprecated use `Messages2$outboundSchema` instead. */
  export const outboundSchema = Messages2$outboundSchema;
  /** @deprecated use `Messages2$Outbound` instead. */
  export type Outbound = Messages2$Outbound;
}

/** @internal */
export const MessagesRole$inboundSchema: z.ZodNativeEnum<typeof MessagesRole> =
  z.nativeEnum(MessagesRole);

/** @internal */
export const MessagesRole$outboundSchema: z.ZodNativeEnum<typeof MessagesRole> =
  MessagesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesRole$ {
  /** @deprecated use `MessagesRole$inboundSchema` instead. */
  export const inboundSchema = MessagesRole$inboundSchema;
  /** @deprecated use `MessagesRole$outboundSchema` instead. */
  export const outboundSchema = MessagesRole$outboundSchema;
}

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsType$inboundSchema:
  z.ZodNativeEnum<typeof RouterChatCompletions2RouterChatCompletionsType> = z
    .nativeEnum(RouterChatCompletions2RouterChatCompletionsType);

/** @internal */
export const RouterChatCompletions2RouterChatCompletionsType$outboundSchema:
  z.ZodNativeEnum<typeof RouterChatCompletions2RouterChatCompletionsType> =
    RouterChatCompletions2RouterChatCompletionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2RouterChatCompletionsType$ {
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsType$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletions2RouterChatCompletionsType$inboundSchema;
  /** @deprecated use `RouterChatCompletions2RouterChatCompletionsType$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletions2RouterChatCompletionsType$outboundSchema;
}

/** @internal */
export const Detail$inboundSchema: z.ZodNativeEnum<typeof Detail> = z
  .nativeEnum(Detail);

/** @internal */
export const Detail$outboundSchema: z.ZodNativeEnum<typeof Detail> =
  Detail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Detail$ {
  /** @deprecated use `Detail$inboundSchema` instead. */
  export const inboundSchema = Detail$inboundSchema;
  /** @deprecated use `Detail$outboundSchema` instead. */
  export const outboundSchema = Detail$outboundSchema;
}

/** @internal */
export const RouterChatCompletions2ImageUrl$inboundSchema: z.ZodType<
  RouterChatCompletions2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: Detail$inboundSchema.optional(),
});

/** @internal */
export type RouterChatCompletions2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const RouterChatCompletions2ImageUrl$outboundSchema: z.ZodType<
  RouterChatCompletions2ImageUrl$Outbound,
  z.ZodTypeDef,
  RouterChatCompletions2ImageUrl
> = z.object({
  url: z.string(),
  detail: Detail$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2ImageUrl$ {
  /** @deprecated use `RouterChatCompletions2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = RouterChatCompletions2ImageUrl$inboundSchema;
  /** @deprecated use `RouterChatCompletions2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = RouterChatCompletions2ImageUrl$outboundSchema;
  /** @deprecated use `RouterChatCompletions2ImageUrl$Outbound` instead. */
  export type Outbound = RouterChatCompletions2ImageUrl$Outbound;
}

/** @internal */
export const RouterChatCompletions22$inboundSchema: z.ZodType<
  RouterChatCompletions22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RouterChatCompletions2RouterChatCompletionsType$inboundSchema,
  image_url: z.lazy(() => RouterChatCompletions2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type RouterChatCompletions22$Outbound = {
  type: string;
  image_url: RouterChatCompletions2ImageUrl$Outbound;
};

/** @internal */
export const RouterChatCompletions22$outboundSchema: z.ZodType<
  RouterChatCompletions22$Outbound,
  z.ZodTypeDef,
  RouterChatCompletions22
> = z.object({
  type: RouterChatCompletions2RouterChatCompletionsType$outboundSchema,
  imageUrl: z.lazy(() => RouterChatCompletions2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions22$ {
  /** @deprecated use `RouterChatCompletions22$inboundSchema` instead. */
  export const inboundSchema = RouterChatCompletions22$inboundSchema;
  /** @deprecated use `RouterChatCompletions22$outboundSchema` instead. */
  export const outboundSchema = RouterChatCompletions22$outboundSchema;
  /** @deprecated use `RouterChatCompletions22$Outbound` instead. */
  export type Outbound = RouterChatCompletions22$Outbound;
}

/** @internal */
export const RouterChatCompletions2Type$inboundSchema: z.ZodNativeEnum<
  typeof RouterChatCompletions2Type
> = z.nativeEnum(RouterChatCompletions2Type);

/** @internal */
export const RouterChatCompletions2Type$outboundSchema: z.ZodNativeEnum<
  typeof RouterChatCompletions2Type
> = RouterChatCompletions2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions2Type$ {
  /** @deprecated use `RouterChatCompletions2Type$inboundSchema` instead. */
  export const inboundSchema = RouterChatCompletions2Type$inboundSchema;
  /** @deprecated use `RouterChatCompletions2Type$outboundSchema` instead. */
  export const outboundSchema = RouterChatCompletions2Type$outboundSchema;
}

/** @internal */
export const RouterChatCompletions21$inboundSchema: z.ZodType<
  RouterChatCompletions21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RouterChatCompletions2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type RouterChatCompletions21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const RouterChatCompletions21$outboundSchema: z.ZodType<
  RouterChatCompletions21$Outbound,
  z.ZodTypeDef,
  RouterChatCompletions21
> = z.object({
  type: RouterChatCompletions2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletions21$ {
  /** @deprecated use `RouterChatCompletions21$inboundSchema` instead. */
  export const inboundSchema = RouterChatCompletions21$inboundSchema;
  /** @deprecated use `RouterChatCompletions21$outboundSchema` instead. */
  export const outboundSchema = RouterChatCompletions21$outboundSchema;
  /** @deprecated use `RouterChatCompletions21$Outbound` instead. */
  export type Outbound = RouterChatCompletions21$Outbound;
}

/** @internal */
export const RouterChatCompletionsContent2$inboundSchema: z.ZodType<
  RouterChatCompletionsContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RouterChatCompletions21$inboundSchema),
  z.lazy(() => RouterChatCompletions22$inboundSchema),
]);

/** @internal */
export type RouterChatCompletionsContent2$Outbound =
  | RouterChatCompletions21$Outbound
  | RouterChatCompletions22$Outbound;

/** @internal */
export const RouterChatCompletionsContent2$outboundSchema: z.ZodType<
  RouterChatCompletionsContent2$Outbound,
  z.ZodTypeDef,
  RouterChatCompletionsContent2
> = z.union([
  z.lazy(() => RouterChatCompletions21$outboundSchema),
  z.lazy(() => RouterChatCompletions22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsContent2$ {
  /** @deprecated use `RouterChatCompletionsContent2$inboundSchema` instead. */
  export const inboundSchema = RouterChatCompletionsContent2$inboundSchema;
  /** @deprecated use `RouterChatCompletionsContent2$outboundSchema` instead. */
  export const outboundSchema = RouterChatCompletionsContent2$outboundSchema;
  /** @deprecated use `RouterChatCompletionsContent2$Outbound` instead. */
  export type Outbound = RouterChatCompletionsContent2$Outbound;
}

/** @internal */
export const MessagesContent$inboundSchema: z.ZodType<
  MessagesContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => RouterChatCompletions21$inboundSchema),
    z.lazy(() => RouterChatCompletions22$inboundSchema),
  ])),
]);

/** @internal */
export type MessagesContent$Outbound =
  | string
  | Array<RouterChatCompletions21$Outbound | RouterChatCompletions22$Outbound>;

/** @internal */
export const MessagesContent$outboundSchema: z.ZodType<
  MessagesContent$Outbound,
  z.ZodTypeDef,
  MessagesContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => RouterChatCompletions21$outboundSchema),
    z.lazy(() => RouterChatCompletions22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesContent$ {
  /** @deprecated use `MessagesContent$inboundSchema` instead. */
  export const inboundSchema = MessagesContent$inboundSchema;
  /** @deprecated use `MessagesContent$outboundSchema` instead. */
  export const outboundSchema = MessagesContent$outboundSchema;
  /** @deprecated use `MessagesContent$Outbound` instead. */
  export type Outbound = MessagesContent$Outbound;
}

/** @internal */
export const Messages1$inboundSchema: z.ZodType<
  Messages1,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: MessagesRole$inboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => RouterChatCompletions21$inboundSchema),
      z.lazy(() => RouterChatCompletions22$inboundSchema),
    ])),
  ]),
});

/** @internal */
export type Messages1$Outbound = {
  role: string;
  name?: string | undefined;
  content:
    | string
    | Array<
      RouterChatCompletions21$Outbound | RouterChatCompletions22$Outbound
    >;
};

/** @internal */
export const Messages1$outboundSchema: z.ZodType<
  Messages1$Outbound,
  z.ZodTypeDef,
  Messages1
> = z.object({
  role: MessagesRole$outboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => RouterChatCompletions21$outboundSchema),
      z.lazy(() => RouterChatCompletions22$outboundSchema),
    ])),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages1$ {
  /** @deprecated use `Messages1$inboundSchema` instead. */
  export const inboundSchema = Messages1$inboundSchema;
  /** @deprecated use `Messages1$outboundSchema` instead. */
  export const outboundSchema = Messages1$outboundSchema;
  /** @deprecated use `Messages1$Outbound` instead. */
  export type Outbound = Messages1$Outbound;
}

/** @internal */
export const RouterChatCompletionsMessages$inboundSchema: z.ZodType<
  RouterChatCompletionsMessages,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Messages1$inboundSchema),
  z.lazy(() => Messages2$inboundSchema),
  z.lazy(() => Four$inboundSchema),
  z.lazy(() => Messages3$inboundSchema),
]);

/** @internal */
export type RouterChatCompletionsMessages$Outbound =
  | Messages1$Outbound
  | Messages2$Outbound
  | Four$Outbound
  | Messages3$Outbound;

/** @internal */
export const RouterChatCompletionsMessages$outboundSchema: z.ZodType<
  RouterChatCompletionsMessages$Outbound,
  z.ZodTypeDef,
  RouterChatCompletionsMessages
> = z.union([
  z.lazy(() => Messages1$outboundSchema),
  z.lazy(() => Messages2$outboundSchema),
  z.lazy(() => Four$outboundSchema),
  z.lazy(() => Messages3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsMessages$ {
  /** @deprecated use `RouterChatCompletionsMessages$inboundSchema` instead. */
  export const inboundSchema = RouterChatCompletionsMessages$inboundSchema;
  /** @deprecated use `RouterChatCompletionsMessages$outboundSchema` instead. */
  export const outboundSchema = RouterChatCompletionsMessages$outboundSchema;
  /** @deprecated use `RouterChatCompletionsMessages$Outbound` instead. */
  export type Outbound = RouterChatCompletionsMessages$Outbound;
}

/** @internal */
export const RouterChatCompletionsType$inboundSchema: z.ZodNativeEnum<
  typeof RouterChatCompletionsType
> = z.nativeEnum(RouterChatCompletionsType);

/** @internal */
export const RouterChatCompletionsType$outboundSchema: z.ZodNativeEnum<
  typeof RouterChatCompletionsType
> = RouterChatCompletionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsType$ {
  /** @deprecated use `RouterChatCompletionsType$inboundSchema` instead. */
  export const inboundSchema = RouterChatCompletionsType$inboundSchema;
  /** @deprecated use `RouterChatCompletionsType$outboundSchema` instead. */
  export const outboundSchema = RouterChatCompletionsType$outboundSchema;
}

/** @internal */
export const RouterChatCompletionsRouterChatCompletionsType$inboundSchema:
  z.ZodNativeEnum<typeof RouterChatCompletionsRouterChatCompletionsType> = z
    .nativeEnum(RouterChatCompletionsRouterChatCompletionsType);

/** @internal */
export const RouterChatCompletionsRouterChatCompletionsType$outboundSchema:
  z.ZodNativeEnum<typeof RouterChatCompletionsRouterChatCompletionsType> =
    RouterChatCompletionsRouterChatCompletionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsRouterChatCompletionsType$ {
  /** @deprecated use `RouterChatCompletionsRouterChatCompletionsType$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsRouterChatCompletionsType$inboundSchema;
  /** @deprecated use `RouterChatCompletionsRouterChatCompletionsType$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsRouterChatCompletionsType$outboundSchema;
}

/** @internal */
export const ParametersT$inboundSchema: z.ZodType<
  ParametersT,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RouterChatCompletionsRouterChatCompletionsType$inboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
});

/** @internal */
export type ParametersT$Outbound = {
  type: string;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
};

/** @internal */
export const ParametersT$outboundSchema: z.ZodType<
  ParametersT$Outbound,
  z.ZodTypeDef,
  ParametersT
> = z.object({
  type: RouterChatCompletionsRouterChatCompletionsType$outboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParametersT$ {
  /** @deprecated use `ParametersT$inboundSchema` instead. */
  export const inboundSchema = ParametersT$inboundSchema;
  /** @deprecated use `ParametersT$outboundSchema` instead. */
  export const outboundSchema = ParametersT$outboundSchema;
  /** @deprecated use `ParametersT$Outbound` instead. */
  export type Outbound = ParametersT$Outbound;
}

/** @internal */
export const RouterChatCompletionsFunction$inboundSchema: z.ZodType<
  RouterChatCompletionsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.lazy(() => ParametersT$inboundSchema).optional(),
  strict: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type RouterChatCompletionsFunction$Outbound = {
  name: string;
  description?: string | undefined;
  parameters?: ParametersT$Outbound | undefined;
  strict: boolean | null;
};

/** @internal */
export const RouterChatCompletionsFunction$outboundSchema: z.ZodType<
  RouterChatCompletionsFunction$Outbound,
  z.ZodTypeDef,
  RouterChatCompletionsFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.lazy(() => ParametersT$outboundSchema).optional(),
  strict: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsFunction$ {
  /** @deprecated use `RouterChatCompletionsFunction$inboundSchema` instead. */
  export const inboundSchema = RouterChatCompletionsFunction$inboundSchema;
  /** @deprecated use `RouterChatCompletionsFunction$outboundSchema` instead. */
  export const outboundSchema = RouterChatCompletionsFunction$outboundSchema;
  /** @deprecated use `RouterChatCompletionsFunction$Outbound` instead. */
  export type Outbound = RouterChatCompletionsFunction$Outbound;
}

/** @internal */
export const Tools$inboundSchema: z.ZodType<Tools, z.ZodTypeDef, unknown> = z
  .object({
    type: RouterChatCompletionsType$inboundSchema,
    function: z.lazy(() => RouterChatCompletionsFunction$inboundSchema),
  });

/** @internal */
export type Tools$Outbound = {
  type: string;
  function: RouterChatCompletionsFunction$Outbound;
};

/** @internal */
export const Tools$outboundSchema: z.ZodType<
  Tools$Outbound,
  z.ZodTypeDef,
  Tools
> = z.object({
  type: RouterChatCompletionsType$outboundSchema,
  function: z.lazy(() => RouterChatCompletionsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools$ {
  /** @deprecated use `Tools$inboundSchema` instead. */
  export const inboundSchema = Tools$inboundSchema;
  /** @deprecated use `Tools$outboundSchema` instead. */
  export const outboundSchema = Tools$outboundSchema;
  /** @deprecated use `Tools$Outbound` instead. */
  export type Outbound = Tools$Outbound;
}

/** @internal */
export const RouterChatCompletionsRequestBody$inboundSchema: z.ZodType<
  RouterChatCompletionsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  messages: z.array(
    z.union([
      z.lazy(() => Messages1$inboundSchema),
      z.lazy(() => Messages2$inboundSchema),
      z.lazy(() => Four$inboundSchema),
      z.lazy(() => Messages3$inboundSchema),
    ]),
  ),
  frequency_penalty: z.nullable(z.number().default(0)),
  max_tokens: z.nullable(z.number()).optional(),
  presence_penalty: z.nullable(z.number().default(0)),
  seed: z.nullable(z.number()).optional(),
  stream: z.nullable(z.boolean().default(false)),
  temperature: z.nullable(z.number().default(1)),
  top_p: z.nullable(z.number().default(1)),
  tools: z.array(z.lazy(() => Tools$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "frequency_penalty": "frequencyPenalty",
    "max_tokens": "maxTokens",
    "presence_penalty": "presencePenalty",
    "top_p": "topP",
  });
});

/** @internal */
export type RouterChatCompletionsRequestBody$Outbound = {
  model: string;
  messages: Array<
    Messages1$Outbound | Messages2$Outbound | Four$Outbound | Messages3$Outbound
  >;
  frequency_penalty: number | null;
  max_tokens?: number | null | undefined;
  presence_penalty: number | null;
  seed?: number | null | undefined;
  stream: boolean | null;
  temperature: number | null;
  top_p: number | null;
  tools?: Array<Tools$Outbound> | undefined;
};

/** @internal */
export const RouterChatCompletionsRequestBody$outboundSchema: z.ZodType<
  RouterChatCompletionsRequestBody$Outbound,
  z.ZodTypeDef,
  RouterChatCompletionsRequestBody
> = z.object({
  model: z.string(),
  messages: z.array(
    z.union([
      z.lazy(() => Messages1$outboundSchema),
      z.lazy(() => Messages2$outboundSchema),
      z.lazy(() => Four$outboundSchema),
      z.lazy(() => Messages3$outboundSchema),
    ]),
  ),
  frequencyPenalty: z.nullable(z.number().default(0)),
  maxTokens: z.nullable(z.number()).optional(),
  presencePenalty: z.nullable(z.number().default(0)),
  seed: z.nullable(z.number()).optional(),
  stream: z.nullable(z.boolean().default(false)),
  temperature: z.nullable(z.number().default(1)),
  topP: z.nullable(z.number().default(1)),
  tools: z.array(z.lazy(() => Tools$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    frequencyPenalty: "frequency_penalty",
    maxTokens: "max_tokens",
    presencePenalty: "presence_penalty",
    topP: "top_p",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsRequestBody$ {
  /** @deprecated use `RouterChatCompletionsRequestBody$inboundSchema` instead. */
  export const inboundSchema = RouterChatCompletionsRequestBody$inboundSchema;
  /** @deprecated use `RouterChatCompletionsRequestBody$outboundSchema` instead. */
  export const outboundSchema = RouterChatCompletionsRequestBody$outboundSchema;
  /** @deprecated use `RouterChatCompletionsRequestBody$Outbound` instead. */
  export type Outbound = RouterChatCompletionsRequestBody$Outbound;
}

/** @internal */
export const RouterChatCompletionsRouterChatCompletionsResponseBody$inboundSchema:
  z.ZodType<
    RouterChatCompletionsRouterChatCompletionsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.string(),
    event: z.string().optional(),
    id: z.string().optional(),
    retry: z.number().int().optional(),
  });

/** @internal */
export type RouterChatCompletionsRouterChatCompletionsResponseBody$Outbound = {
  data: string;
  event?: string | undefined;
  id?: string | undefined;
  retry?: number | undefined;
};

/** @internal */
export const RouterChatCompletionsRouterChatCompletionsResponseBody$outboundSchema:
  z.ZodType<
    RouterChatCompletionsRouterChatCompletionsResponseBody$Outbound,
    z.ZodTypeDef,
    RouterChatCompletionsRouterChatCompletionsResponseBody
  > = z.object({
    data: z.string(),
    event: z.string().optional(),
    id: z.string().optional(),
    retry: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsRouterChatCompletionsResponseBody$ {
  /** @deprecated use `RouterChatCompletionsRouterChatCompletionsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsRouterChatCompletionsResponseBody$inboundSchema;
  /** @deprecated use `RouterChatCompletionsRouterChatCompletionsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsRouterChatCompletionsResponseBody$outboundSchema;
  /** @deprecated use `RouterChatCompletionsRouterChatCompletionsResponseBody$Outbound` instead. */
  export type Outbound =
    RouterChatCompletionsRouterChatCompletionsResponseBody$Outbound;
}

/** @internal */
export const ResponseBodyFinishReason$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFinishReason
> = z.nativeEnum(ResponseBodyFinishReason);

/** @internal */
export const ResponseBodyFinishReason$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFinishReason
> = ResponseBodyFinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFinishReason$ {
  /** @deprecated use `ResponseBodyFinishReason$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFinishReason$inboundSchema;
  /** @deprecated use `ResponseBodyFinishReason$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFinishReason$outboundSchema;
}

/** @internal */
export const RouterChatCompletionsResponseBodyTopLogprobs$inboundSchema:
  z.ZodType<
    RouterChatCompletionsResponseBodyTopLogprobs,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
  });

/** @internal */
export type RouterChatCompletionsResponseBodyTopLogprobs$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

/** @internal */
export const RouterChatCompletionsResponseBodyTopLogprobs$outboundSchema:
  z.ZodType<
    RouterChatCompletionsResponseBodyTopLogprobs$Outbound,
    z.ZodTypeDef,
    RouterChatCompletionsResponseBodyTopLogprobs
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsResponseBodyTopLogprobs$ {
  /** @deprecated use `RouterChatCompletionsResponseBodyTopLogprobs$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsResponseBodyTopLogprobs$inboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyTopLogprobs$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsResponseBodyTopLogprobs$outboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyTopLogprobs$Outbound` instead. */
  export type Outbound = RouterChatCompletionsResponseBodyTopLogprobs$Outbound;
}

/** @internal */
export const RouterChatCompletionsResponseBodyContent$inboundSchema: z.ZodType<
  RouterChatCompletionsResponseBodyContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  top_logprobs: z.array(
    z.lazy(() => RouterChatCompletionsResponseBodyTopLogprobs$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type RouterChatCompletionsResponseBodyContent$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<RouterChatCompletionsResponseBodyTopLogprobs$Outbound>;
};

/** @internal */
export const RouterChatCompletionsResponseBodyContent$outboundSchema: z.ZodType<
  RouterChatCompletionsResponseBodyContent$Outbound,
  z.ZodTypeDef,
  RouterChatCompletionsResponseBodyContent
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  topLogprobs: z.array(
    z.lazy(() => RouterChatCompletionsResponseBodyTopLogprobs$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsResponseBodyContent$ {
  /** @deprecated use `RouterChatCompletionsResponseBodyContent$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsResponseBodyContent$inboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyContent$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsResponseBodyContent$outboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyContent$Outbound` instead. */
  export type Outbound = RouterChatCompletionsResponseBodyContent$Outbound;
}

/** @internal */
export const RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$inboundSchema:
  z.ZodType<
    RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
  });

/** @internal */
export type RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$Outbound =
  {
    token: string;
    logprob: number;
    bytes: Array<number> | null;
  };

/** @internal */
export const RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$outboundSchema:
  z.ZodType<
    RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$Outbound,
    z.ZodTypeDef,
    RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$ {
  /** @deprecated use `RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$inboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$outboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$Outbound` instead. */
  export type Outbound =
    RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$Outbound;
}

/** @internal */
export const ResponseBodyRefusal$inboundSchema: z.ZodType<
  ResponseBodyRefusal,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  top_logprobs: z.array(
    z.lazy(() =>
      RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$inboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type ResponseBodyRefusal$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<
    RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$Outbound
  >;
};

/** @internal */
export const ResponseBodyRefusal$outboundSchema: z.ZodType<
  ResponseBodyRefusal$Outbound,
  z.ZodTypeDef,
  ResponseBodyRefusal
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  topLogprobs: z.array(
    z.lazy(() =>
      RouterChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$outboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRefusal$ {
  /** @deprecated use `ResponseBodyRefusal$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRefusal$inboundSchema;
  /** @deprecated use `ResponseBodyRefusal$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRefusal$outboundSchema;
  /** @deprecated use `ResponseBodyRefusal$Outbound` instead. */
  export type Outbound = ResponseBodyRefusal$Outbound;
}

/** @internal */
export const ResponseBodyLogprobs$inboundSchema: z.ZodType<
  ResponseBodyLogprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(
    z.array(
      z.lazy(() => RouterChatCompletionsResponseBodyContent$inboundSchema),
    ),
  ),
  refusal: z.nullable(z.array(z.lazy(() => ResponseBodyRefusal$inboundSchema))),
});

/** @internal */
export type ResponseBodyLogprobs$Outbound = {
  content: Array<RouterChatCompletionsResponseBodyContent$Outbound> | null;
  refusal: Array<ResponseBodyRefusal$Outbound> | null;
};

/** @internal */
export const ResponseBodyLogprobs$outboundSchema: z.ZodType<
  ResponseBodyLogprobs$Outbound,
  z.ZodTypeDef,
  ResponseBodyLogprobs
> = z.object({
  content: z.nullable(
    z.array(
      z.lazy(() => RouterChatCompletionsResponseBodyContent$outboundSchema),
    ),
  ),
  refusal: z.nullable(
    z.array(z.lazy(() => ResponseBodyRefusal$outboundSchema)),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyLogprobs$ {
  /** @deprecated use `ResponseBodyLogprobs$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyLogprobs$inboundSchema;
  /** @deprecated use `ResponseBodyLogprobs$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyLogprobs$outboundSchema;
  /** @deprecated use `ResponseBodyLogprobs$Outbound` instead. */
  export type Outbound = ResponseBodyLogprobs$Outbound;
}

/** @internal */
export const RouterChatCompletionsResponseBodyType$inboundSchema:
  z.ZodNativeEnum<typeof RouterChatCompletionsResponseBodyType> = z.nativeEnum(
    RouterChatCompletionsResponseBodyType,
  );

/** @internal */
export const RouterChatCompletionsResponseBodyType$outboundSchema:
  z.ZodNativeEnum<typeof RouterChatCompletionsResponseBodyType> =
    RouterChatCompletionsResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsResponseBodyType$ {
  /** @deprecated use `RouterChatCompletionsResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsResponseBodyType$inboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsResponseBodyType$outboundSchema;
}

/** @internal */
export const RouterChatCompletionsResponseBodyFunction$inboundSchema: z.ZodType<
  RouterChatCompletionsResponseBodyFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type RouterChatCompletionsResponseBodyFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const RouterChatCompletionsResponseBodyFunction$outboundSchema:
  z.ZodType<
    RouterChatCompletionsResponseBodyFunction$Outbound,
    z.ZodTypeDef,
    RouterChatCompletionsResponseBodyFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsResponseBodyFunction$ {
  /** @deprecated use `RouterChatCompletionsResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsResponseBodyFunction$inboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsResponseBodyFunction$outboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyFunction$Outbound` instead. */
  export type Outbound = RouterChatCompletionsResponseBodyFunction$Outbound;
}

/** @internal */
export const RouterChatCompletionsResponseBodyToolCalls$inboundSchema:
  z.ZodType<RouterChatCompletionsResponseBodyToolCalls, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string(),
      type: RouterChatCompletionsResponseBodyType$inboundSchema,
      function: z.lazy(() =>
        RouterChatCompletionsResponseBodyFunction$inboundSchema
      ),
    });

/** @internal */
export type RouterChatCompletionsResponseBodyToolCalls$Outbound = {
  id: string;
  type: string;
  function: RouterChatCompletionsResponseBodyFunction$Outbound;
};

/** @internal */
export const RouterChatCompletionsResponseBodyToolCalls$outboundSchema:
  z.ZodType<
    RouterChatCompletionsResponseBodyToolCalls$Outbound,
    z.ZodTypeDef,
    RouterChatCompletionsResponseBodyToolCalls
  > = z.object({
    id: z.string(),
    type: RouterChatCompletionsResponseBodyType$outboundSchema,
    function: z.lazy(() =>
      RouterChatCompletionsResponseBodyFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsResponseBodyToolCalls$ {
  /** @deprecated use `RouterChatCompletionsResponseBodyToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsResponseBodyToolCalls$inboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsResponseBodyToolCalls$outboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyToolCalls$Outbound` instead. */
  export type Outbound = RouterChatCompletionsResponseBodyToolCalls$Outbound;
}

/** @internal */
export const RouterChatCompletionsResponseBodyRole$inboundSchema:
  z.ZodNativeEnum<typeof RouterChatCompletionsResponseBodyRole> = z.nativeEnum(
    RouterChatCompletionsResponseBodyRole,
  );

/** @internal */
export const RouterChatCompletionsResponseBodyRole$outboundSchema:
  z.ZodNativeEnum<typeof RouterChatCompletionsResponseBodyRole> =
    RouterChatCompletionsResponseBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsResponseBodyRole$ {
  /** @deprecated use `RouterChatCompletionsResponseBodyRole$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsResponseBodyRole$inboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyRole$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsResponseBodyRole$outboundSchema;
}

/** @internal */
export const Delta$inboundSchema: z.ZodType<Delta, z.ZodTypeDef, unknown> = z
  .object({
    content: z.nullable(z.string()),
    refusal: z.nullable(z.string()),
    tool_calls: z.array(
      z.lazy(() => RouterChatCompletionsResponseBodyToolCalls$inboundSchema),
    ),
    role: RouterChatCompletionsResponseBodyRole$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type Delta$Outbound = {
  content: string | null;
  refusal: string | null;
  tool_calls: Array<RouterChatCompletionsResponseBodyToolCalls$Outbound>;
  role: string;
};

/** @internal */
export const Delta$outboundSchema: z.ZodType<
  Delta$Outbound,
  z.ZodTypeDef,
  Delta
> = z.object({
  content: z.nullable(z.string()),
  refusal: z.nullable(z.string()),
  toolCalls: z.array(
    z.lazy(() => RouterChatCompletionsResponseBodyToolCalls$outboundSchema),
  ),
  role: RouterChatCompletionsResponseBodyRole$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Delta$ {
  /** @deprecated use `Delta$inboundSchema` instead. */
  export const inboundSchema = Delta$inboundSchema;
  /** @deprecated use `Delta$outboundSchema` instead. */
  export const outboundSchema = Delta$outboundSchema;
  /** @deprecated use `Delta$Outbound` instead. */
  export type Outbound = Delta$Outbound;
}

/** @internal */
export const RouterChatCompletionsResponseBodyChoices$inboundSchema: z.ZodType<
  RouterChatCompletionsResponseBodyChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  finish_reason: ResponseBodyFinishReason$inboundSchema,
  index: z.number(),
  logprobs: z.nullable(z.lazy(() => ResponseBodyLogprobs$inboundSchema)),
  delta: z.lazy(() => Delta$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type RouterChatCompletionsResponseBodyChoices$Outbound = {
  finish_reason: string;
  index: number;
  logprobs: ResponseBodyLogprobs$Outbound | null;
  delta: Delta$Outbound;
};

/** @internal */
export const RouterChatCompletionsResponseBodyChoices$outboundSchema: z.ZodType<
  RouterChatCompletionsResponseBodyChoices$Outbound,
  z.ZodTypeDef,
  RouterChatCompletionsResponseBodyChoices
> = z.object({
  finishReason: ResponseBodyFinishReason$outboundSchema,
  index: z.number(),
  logprobs: z.nullable(z.lazy(() => ResponseBodyLogprobs$outboundSchema)),
  delta: z.lazy(() => Delta$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsResponseBodyChoices$ {
  /** @deprecated use `RouterChatCompletionsResponseBodyChoices$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsResponseBodyChoices$inboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyChoices$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsResponseBodyChoices$outboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyChoices$Outbound` instead. */
  export type Outbound = RouterChatCompletionsResponseBodyChoices$Outbound;
}

/** @internal */
export const RouterChatCompletionsResponseBodyUsage$inboundSchema: z.ZodType<
  RouterChatCompletionsResponseBodyUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  completion_tokens: z.number().optional(),
  prompt_tokens: z.number().optional(),
  total_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "completion_tokens": "completionTokens",
    "prompt_tokens": "promptTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type RouterChatCompletionsResponseBodyUsage$Outbound = {
  completion_tokens?: number | undefined;
  prompt_tokens?: number | undefined;
  total_tokens?: number | undefined;
};

/** @internal */
export const RouterChatCompletionsResponseBodyUsage$outboundSchema: z.ZodType<
  RouterChatCompletionsResponseBodyUsage$Outbound,
  z.ZodTypeDef,
  RouterChatCompletionsResponseBodyUsage
> = z.object({
  completionTokens: z.number().optional(),
  promptTokens: z.number().optional(),
  totalTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    completionTokens: "completion_tokens",
    promptTokens: "prompt_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsResponseBodyUsage$ {
  /** @deprecated use `RouterChatCompletionsResponseBodyUsage$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsResponseBodyUsage$inboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyUsage$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsResponseBodyUsage$outboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyUsage$Outbound` instead. */
  export type Outbound = RouterChatCompletionsResponseBodyUsage$Outbound;
}

/** @internal */
export const ResponseBody2$inboundSchema: z.ZodType<
  ResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  choices: z.array(
    z.lazy(() => RouterChatCompletionsResponseBodyChoices$inboundSchema),
  ),
  created: z.number(),
  model: z.string(),
  system_fingerprint: z.string(),
  object: z.string(),
  usage: z.lazy(() => RouterChatCompletionsResponseBodyUsage$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type ResponseBody2$Outbound = {
  id: string;
  choices: Array<RouterChatCompletionsResponseBodyChoices$Outbound>;
  created: number;
  model: string;
  system_fingerprint: string;
  object: string;
  usage: RouterChatCompletionsResponseBodyUsage$Outbound;
};

/** @internal */
export const ResponseBody2$outboundSchema: z.ZodType<
  ResponseBody2$Outbound,
  z.ZodTypeDef,
  ResponseBody2
> = z.object({
  id: z.string(),
  choices: z.array(
    z.lazy(() => RouterChatCompletionsResponseBodyChoices$outboundSchema),
  ),
  created: z.number(),
  model: z.string(),
  systemFingerprint: z.string(),
  object: z.string(),
  usage: z.lazy(() => RouterChatCompletionsResponseBodyUsage$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody2$ {
  /** @deprecated use `ResponseBody2$inboundSchema` instead. */
  export const inboundSchema = ResponseBody2$inboundSchema;
  /** @deprecated use `ResponseBody2$outboundSchema` instead. */
  export const outboundSchema = ResponseBody2$outboundSchema;
  /** @deprecated use `ResponseBody2$Outbound` instead. */
  export type Outbound = ResponseBody2$Outbound;
}

/** @internal */
export const RouterChatCompletionsResponseBodyFinishReason$inboundSchema:
  z.ZodNativeEnum<typeof RouterChatCompletionsResponseBodyFinishReason> = z
    .nativeEnum(RouterChatCompletionsResponseBodyFinishReason);

/** @internal */
export const RouterChatCompletionsResponseBodyFinishReason$outboundSchema:
  z.ZodNativeEnum<typeof RouterChatCompletionsResponseBodyFinishReason> =
    RouterChatCompletionsResponseBodyFinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsResponseBodyFinishReason$ {
  /** @deprecated use `RouterChatCompletionsResponseBodyFinishReason$inboundSchema` instead. */
  export const inboundSchema =
    RouterChatCompletionsResponseBodyFinishReason$inboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBodyFinishReason$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsResponseBodyFinishReason$outboundSchema;
}

/** @internal */
export const ResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyType
> = z.nativeEnum(ResponseBodyType);

/** @internal */
export const ResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyType
> = ResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyType$ {
  /** @deprecated use `ResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyType$inboundSchema;
  /** @deprecated use `ResponseBodyType$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyType$outboundSchema;
}

/** @internal */
export const ResponseBodyFunction$inboundSchema: z.ZodType<
  ResponseBodyFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type ResponseBodyFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const ResponseBodyFunction$outboundSchema: z.ZodType<
  ResponseBodyFunction$Outbound,
  z.ZodTypeDef,
  ResponseBodyFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFunction$ {
  /** @deprecated use `ResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFunction$inboundSchema;
  /** @deprecated use `ResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFunction$outboundSchema;
  /** @deprecated use `ResponseBodyFunction$Outbound` instead. */
  export type Outbound = ResponseBodyFunction$Outbound;
}

/** @internal */
export const ResponseBodyToolCalls$inboundSchema: z.ZodType<
  ResponseBodyToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: ResponseBodyType$inboundSchema,
  function: z.lazy(() => ResponseBodyFunction$inboundSchema),
});

/** @internal */
export type ResponseBodyToolCalls$Outbound = {
  id: string;
  type: string;
  function: ResponseBodyFunction$Outbound;
};

/** @internal */
export const ResponseBodyToolCalls$outboundSchema: z.ZodType<
  ResponseBodyToolCalls$Outbound,
  z.ZodTypeDef,
  ResponseBodyToolCalls
> = z.object({
  id: z.string(),
  type: ResponseBodyType$outboundSchema,
  function: z.lazy(() => ResponseBodyFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyToolCalls$ {
  /** @deprecated use `ResponseBodyToolCalls$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyToolCalls$inboundSchema;
  /** @deprecated use `ResponseBodyToolCalls$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyToolCalls$outboundSchema;
  /** @deprecated use `ResponseBodyToolCalls$Outbound` instead. */
  export type Outbound = ResponseBodyToolCalls$Outbound;
}

/** @internal */
export const ResponseBodyRole$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyRole
> = z.nativeEnum(ResponseBodyRole);

/** @internal */
export const ResponseBodyRole$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyRole
> = ResponseBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRole$ {
  /** @deprecated use `ResponseBodyRole$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRole$inboundSchema;
  /** @deprecated use `ResponseBodyRole$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRole$outboundSchema;
}

/** @internal */
export const ResponseBodyMessage$inboundSchema: z.ZodType<
  ResponseBodyMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()),
  refusal: z.nullable(z.string()),
  tool_calls: z.array(z.lazy(() => ResponseBodyToolCalls$inboundSchema)),
  role: ResponseBodyRole$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ResponseBodyMessage$Outbound = {
  content: string | null;
  refusal: string | null;
  tool_calls: Array<ResponseBodyToolCalls$Outbound>;
  role: string;
};

/** @internal */
export const ResponseBodyMessage$outboundSchema: z.ZodType<
  ResponseBodyMessage$Outbound,
  z.ZodTypeDef,
  ResponseBodyMessage
> = z.object({
  content: z.nullable(z.string()),
  refusal: z.nullable(z.string()),
  toolCalls: z.array(z.lazy(() => ResponseBodyToolCalls$outboundSchema)),
  role: ResponseBodyRole$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyMessage$ {
  /** @deprecated use `ResponseBodyMessage$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyMessage$inboundSchema;
  /** @deprecated use `ResponseBodyMessage$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyMessage$outboundSchema;
  /** @deprecated use `ResponseBodyMessage$Outbound` instead. */
  export type Outbound = ResponseBodyMessage$Outbound;
}

/** @internal */
export const TopLogprobs$inboundSchema: z.ZodType<
  TopLogprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/** @internal */
export type TopLogprobs$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

/** @internal */
export const TopLogprobs$outboundSchema: z.ZodType<
  TopLogprobs$Outbound,
  z.ZodTypeDef,
  TopLogprobs
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopLogprobs$ {
  /** @deprecated use `TopLogprobs$inboundSchema` instead. */
  export const inboundSchema = TopLogprobs$inboundSchema;
  /** @deprecated use `TopLogprobs$outboundSchema` instead. */
  export const outboundSchema = TopLogprobs$outboundSchema;
  /** @deprecated use `TopLogprobs$Outbound` instead. */
  export type Outbound = TopLogprobs$Outbound;
}

/** @internal */
export const ResponseBodyContent$inboundSchema: z.ZodType<
  ResponseBodyContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  top_logprobs: z.array(z.lazy(() => TopLogprobs$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type ResponseBodyContent$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<TopLogprobs$Outbound>;
};

/** @internal */
export const ResponseBodyContent$outboundSchema: z.ZodType<
  ResponseBodyContent$Outbound,
  z.ZodTypeDef,
  ResponseBodyContent
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  topLogprobs: z.array(z.lazy(() => TopLogprobs$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyContent$ {
  /** @deprecated use `ResponseBodyContent$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyContent$inboundSchema;
  /** @deprecated use `ResponseBodyContent$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyContent$outboundSchema;
  /** @deprecated use `ResponseBodyContent$Outbound` instead. */
  export type Outbound = ResponseBodyContent$Outbound;
}

/** @internal */
export const ResponseBodyTopLogprobs$inboundSchema: z.ZodType<
  ResponseBodyTopLogprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/** @internal */
export type ResponseBodyTopLogprobs$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

/** @internal */
export const ResponseBodyTopLogprobs$outboundSchema: z.ZodType<
  ResponseBodyTopLogprobs$Outbound,
  z.ZodTypeDef,
  ResponseBodyTopLogprobs
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyTopLogprobs$ {
  /** @deprecated use `ResponseBodyTopLogprobs$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyTopLogprobs$inboundSchema;
  /** @deprecated use `ResponseBodyTopLogprobs$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyTopLogprobs$outboundSchema;
  /** @deprecated use `ResponseBodyTopLogprobs$Outbound` instead. */
  export type Outbound = ResponseBodyTopLogprobs$Outbound;
}

/** @internal */
export const Refusal$inboundSchema: z.ZodType<Refusal, z.ZodTypeDef, unknown> =
  z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
    top_logprobs: z.array(z.lazy(() => ResponseBodyTopLogprobs$inboundSchema)),
  }).transform((v) => {
    return remap$(v, {
      "top_logprobs": "topLogprobs",
    });
  });

/** @internal */
export type Refusal$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<ResponseBodyTopLogprobs$Outbound>;
};

/** @internal */
export const Refusal$outboundSchema: z.ZodType<
  Refusal$Outbound,
  z.ZodTypeDef,
  Refusal
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  topLogprobs: z.array(z.lazy(() => ResponseBodyTopLogprobs$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Refusal$ {
  /** @deprecated use `Refusal$inboundSchema` instead. */
  export const inboundSchema = Refusal$inboundSchema;
  /** @deprecated use `Refusal$outboundSchema` instead. */
  export const outboundSchema = Refusal$outboundSchema;
  /** @deprecated use `Refusal$Outbound` instead. */
  export type Outbound = Refusal$Outbound;
}

/** @internal */
export const Logprobs$inboundSchema: z.ZodType<
  Logprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.array(z.lazy(() => ResponseBodyContent$inboundSchema))),
  refusal: z.nullable(z.array(z.lazy(() => Refusal$inboundSchema))),
});

/** @internal */
export type Logprobs$Outbound = {
  content: Array<ResponseBodyContent$Outbound> | null;
  refusal: Array<Refusal$Outbound> | null;
};

/** @internal */
export const Logprobs$outboundSchema: z.ZodType<
  Logprobs$Outbound,
  z.ZodTypeDef,
  Logprobs
> = z.object({
  content: z.nullable(
    z.array(z.lazy(() => ResponseBodyContent$outboundSchema)),
  ),
  refusal: z.nullable(z.array(z.lazy(() => Refusal$outboundSchema))),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Logprobs$ {
  /** @deprecated use `Logprobs$inboundSchema` instead. */
  export const inboundSchema = Logprobs$inboundSchema;
  /** @deprecated use `Logprobs$outboundSchema` instead. */
  export const outboundSchema = Logprobs$outboundSchema;
  /** @deprecated use `Logprobs$Outbound` instead. */
  export type Outbound = Logprobs$Outbound;
}

/** @internal */
export const ResponseBodyChoices$inboundSchema: z.ZodType<
  ResponseBodyChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  finish_reason: RouterChatCompletionsResponseBodyFinishReason$inboundSchema,
  index: z.number(),
  message: z.lazy(() => ResponseBodyMessage$inboundSchema),
  logprobs: z.nullable(z.lazy(() => Logprobs$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type ResponseBodyChoices$Outbound = {
  finish_reason: string;
  index: number;
  message: ResponseBodyMessage$Outbound;
  logprobs: Logprobs$Outbound | null;
};

/** @internal */
export const ResponseBodyChoices$outboundSchema: z.ZodType<
  ResponseBodyChoices$Outbound,
  z.ZodTypeDef,
  ResponseBodyChoices
> = z.object({
  finishReason: RouterChatCompletionsResponseBodyFinishReason$outboundSchema,
  index: z.number(),
  message: z.lazy(() => ResponseBodyMessage$outboundSchema),
  logprobs: z.nullable(z.lazy(() => Logprobs$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyChoices$ {
  /** @deprecated use `ResponseBodyChoices$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyChoices$inboundSchema;
  /** @deprecated use `ResponseBodyChoices$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyChoices$outboundSchema;
  /** @deprecated use `ResponseBodyChoices$Outbound` instead. */
  export type Outbound = ResponseBodyChoices$Outbound;
}

/** @internal */
export const ResponseBodyUsage$inboundSchema: z.ZodType<
  ResponseBodyUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  completion_tokens: z.number().optional(),
  prompt_tokens: z.number().optional(),
  total_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "completion_tokens": "completionTokens",
    "prompt_tokens": "promptTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type ResponseBodyUsage$Outbound = {
  completion_tokens?: number | undefined;
  prompt_tokens?: number | undefined;
  total_tokens?: number | undefined;
};

/** @internal */
export const ResponseBodyUsage$outboundSchema: z.ZodType<
  ResponseBodyUsage$Outbound,
  z.ZodTypeDef,
  ResponseBodyUsage
> = z.object({
  completionTokens: z.number().optional(),
  promptTokens: z.number().optional(),
  totalTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    completionTokens: "completion_tokens",
    promptTokens: "prompt_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyUsage$ {
  /** @deprecated use `ResponseBodyUsage$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyUsage$inboundSchema;
  /** @deprecated use `ResponseBodyUsage$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyUsage$outboundSchema;
  /** @deprecated use `ResponseBodyUsage$Outbound` instead. */
  export type Outbound = ResponseBodyUsage$Outbound;
}

/** @internal */
export const ResponseBody1$inboundSchema: z.ZodType<
  ResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  choices: z.array(z.lazy(() => ResponseBodyChoices$inboundSchema)),
  created: z.number(),
  model: z.string(),
  system_fingerprint: z.string(),
  object: z.string(),
  usage: z.lazy(() => ResponseBodyUsage$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type ResponseBody1$Outbound = {
  id: string;
  choices: Array<ResponseBodyChoices$Outbound>;
  created: number;
  model: string;
  system_fingerprint: string;
  object: string;
  usage: ResponseBodyUsage$Outbound;
};

/** @internal */
export const ResponseBody1$outboundSchema: z.ZodType<
  ResponseBody1$Outbound,
  z.ZodTypeDef,
  ResponseBody1
> = z.object({
  id: z.string(),
  choices: z.array(z.lazy(() => ResponseBodyChoices$outboundSchema)),
  created: z.number(),
  model: z.string(),
  systemFingerprint: z.string(),
  object: z.string(),
  usage: z.lazy(() => ResponseBodyUsage$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody1$ {
  /** @deprecated use `ResponseBody1$inboundSchema` instead. */
  export const inboundSchema = ResponseBody1$inboundSchema;
  /** @deprecated use `ResponseBody1$outboundSchema` instead. */
  export const outboundSchema = ResponseBody1$outboundSchema;
  /** @deprecated use `ResponseBody1$Outbound` instead. */
  export type Outbound = ResponseBody1$Outbound;
}

/** @internal */
export const RouterChatCompletionsResponseBody$inboundSchema: z.ZodType<
  RouterChatCompletionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ResponseBody1$inboundSchema),
  z.lazy(() => ResponseBody2$inboundSchema),
]);

/** @internal */
export type RouterChatCompletionsResponseBody$Outbound =
  | ResponseBody1$Outbound
  | ResponseBody2$Outbound;

/** @internal */
export const RouterChatCompletionsResponseBody$outboundSchema: z.ZodType<
  RouterChatCompletionsResponseBody$Outbound,
  z.ZodTypeDef,
  RouterChatCompletionsResponseBody
> = z.union([
  z.lazy(() => ResponseBody1$outboundSchema),
  z.lazy(() => ResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsResponseBody$ {
  /** @deprecated use `RouterChatCompletionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = RouterChatCompletionsResponseBody$inboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RouterChatCompletionsResponseBody$outboundSchema;
  /** @deprecated use `RouterChatCompletionsResponseBody$Outbound` instead. */
  export type Outbound = RouterChatCompletionsResponseBody$Outbound;
}

/** @internal */
export const RouterChatCompletionsResponse$inboundSchema: z.ZodType<
  RouterChatCompletionsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.lazy(() => ResponseBody1$inboundSchema),
    z.lazy(() => ResponseBody2$inboundSchema),
  ]),
  z.instanceof(ReadableStream<Uint8Array>).transform(stream => {
    return new EventStream({
      stream,
      decoder(rawEvent) {
        const schema = z.lazy(() =>
          RouterChatCompletionsRouterChatCompletionsResponseBody$inboundSchema
        );
        return schema.parse(rawEvent);
      },
    });
  }),
]);

/** @internal */
export type RouterChatCompletionsResponse$Outbound =
  | ResponseBody1$Outbound
  | ResponseBody2$Outbound
  | never;

/** @internal */
export const RouterChatCompletionsResponse$outboundSchema: z.ZodType<
  RouterChatCompletionsResponse$Outbound,
  z.ZodTypeDef,
  RouterChatCompletionsResponse
> = z.union([
  z.union([
    z.lazy(() => ResponseBody1$outboundSchema),
    z.lazy(() => ResponseBody2$outboundSchema),
  ]),
  z.never(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterChatCompletionsResponse$ {
  /** @deprecated use `RouterChatCompletionsResponse$inboundSchema` instead. */
  export const inboundSchema = RouterChatCompletionsResponse$inboundSchema;
  /** @deprecated use `RouterChatCompletionsResponse$outboundSchema` instead. */
  export const outboundSchema = RouterChatCompletionsResponse$outboundSchema;
  /** @deprecated use `RouterChatCompletionsResponse$Outbound` instead. */
  export type Outbound = RouterChatCompletionsResponse$Outbound;
}
