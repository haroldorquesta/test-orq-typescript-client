/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export type DeploymentListRequest = {
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10
   */
  limit?: number | undefined;
  /**
   * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `ed33dade-ae32-4959-8c5c-7ae4aad748b5`, your subsequent call can include `after=ed33dade-ae32-4959-8c5c-7ae4aad748b5` in order to fetch the next page of the list.
   */
  after?: string | undefined;
};

export const DeploymentListObject = {
  List: "list",
} as const;
export type DeploymentListObject = ClosedEnum<typeof DeploymentListObject>;

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const DeploymentListType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type DeploymentListType = ClosedEnum<typeof DeploymentListType>;

export const DeploymentListDeploymentsResponseType = {
  Object: "object",
} as const;
export type DeploymentListDeploymentsResponseType = ClosedEnum<
  typeof DeploymentListDeploymentsResponseType
>;

/**
 * The parameters the functions accepts, described as a JSON Schema object.
 *
 * @remarks
 *
 *  Omitting `parameters` defines a function with an empty parameter list.
 */
export type DeploymentListParameters = {
  type: DeploymentListDeploymentsResponseType;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

export type DeploymentListFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object.
   *
   * @remarks
   *
   *  Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters: DeploymentListParameters;
};

export type DeploymentListTools = {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: DeploymentListType;
  function: DeploymentListFunction;
  id?: number | undefined;
};

/**
 * The type of the model
 */
export const ModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type ModelType = ClosedEnum<typeof ModelType>;

/**
 * Only supported on `image` models.
 */
export const DeploymentListFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type DeploymentListFormat = ClosedEnum<typeof DeploymentListFormat>;

/**
 * Only supported on `image` models.
 */
export const DeploymentListQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type DeploymentListQuality = ClosedEnum<typeof DeploymentListQuality>;

export const DeploymentListResponseFormatDeploymentsType = {
  JsonObject: "json_object",
} as const;
export type DeploymentListResponseFormatDeploymentsType = ClosedEnum<
  typeof DeploymentListResponseFormatDeploymentsType
>;

export type DeploymentListResponseFormat2 = {
  type: DeploymentListResponseFormatDeploymentsType;
};

export const DeploymentListResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type DeploymentListResponseFormatType = ClosedEnum<
  typeof DeploymentListResponseFormatType
>;

export type ResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type DeploymentListResponseFormat1 = {
  type: DeploymentListResponseFormatType;
  jsonSchema: ResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type DeploymentListResponseFormat =
  | DeploymentListResponseFormat2
  | DeploymentListResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const DeploymentListPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type DeploymentListPhotoRealVersion = ClosedEnum<
  typeof DeploymentListPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const DeploymentListEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type DeploymentListEncodingFormat = ClosedEnum<
  typeof DeploymentListEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type ModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: DeploymentListFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: DeploymentListQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | DeploymentListResponseFormat2
    | DeploymentListResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: DeploymentListPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: DeploymentListEncodingFormat | undefined;
};

export const DeploymentListProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type DeploymentListProvider = ClosedEnum<typeof DeploymentListProvider>;

/**
 * The role of the prompt message
 */
export const DeploymentListRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentListRole = ClosedEnum<typeof DeploymentListRole>;

export const DeploymentList2DeploymentsType = {
  ImageUrl: "image_url",
} as const;
export type DeploymentList2DeploymentsType = ClosedEnum<
  typeof DeploymentList2DeploymentsType
>;

export type DeploymentList2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type DeploymentList22 = {
  type: DeploymentList2DeploymentsType;
  imageUrl: DeploymentList2ImageUrl;
};

export const DeploymentList2Type = {
  Text: "text",
} as const;
export type DeploymentList2Type = ClosedEnum<typeof DeploymentList2Type>;

/**
 * Text content part of a prompt message
 */
export type DeploymentList21 = {
  type: DeploymentList2Type;
  text: string;
};

export type DeploymentListContent2 = DeploymentList21 | DeploymentList22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type DeploymentListContent =
  | string
  | Array<DeploymentList21 | DeploymentList22>;

export const DeploymentListDeploymentsType = {
  Function: "function",
} as const;
export type DeploymentListDeploymentsType = ClosedEnum<
  typeof DeploymentListDeploymentsType
>;

export type DeploymentListDeploymentsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type DeploymentListToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: DeploymentListDeploymentsType;
  function: DeploymentListDeploymentsFunction;
};

export type DeploymentListMessages = {
  /**
   * The role of the prompt message
   */
  role: DeploymentListRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<DeploymentList21 | DeploymentList22>;
  toolCalls?: Array<DeploymentListToolCalls> | undefined;
};

export type PromptConfig = {
  tools: Array<DeploymentListTools>;
  model: string;
  /**
   * The type of the model
   */
  modelType: ModelType;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters: ModelParameters;
  provider: DeploymentListProvider;
  messages: Array<DeploymentListMessages>;
};

export type DeploymentListData = {
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Date in ISO 8601 format at which the object was created.
   */
  created: string;
  /**
   * Date in ISO 8601 format at which the object was last updated.
   */
  updated: string;
  /**
   * The deployment unique key
   */
  key: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description: string;
  promptConfig: PromptConfig;
  /**
   * THe version of the deployment
   */
  version: string;
};

/**
 * List of deployments
 */
export type DeploymentListResponseBody = {
  object: DeploymentListObject;
  data: Array<DeploymentListData>;
  hasMore: boolean;
};

/** @internal */
export const DeploymentListRequest$inboundSchema: z.ZodType<
  DeploymentListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().default(10),
  after: z.string().optional(),
});

/** @internal */
export type DeploymentListRequest$Outbound = {
  limit: number;
  after?: string | undefined;
};

/** @internal */
export const DeploymentListRequest$outboundSchema: z.ZodType<
  DeploymentListRequest$Outbound,
  z.ZodTypeDef,
  DeploymentListRequest
> = z.object({
  limit: z.number().default(10),
  after: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListRequest$ {
  /** @deprecated use `DeploymentListRequest$inboundSchema` instead. */
  export const inboundSchema = DeploymentListRequest$inboundSchema;
  /** @deprecated use `DeploymentListRequest$outboundSchema` instead. */
  export const outboundSchema = DeploymentListRequest$outboundSchema;
  /** @deprecated use `DeploymentListRequest$Outbound` instead. */
  export type Outbound = DeploymentListRequest$Outbound;
}

/** @internal */
export const DeploymentListObject$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentListObject
> = z.nativeEnum(DeploymentListObject);

/** @internal */
export const DeploymentListObject$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentListObject
> = DeploymentListObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListObject$ {
  /** @deprecated use `DeploymentListObject$inboundSchema` instead. */
  export const inboundSchema = DeploymentListObject$inboundSchema;
  /** @deprecated use `DeploymentListObject$outboundSchema` instead. */
  export const outboundSchema = DeploymentListObject$outboundSchema;
}

/** @internal */
export const DeploymentListType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentListType
> = z.nativeEnum(DeploymentListType);

/** @internal */
export const DeploymentListType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentListType
> = DeploymentListType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListType$ {
  /** @deprecated use `DeploymentListType$inboundSchema` instead. */
  export const inboundSchema = DeploymentListType$inboundSchema;
  /** @deprecated use `DeploymentListType$outboundSchema` instead. */
  export const outboundSchema = DeploymentListType$outboundSchema;
}

/** @internal */
export const DeploymentListDeploymentsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentListDeploymentsResponseType> = z.nativeEnum(
    DeploymentListDeploymentsResponseType,
  );

/** @internal */
export const DeploymentListDeploymentsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentListDeploymentsResponseType> =
    DeploymentListDeploymentsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListDeploymentsResponseType$ {
  /** @deprecated use `DeploymentListDeploymentsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentListDeploymentsResponseType$inboundSchema;
  /** @deprecated use `DeploymentListDeploymentsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentListDeploymentsResponseType$outboundSchema;
}

/** @internal */
export const DeploymentListParameters$inboundSchema: z.ZodType<
  DeploymentListParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentListDeploymentsResponseType$inboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/** @internal */
export type DeploymentListParameters$Outbound = {
  type: string;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

/** @internal */
export const DeploymentListParameters$outboundSchema: z.ZodType<
  DeploymentListParameters$Outbound,
  z.ZodTypeDef,
  DeploymentListParameters
> = z.object({
  type: DeploymentListDeploymentsResponseType$outboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListParameters$ {
  /** @deprecated use `DeploymentListParameters$inboundSchema` instead. */
  export const inboundSchema = DeploymentListParameters$inboundSchema;
  /** @deprecated use `DeploymentListParameters$outboundSchema` instead. */
  export const outboundSchema = DeploymentListParameters$outboundSchema;
  /** @deprecated use `DeploymentListParameters$Outbound` instead. */
  export type Outbound = DeploymentListParameters$Outbound;
}

/** @internal */
export const DeploymentListFunction$inboundSchema: z.ZodType<
  DeploymentListFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => DeploymentListParameters$inboundSchema),
});

/** @internal */
export type DeploymentListFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters: DeploymentListParameters$Outbound;
};

/** @internal */
export const DeploymentListFunction$outboundSchema: z.ZodType<
  DeploymentListFunction$Outbound,
  z.ZodTypeDef,
  DeploymentListFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => DeploymentListParameters$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListFunction$ {
  /** @deprecated use `DeploymentListFunction$inboundSchema` instead. */
  export const inboundSchema = DeploymentListFunction$inboundSchema;
  /** @deprecated use `DeploymentListFunction$outboundSchema` instead. */
  export const outboundSchema = DeploymentListFunction$outboundSchema;
  /** @deprecated use `DeploymentListFunction$Outbound` instead. */
  export type Outbound = DeploymentListFunction$Outbound;
}

/** @internal */
export const DeploymentListTools$inboundSchema: z.ZodType<
  DeploymentListTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentListType$inboundSchema,
  function: z.lazy(() => DeploymentListFunction$inboundSchema),
  id: z.number().optional(),
});

/** @internal */
export type DeploymentListTools$Outbound = {
  type: string;
  function: DeploymentListFunction$Outbound;
  id?: number | undefined;
};

/** @internal */
export const DeploymentListTools$outboundSchema: z.ZodType<
  DeploymentListTools$Outbound,
  z.ZodTypeDef,
  DeploymentListTools
> = z.object({
  type: DeploymentListType$outboundSchema,
  function: z.lazy(() => DeploymentListFunction$outboundSchema),
  id: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListTools$ {
  /** @deprecated use `DeploymentListTools$inboundSchema` instead. */
  export const inboundSchema = DeploymentListTools$inboundSchema;
  /** @deprecated use `DeploymentListTools$outboundSchema` instead. */
  export const outboundSchema = DeploymentListTools$outboundSchema;
  /** @deprecated use `DeploymentListTools$Outbound` instead. */
  export type Outbound = DeploymentListTools$Outbound;
}

/** @internal */
export const ModelType$inboundSchema: z.ZodNativeEnum<typeof ModelType> = z
  .nativeEnum(ModelType);

/** @internal */
export const ModelType$outboundSchema: z.ZodNativeEnum<typeof ModelType> =
  ModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelType$ {
  /** @deprecated use `ModelType$inboundSchema` instead. */
  export const inboundSchema = ModelType$inboundSchema;
  /** @deprecated use `ModelType$outboundSchema` instead. */
  export const outboundSchema = ModelType$outboundSchema;
}

/** @internal */
export const DeploymentListFormat$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentListFormat
> = z.nativeEnum(DeploymentListFormat);

/** @internal */
export const DeploymentListFormat$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentListFormat
> = DeploymentListFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListFormat$ {
  /** @deprecated use `DeploymentListFormat$inboundSchema` instead. */
  export const inboundSchema = DeploymentListFormat$inboundSchema;
  /** @deprecated use `DeploymentListFormat$outboundSchema` instead. */
  export const outboundSchema = DeploymentListFormat$outboundSchema;
}

/** @internal */
export const DeploymentListQuality$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentListQuality
> = z.nativeEnum(DeploymentListQuality);

/** @internal */
export const DeploymentListQuality$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentListQuality
> = DeploymentListQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListQuality$ {
  /** @deprecated use `DeploymentListQuality$inboundSchema` instead. */
  export const inboundSchema = DeploymentListQuality$inboundSchema;
  /** @deprecated use `DeploymentListQuality$outboundSchema` instead. */
  export const outboundSchema = DeploymentListQuality$outboundSchema;
}

/** @internal */
export const DeploymentListResponseFormatDeploymentsType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentListResponseFormatDeploymentsType> = z
    .nativeEnum(DeploymentListResponseFormatDeploymentsType);

/** @internal */
export const DeploymentListResponseFormatDeploymentsType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentListResponseFormatDeploymentsType> =
    DeploymentListResponseFormatDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListResponseFormatDeploymentsType$ {
  /** @deprecated use `DeploymentListResponseFormatDeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentListResponseFormatDeploymentsType$inboundSchema;
  /** @deprecated use `DeploymentListResponseFormatDeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentListResponseFormatDeploymentsType$outboundSchema;
}

/** @internal */
export const DeploymentListResponseFormat2$inboundSchema: z.ZodType<
  DeploymentListResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentListResponseFormatDeploymentsType$inboundSchema,
});

/** @internal */
export type DeploymentListResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const DeploymentListResponseFormat2$outboundSchema: z.ZodType<
  DeploymentListResponseFormat2$Outbound,
  z.ZodTypeDef,
  DeploymentListResponseFormat2
> = z.object({
  type: DeploymentListResponseFormatDeploymentsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListResponseFormat2$ {
  /** @deprecated use `DeploymentListResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = DeploymentListResponseFormat2$inboundSchema;
  /** @deprecated use `DeploymentListResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = DeploymentListResponseFormat2$outboundSchema;
  /** @deprecated use `DeploymentListResponseFormat2$Outbound` instead. */
  export type Outbound = DeploymentListResponseFormat2$Outbound;
}

/** @internal */
export const DeploymentListResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentListResponseFormatType
> = z.nativeEnum(DeploymentListResponseFormatType);

/** @internal */
export const DeploymentListResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentListResponseFormatType
> = DeploymentListResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListResponseFormatType$ {
  /** @deprecated use `DeploymentListResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = DeploymentListResponseFormatType$inboundSchema;
  /** @deprecated use `DeploymentListResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = DeploymentListResponseFormatType$outboundSchema;
}

/** @internal */
export const ResponseFormatJsonSchema$inboundSchema: z.ZodType<
  ResponseFormatJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type ResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const ResponseFormatJsonSchema$outboundSchema: z.ZodType<
  ResponseFormatJsonSchema$Outbound,
  z.ZodTypeDef,
  ResponseFormatJsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatJsonSchema$ {
  /** @deprecated use `ResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `ResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `ResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = ResponseFormatJsonSchema$Outbound;
}

/** @internal */
export const DeploymentListResponseFormat1$inboundSchema: z.ZodType<
  DeploymentListResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentListResponseFormatType$inboundSchema,
  json_schema: z.lazy(() => ResponseFormatJsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type DeploymentListResponseFormat1$Outbound = {
  type: string;
  json_schema: ResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const DeploymentListResponseFormat1$outboundSchema: z.ZodType<
  DeploymentListResponseFormat1$Outbound,
  z.ZodTypeDef,
  DeploymentListResponseFormat1
> = z.object({
  type: DeploymentListResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() => ResponseFormatJsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListResponseFormat1$ {
  /** @deprecated use `DeploymentListResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = DeploymentListResponseFormat1$inboundSchema;
  /** @deprecated use `DeploymentListResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = DeploymentListResponseFormat1$outboundSchema;
  /** @deprecated use `DeploymentListResponseFormat1$Outbound` instead. */
  export type Outbound = DeploymentListResponseFormat1$Outbound;
}

/** @internal */
export const DeploymentListResponseFormat$inboundSchema: z.ZodType<
  DeploymentListResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentListResponseFormat2$inboundSchema),
  z.lazy(() => DeploymentListResponseFormat1$inboundSchema),
]);

/** @internal */
export type DeploymentListResponseFormat$Outbound =
  | DeploymentListResponseFormat2$Outbound
  | DeploymentListResponseFormat1$Outbound;

/** @internal */
export const DeploymentListResponseFormat$outboundSchema: z.ZodType<
  DeploymentListResponseFormat$Outbound,
  z.ZodTypeDef,
  DeploymentListResponseFormat
> = z.union([
  z.lazy(() => DeploymentListResponseFormat2$outboundSchema),
  z.lazy(() => DeploymentListResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListResponseFormat$ {
  /** @deprecated use `DeploymentListResponseFormat$inboundSchema` instead. */
  export const inboundSchema = DeploymentListResponseFormat$inboundSchema;
  /** @deprecated use `DeploymentListResponseFormat$outboundSchema` instead. */
  export const outboundSchema = DeploymentListResponseFormat$outboundSchema;
  /** @deprecated use `DeploymentListResponseFormat$Outbound` instead. */
  export type Outbound = DeploymentListResponseFormat$Outbound;
}

/** @internal */
export const DeploymentListPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentListPhotoRealVersion
> = z.nativeEnum(DeploymentListPhotoRealVersion);

/** @internal */
export const DeploymentListPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentListPhotoRealVersion
> = DeploymentListPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListPhotoRealVersion$ {
  /** @deprecated use `DeploymentListPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = DeploymentListPhotoRealVersion$inboundSchema;
  /** @deprecated use `DeploymentListPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = DeploymentListPhotoRealVersion$outboundSchema;
}

/** @internal */
export const DeploymentListEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentListEncodingFormat
> = z.nativeEnum(DeploymentListEncodingFormat);

/** @internal */
export const DeploymentListEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentListEncodingFormat
> = DeploymentListEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListEncodingFormat$ {
  /** @deprecated use `DeploymentListEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = DeploymentListEncodingFormat$inboundSchema;
  /** @deprecated use `DeploymentListEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = DeploymentListEncodingFormat$outboundSchema;
}

/** @internal */
export const ModelParameters$inboundSchema: z.ZodType<
  ModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: DeploymentListFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: DeploymentListQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => DeploymentListResponseFormat2$inboundSchema),
      z.lazy(() => DeploymentListResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: DeploymentListPhotoRealVersion$inboundSchema.optional(),
  encoding_format: DeploymentListEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type ModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | DeploymentListResponseFormat2$Outbound
    | DeploymentListResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const ModelParameters$outboundSchema: z.ZodType<
  ModelParameters$Outbound,
  z.ZodTypeDef,
  ModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: DeploymentListFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: DeploymentListQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => DeploymentListResponseFormat2$outboundSchema),
      z.lazy(() => DeploymentListResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: DeploymentListPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: DeploymentListEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelParameters$ {
  /** @deprecated use `ModelParameters$inboundSchema` instead. */
  export const inboundSchema = ModelParameters$inboundSchema;
  /** @deprecated use `ModelParameters$outboundSchema` instead. */
  export const outboundSchema = ModelParameters$outboundSchema;
  /** @deprecated use `ModelParameters$Outbound` instead. */
  export type Outbound = ModelParameters$Outbound;
}

/** @internal */
export const DeploymentListProvider$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentListProvider
> = z.nativeEnum(DeploymentListProvider);

/** @internal */
export const DeploymentListProvider$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentListProvider
> = DeploymentListProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListProvider$ {
  /** @deprecated use `DeploymentListProvider$inboundSchema` instead. */
  export const inboundSchema = DeploymentListProvider$inboundSchema;
  /** @deprecated use `DeploymentListProvider$outboundSchema` instead. */
  export const outboundSchema = DeploymentListProvider$outboundSchema;
}

/** @internal */
export const DeploymentListRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentListRole
> = z.nativeEnum(DeploymentListRole);

/** @internal */
export const DeploymentListRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentListRole
> = DeploymentListRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListRole$ {
  /** @deprecated use `DeploymentListRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentListRole$inboundSchema;
  /** @deprecated use `DeploymentListRole$outboundSchema` instead. */
  export const outboundSchema = DeploymentListRole$outboundSchema;
}

/** @internal */
export const DeploymentList2DeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentList2DeploymentsType
> = z.nativeEnum(DeploymentList2DeploymentsType);

/** @internal */
export const DeploymentList2DeploymentsType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentList2DeploymentsType
> = DeploymentList2DeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentList2DeploymentsType$ {
  /** @deprecated use `DeploymentList2DeploymentsType$inboundSchema` instead. */
  export const inboundSchema = DeploymentList2DeploymentsType$inboundSchema;
  /** @deprecated use `DeploymentList2DeploymentsType$outboundSchema` instead. */
  export const outboundSchema = DeploymentList2DeploymentsType$outboundSchema;
}

/** @internal */
export const DeploymentList2ImageUrl$inboundSchema: z.ZodType<
  DeploymentList2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type DeploymentList2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const DeploymentList2ImageUrl$outboundSchema: z.ZodType<
  DeploymentList2ImageUrl$Outbound,
  z.ZodTypeDef,
  DeploymentList2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentList2ImageUrl$ {
  /** @deprecated use `DeploymentList2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = DeploymentList2ImageUrl$inboundSchema;
  /** @deprecated use `DeploymentList2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = DeploymentList2ImageUrl$outboundSchema;
  /** @deprecated use `DeploymentList2ImageUrl$Outbound` instead. */
  export type Outbound = DeploymentList2ImageUrl$Outbound;
}

/** @internal */
export const DeploymentList22$inboundSchema: z.ZodType<
  DeploymentList22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentList2DeploymentsType$inboundSchema,
  image_url: z.lazy(() => DeploymentList2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type DeploymentList22$Outbound = {
  type: string;
  image_url: DeploymentList2ImageUrl$Outbound;
};

/** @internal */
export const DeploymentList22$outboundSchema: z.ZodType<
  DeploymentList22$Outbound,
  z.ZodTypeDef,
  DeploymentList22
> = z.object({
  type: DeploymentList2DeploymentsType$outboundSchema,
  imageUrl: z.lazy(() => DeploymentList2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentList22$ {
  /** @deprecated use `DeploymentList22$inboundSchema` instead. */
  export const inboundSchema = DeploymentList22$inboundSchema;
  /** @deprecated use `DeploymentList22$outboundSchema` instead. */
  export const outboundSchema = DeploymentList22$outboundSchema;
  /** @deprecated use `DeploymentList22$Outbound` instead. */
  export type Outbound = DeploymentList22$Outbound;
}

/** @internal */
export const DeploymentList2Type$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentList2Type
> = z.nativeEnum(DeploymentList2Type);

/** @internal */
export const DeploymentList2Type$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentList2Type
> = DeploymentList2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentList2Type$ {
  /** @deprecated use `DeploymentList2Type$inboundSchema` instead. */
  export const inboundSchema = DeploymentList2Type$inboundSchema;
  /** @deprecated use `DeploymentList2Type$outboundSchema` instead. */
  export const outboundSchema = DeploymentList2Type$outboundSchema;
}

/** @internal */
export const DeploymentList21$inboundSchema: z.ZodType<
  DeploymentList21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentList2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type DeploymentList21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const DeploymentList21$outboundSchema: z.ZodType<
  DeploymentList21$Outbound,
  z.ZodTypeDef,
  DeploymentList21
> = z.object({
  type: DeploymentList2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentList21$ {
  /** @deprecated use `DeploymentList21$inboundSchema` instead. */
  export const inboundSchema = DeploymentList21$inboundSchema;
  /** @deprecated use `DeploymentList21$outboundSchema` instead. */
  export const outboundSchema = DeploymentList21$outboundSchema;
  /** @deprecated use `DeploymentList21$Outbound` instead. */
  export type Outbound = DeploymentList21$Outbound;
}

/** @internal */
export const DeploymentListContent2$inboundSchema: z.ZodType<
  DeploymentListContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentList21$inboundSchema),
  z.lazy(() => DeploymentList22$inboundSchema),
]);

/** @internal */
export type DeploymentListContent2$Outbound =
  | DeploymentList21$Outbound
  | DeploymentList22$Outbound;

/** @internal */
export const DeploymentListContent2$outboundSchema: z.ZodType<
  DeploymentListContent2$Outbound,
  z.ZodTypeDef,
  DeploymentListContent2
> = z.union([
  z.lazy(() => DeploymentList21$outboundSchema),
  z.lazy(() => DeploymentList22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListContent2$ {
  /** @deprecated use `DeploymentListContent2$inboundSchema` instead. */
  export const inboundSchema = DeploymentListContent2$inboundSchema;
  /** @deprecated use `DeploymentListContent2$outboundSchema` instead. */
  export const outboundSchema = DeploymentListContent2$outboundSchema;
  /** @deprecated use `DeploymentListContent2$Outbound` instead. */
  export type Outbound = DeploymentListContent2$Outbound;
}

/** @internal */
export const DeploymentListContent$inboundSchema: z.ZodType<
  DeploymentListContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentList21$inboundSchema),
    z.lazy(() => DeploymentList22$inboundSchema),
  ])),
]);

/** @internal */
export type DeploymentListContent$Outbound =
  | string
  | Array<DeploymentList21$Outbound | DeploymentList22$Outbound>;

/** @internal */
export const DeploymentListContent$outboundSchema: z.ZodType<
  DeploymentListContent$Outbound,
  z.ZodTypeDef,
  DeploymentListContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentList21$outboundSchema),
    z.lazy(() => DeploymentList22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListContent$ {
  /** @deprecated use `DeploymentListContent$inboundSchema` instead. */
  export const inboundSchema = DeploymentListContent$inboundSchema;
  /** @deprecated use `DeploymentListContent$outboundSchema` instead. */
  export const outboundSchema = DeploymentListContent$outboundSchema;
  /** @deprecated use `DeploymentListContent$Outbound` instead. */
  export type Outbound = DeploymentListContent$Outbound;
}

/** @internal */
export const DeploymentListDeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentListDeploymentsType
> = z.nativeEnum(DeploymentListDeploymentsType);

/** @internal */
export const DeploymentListDeploymentsType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentListDeploymentsType
> = DeploymentListDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListDeploymentsType$ {
  /** @deprecated use `DeploymentListDeploymentsType$inboundSchema` instead. */
  export const inboundSchema = DeploymentListDeploymentsType$inboundSchema;
  /** @deprecated use `DeploymentListDeploymentsType$outboundSchema` instead. */
  export const outboundSchema = DeploymentListDeploymentsType$outboundSchema;
}

/** @internal */
export const DeploymentListDeploymentsFunction$inboundSchema: z.ZodType<
  DeploymentListDeploymentsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type DeploymentListDeploymentsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const DeploymentListDeploymentsFunction$outboundSchema: z.ZodType<
  DeploymentListDeploymentsFunction$Outbound,
  z.ZodTypeDef,
  DeploymentListDeploymentsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListDeploymentsFunction$ {
  /** @deprecated use `DeploymentListDeploymentsFunction$inboundSchema` instead. */
  export const inboundSchema = DeploymentListDeploymentsFunction$inboundSchema;
  /** @deprecated use `DeploymentListDeploymentsFunction$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentListDeploymentsFunction$outboundSchema;
  /** @deprecated use `DeploymentListDeploymentsFunction$Outbound` instead. */
  export type Outbound = DeploymentListDeploymentsFunction$Outbound;
}

/** @internal */
export const DeploymentListToolCalls$inboundSchema: z.ZodType<
  DeploymentListToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentListDeploymentsType$inboundSchema,
  function: z.lazy(() => DeploymentListDeploymentsFunction$inboundSchema),
});

/** @internal */
export type DeploymentListToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: DeploymentListDeploymentsFunction$Outbound;
};

/** @internal */
export const DeploymentListToolCalls$outboundSchema: z.ZodType<
  DeploymentListToolCalls$Outbound,
  z.ZodTypeDef,
  DeploymentListToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentListDeploymentsType$outboundSchema,
  function: z.lazy(() => DeploymentListDeploymentsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListToolCalls$ {
  /** @deprecated use `DeploymentListToolCalls$inboundSchema` instead. */
  export const inboundSchema = DeploymentListToolCalls$inboundSchema;
  /** @deprecated use `DeploymentListToolCalls$outboundSchema` instead. */
  export const outboundSchema = DeploymentListToolCalls$outboundSchema;
  /** @deprecated use `DeploymentListToolCalls$Outbound` instead. */
  export type Outbound = DeploymentListToolCalls$Outbound;
}

/** @internal */
export const DeploymentListMessages$inboundSchema: z.ZodType<
  DeploymentListMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentListRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentList21$inboundSchema),
      z.lazy(() => DeploymentList22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => DeploymentListToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type DeploymentListMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<DeploymentList21$Outbound | DeploymentList22$Outbound>;
  tool_calls?: Array<DeploymentListToolCalls$Outbound> | undefined;
};

/** @internal */
export const DeploymentListMessages$outboundSchema: z.ZodType<
  DeploymentListMessages$Outbound,
  z.ZodTypeDef,
  DeploymentListMessages
> = z.object({
  role: DeploymentListRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentList21$outboundSchema),
      z.lazy(() => DeploymentList22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => DeploymentListToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListMessages$ {
  /** @deprecated use `DeploymentListMessages$inboundSchema` instead. */
  export const inboundSchema = DeploymentListMessages$inboundSchema;
  /** @deprecated use `DeploymentListMessages$outboundSchema` instead. */
  export const outboundSchema = DeploymentListMessages$outboundSchema;
  /** @deprecated use `DeploymentListMessages$Outbound` instead. */
  export type Outbound = DeploymentListMessages$Outbound;
}

/** @internal */
export const PromptConfig$inboundSchema: z.ZodType<
  PromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  tools: z.array(z.lazy(() => DeploymentListTools$inboundSchema)),
  model: z.string(),
  model_type: ModelType$inboundSchema,
  model_parameters: z.lazy(() => ModelParameters$inboundSchema),
  provider: DeploymentListProvider$inboundSchema,
  messages: z.array(z.lazy(() => DeploymentListMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_type": "modelType",
    "model_parameters": "modelParameters",
  });
});

/** @internal */
export type PromptConfig$Outbound = {
  tools: Array<DeploymentListTools$Outbound>;
  model: string;
  model_type: string;
  model_parameters: ModelParameters$Outbound;
  provider: string;
  messages: Array<DeploymentListMessages$Outbound>;
};

/** @internal */
export const PromptConfig$outboundSchema: z.ZodType<
  PromptConfig$Outbound,
  z.ZodTypeDef,
  PromptConfig
> = z.object({
  tools: z.array(z.lazy(() => DeploymentListTools$outboundSchema)),
  model: z.string(),
  modelType: ModelType$outboundSchema,
  modelParameters: z.lazy(() => ModelParameters$outboundSchema),
  provider: DeploymentListProvider$outboundSchema,
  messages: z.array(z.lazy(() => DeploymentListMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelType: "model_type",
    modelParameters: "model_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptConfig$ {
  /** @deprecated use `PromptConfig$inboundSchema` instead. */
  export const inboundSchema = PromptConfig$inboundSchema;
  /** @deprecated use `PromptConfig$outboundSchema` instead. */
  export const outboundSchema = PromptConfig$outboundSchema;
  /** @deprecated use `PromptConfig$Outbound` instead. */
  export type Outbound = PromptConfig$Outbound;
}

/** @internal */
export const DeploymentListData$inboundSchema: z.ZodType<
  DeploymentListData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created: z.string(),
  updated: z.string(),
  key: z.string(),
  description: z.string(),
  prompt_config: z.lazy(() => PromptConfig$inboundSchema),
  version: z.string(),
}).transform((v) => {
  return remap$(v, {
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type DeploymentListData$Outbound = {
  id: string;
  created: string;
  updated: string;
  key: string;
  description: string;
  prompt_config: PromptConfig$Outbound;
  version: string;
};

/** @internal */
export const DeploymentListData$outboundSchema: z.ZodType<
  DeploymentListData$Outbound,
  z.ZodTypeDef,
  DeploymentListData
> = z.object({
  id: z.string(),
  created: z.string(),
  updated: z.string(),
  key: z.string(),
  description: z.string(),
  promptConfig: z.lazy(() => PromptConfig$outboundSchema),
  version: z.string(),
}).transform((v) => {
  return remap$(v, {
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListData$ {
  /** @deprecated use `DeploymentListData$inboundSchema` instead. */
  export const inboundSchema = DeploymentListData$inboundSchema;
  /** @deprecated use `DeploymentListData$outboundSchema` instead. */
  export const outboundSchema = DeploymentListData$outboundSchema;
  /** @deprecated use `DeploymentListData$Outbound` instead. */
  export type Outbound = DeploymentListData$Outbound;
}

/** @internal */
export const DeploymentListResponseBody$inboundSchema: z.ZodType<
  DeploymentListResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: DeploymentListObject$inboundSchema,
  data: z.array(z.lazy(() => DeploymentListData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type DeploymentListResponseBody$Outbound = {
  object: string;
  data: Array<DeploymentListData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const DeploymentListResponseBody$outboundSchema: z.ZodType<
  DeploymentListResponseBody$Outbound,
  z.ZodTypeDef,
  DeploymentListResponseBody
> = z.object({
  object: DeploymentListObject$outboundSchema,
  data: z.array(z.lazy(() => DeploymentListData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentListResponseBody$ {
  /** @deprecated use `DeploymentListResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentListResponseBody$inboundSchema;
  /** @deprecated use `DeploymentListResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeploymentListResponseBody$outboundSchema;
  /** @deprecated use `DeploymentListResponseBody$Outbound` instead. */
  export type Outbound = DeploymentListResponseBody$Outbound;
}
