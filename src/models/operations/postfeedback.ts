/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * The feedback value. For single selection of multiple choice, the value should be an array of strings. For `correction`, the value should be a string.
 */
export type Value = string | Array<string>;

/**
 * Feedback submission payload
 */
export type PostFeedbackRequestBody = {
  /**
   * A string describing the specific property or aspect rated.
   */
  property: string;
  /**
   * The feedback value. For single selection of multiple choice, the value should be an array of strings. For `correction`, the value should be a string.
   */
  value: string | Array<string>;
  /**
   * The id returned by the [`get_config`]() or [`invoke`](https://docs.orq.ai/reference/post_deployments-invoke-1) endpoints
   */
  traceId: string;
};

/**
 * The feedback value. For single selection of multiple choice, the value should be an array of strings. For `correction`, the value should be a string.
 */
export type PostFeedbackValue = string | Array<string>;

/**
 * Successful operation
 */
export type PostFeedbackResponseBody = {
  /**
   * A string describing the specific property or aspect rated.
   */
  property: string;
  /**
   * The feedback value. For single selection of multiple choice, the value should be an array of strings. For `correction`, the value should be a string.
   */
  value: string | Array<string>;
  /**
   * The id returned by the [`get_config`]() or [`invoke`](https://docs.orq.ai/reference/post_deployments-invoke-1) endpoints
   */
  traceId: string;
  id: string;
};

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.array(z.string())]);

/** @internal */
export type Value$Outbound = string | Array<string>;

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

/** @internal */
export const PostFeedbackRequestBody$inboundSchema: z.ZodType<
  PostFeedbackRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  property: z.string(),
  value: z.union([z.string(), z.array(z.string())]),
  trace_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "trace_id": "traceId",
  });
});

/** @internal */
export type PostFeedbackRequestBody$Outbound = {
  property: string;
  value: string | Array<string>;
  trace_id: string;
};

/** @internal */
export const PostFeedbackRequestBody$outboundSchema: z.ZodType<
  PostFeedbackRequestBody$Outbound,
  z.ZodTypeDef,
  PostFeedbackRequestBody
> = z.object({
  property: z.string(),
  value: z.union([z.string(), z.array(z.string())]),
  traceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    traceId: "trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostFeedbackRequestBody$ {
  /** @deprecated use `PostFeedbackRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostFeedbackRequestBody$inboundSchema;
  /** @deprecated use `PostFeedbackRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostFeedbackRequestBody$outboundSchema;
  /** @deprecated use `PostFeedbackRequestBody$Outbound` instead. */
  export type Outbound = PostFeedbackRequestBody$Outbound;
}

/** @internal */
export const PostFeedbackValue$inboundSchema: z.ZodType<
  PostFeedbackValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type PostFeedbackValue$Outbound = string | Array<string>;

/** @internal */
export const PostFeedbackValue$outboundSchema: z.ZodType<
  PostFeedbackValue$Outbound,
  z.ZodTypeDef,
  PostFeedbackValue
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostFeedbackValue$ {
  /** @deprecated use `PostFeedbackValue$inboundSchema` instead. */
  export const inboundSchema = PostFeedbackValue$inboundSchema;
  /** @deprecated use `PostFeedbackValue$outboundSchema` instead. */
  export const outboundSchema = PostFeedbackValue$outboundSchema;
  /** @deprecated use `PostFeedbackValue$Outbound` instead. */
  export type Outbound = PostFeedbackValue$Outbound;
}

/** @internal */
export const PostFeedbackResponseBody$inboundSchema: z.ZodType<
  PostFeedbackResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  property: z.string(),
  value: z.union([z.string(), z.array(z.string())]),
  trace_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "trace_id": "traceId",
  });
});

/** @internal */
export type PostFeedbackResponseBody$Outbound = {
  property: string;
  value: string | Array<string>;
  trace_id: string;
  id: string;
};

/** @internal */
export const PostFeedbackResponseBody$outboundSchema: z.ZodType<
  PostFeedbackResponseBody$Outbound,
  z.ZodTypeDef,
  PostFeedbackResponseBody
> = z.object({
  property: z.string(),
  value: z.union([z.string(), z.array(z.string())]),
  traceId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    traceId: "trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostFeedbackResponseBody$ {
  /** @deprecated use `PostFeedbackResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostFeedbackResponseBody$inboundSchema;
  /** @deprecated use `PostFeedbackResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostFeedbackResponseBody$outboundSchema;
  /** @deprecated use `PostFeedbackResponseBody$Outbound` instead. */
  export type Outbound = PostFeedbackResponseBody$Outbound;
}
