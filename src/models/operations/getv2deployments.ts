/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export type GetV2DeploymentsRequest = {
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10
   */
  limit?: number | undefined;
  /**
   * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `ed33dade-ae32-4959-8c5c-7ae4aad748b5`, your subsequent call can include `after=ed33dade-ae32-4959-8c5c-7ae4aad748b5` in order to fetch the next page of the list.
   */
  after?: string | undefined;
};

export const GetV2DeploymentsObject = {
  List: "list",
} as const;
export type GetV2DeploymentsObject = ClosedEnum<typeof GetV2DeploymentsObject>;

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const GetV2DeploymentsType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type GetV2DeploymentsType = ClosedEnum<typeof GetV2DeploymentsType>;

export const GetV2DeploymentsDeploymentsPublicType = {
  Object: "object",
} as const;
export type GetV2DeploymentsDeploymentsPublicType = ClosedEnum<
  typeof GetV2DeploymentsDeploymentsPublicType
>;

/**
 * The parameters the functions accepts, described as a JSON Schema object.
 *
 * @remarks
 *
 *  Omitting `parameters` defines a function with an empty parameter list.
 */
export type GetV2DeploymentsParameters = {
  type: GetV2DeploymentsDeploymentsPublicType;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

export type GetV2DeploymentsFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object.
   *
   * @remarks
   *
   *  Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters: GetV2DeploymentsParameters;
};

export type GetV2DeploymentsTools = {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: GetV2DeploymentsType;
  function: GetV2DeploymentsFunction;
  id?: number | undefined;
};

/**
 * The type of the model
 */
export const ModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type ModelType = ClosedEnum<typeof ModelType>;

/**
 * Only supported on `image` models.
 */
export const GetV2DeploymentsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2DeploymentsFormat = ClosedEnum<typeof GetV2DeploymentsFormat>;

/**
 * Only supported on `image` models.
 */
export const GetV2DeploymentsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2DeploymentsQuality = ClosedEnum<
  typeof GetV2DeploymentsQuality
>;

export const GetV2DeploymentsResponseFormatDeploymentsType = {
  JsonObject: "json_object",
} as const;
export type GetV2DeploymentsResponseFormatDeploymentsType = ClosedEnum<
  typeof GetV2DeploymentsResponseFormatDeploymentsType
>;

export type GetV2DeploymentsResponseFormat2 = {
  type: GetV2DeploymentsResponseFormatDeploymentsType;
};

export const GetV2DeploymentsResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type GetV2DeploymentsResponseFormatType = ClosedEnum<
  typeof GetV2DeploymentsResponseFormatType
>;

export type ResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetV2DeploymentsResponseFormat1 = {
  type: GetV2DeploymentsResponseFormatType;
  jsonSchema: ResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetV2DeploymentsResponseFormat =
  | GetV2DeploymentsResponseFormat2
  | GetV2DeploymentsResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetV2DeploymentsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetV2DeploymentsPhotoRealVersion = ClosedEnum<
  typeof GetV2DeploymentsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetV2DeploymentsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetV2DeploymentsEncodingFormat = ClosedEnum<
  typeof GetV2DeploymentsEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type ModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetV2DeploymentsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetV2DeploymentsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetV2DeploymentsResponseFormat2
    | GetV2DeploymentsResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetV2DeploymentsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetV2DeploymentsEncodingFormat | undefined;
};

export const GetV2DeploymentsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetV2DeploymentsProvider = ClosedEnum<
  typeof GetV2DeploymentsProvider
>;

/**
 * The role of the prompt message
 */
export const GetV2DeploymentsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2DeploymentsRole = ClosedEnum<typeof GetV2DeploymentsRole>;

export const GetV2Deployments2DeploymentsType = {
  ImageUrl: "image_url",
} as const;
export type GetV2Deployments2DeploymentsType = ClosedEnum<
  typeof GetV2Deployments2DeploymentsType
>;

export type GetV2Deployments2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetV2Deployments22 = {
  type: GetV2Deployments2DeploymentsType;
  imageUrl: GetV2Deployments2ImageUrl;
};

export const GetV2Deployments2Type = {
  Text: "text",
} as const;
export type GetV2Deployments2Type = ClosedEnum<typeof GetV2Deployments2Type>;

/**
 * Text content part of a prompt message
 */
export type GetV2Deployments21 = {
  type: GetV2Deployments2Type;
  text: string;
};

export type GetV2DeploymentsContent2 = GetV2Deployments21 | GetV2Deployments22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetV2DeploymentsContent =
  | string
  | Array<GetV2Deployments21 | GetV2Deployments22>;

export const GetV2DeploymentsDeploymentsType = {
  Function: "function",
} as const;
export type GetV2DeploymentsDeploymentsType = ClosedEnum<
  typeof GetV2DeploymentsDeploymentsType
>;

export type GetV2DeploymentsDeploymentsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetV2DeploymentsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetV2DeploymentsDeploymentsType;
  function: GetV2DeploymentsDeploymentsFunction;
};

export type GetV2DeploymentsMessages = {
  /**
   * The role of the prompt message
   */
  role: GetV2DeploymentsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<GetV2Deployments21 | GetV2Deployments22>;
  toolCalls?: Array<GetV2DeploymentsToolCalls> | undefined;
};

export type PromptConfig = {
  tools: Array<GetV2DeploymentsTools>;
  model: string;
  /**
   * The type of the model
   */
  modelType: ModelType;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters: ModelParameters;
  provider: GetV2DeploymentsProvider;
  messages: Array<GetV2DeploymentsMessages>;
};

export type GetV2DeploymentsData = {
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Date in ISO 8601 format at which the object was created.
   */
  created: string;
  /**
   * Date in ISO 8601 format at which the object was last updated.
   */
  updated: string;
  /**
   * The deployment unique key
   */
  key: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description: string;
  promptConfig: PromptConfig;
  /**
   * THe version of the deployment
   */
  version: string;
};

/**
 * List of deployments
 */
export type GetV2DeploymentsResponseBody = {
  object: GetV2DeploymentsObject;
  data: Array<GetV2DeploymentsData>;
  hasMore: boolean;
};

/** @internal */
export const GetV2DeploymentsRequest$inboundSchema: z.ZodType<
  GetV2DeploymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().default(10),
  after: z.string().optional(),
});

/** @internal */
export type GetV2DeploymentsRequest$Outbound = {
  limit: number;
  after?: string | undefined;
};

/** @internal */
export const GetV2DeploymentsRequest$outboundSchema: z.ZodType<
  GetV2DeploymentsRequest$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsRequest
> = z.object({
  limit: z.number().default(10),
  after: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsRequest$ {
  /** @deprecated use `GetV2DeploymentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsRequest$inboundSchema;
  /** @deprecated use `GetV2DeploymentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsRequest$outboundSchema;
  /** @deprecated use `GetV2DeploymentsRequest$Outbound` instead. */
  export type Outbound = GetV2DeploymentsRequest$Outbound;
}

/** @internal */
export const GetV2DeploymentsObject$inboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsObject
> = z.nativeEnum(GetV2DeploymentsObject);

/** @internal */
export const GetV2DeploymentsObject$outboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsObject
> = GetV2DeploymentsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsObject$ {
  /** @deprecated use `GetV2DeploymentsObject$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsObject$inboundSchema;
  /** @deprecated use `GetV2DeploymentsObject$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsObject$outboundSchema;
}

/** @internal */
export const GetV2DeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsType
> = z.nativeEnum(GetV2DeploymentsType);

/** @internal */
export const GetV2DeploymentsType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsType
> = GetV2DeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsType$ {
  /** @deprecated use `GetV2DeploymentsType$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsType$inboundSchema;
  /** @deprecated use `GetV2DeploymentsType$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsType$outboundSchema;
}

/** @internal */
export const GetV2DeploymentsDeploymentsPublicType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2DeploymentsDeploymentsPublicType> = z.nativeEnum(
    GetV2DeploymentsDeploymentsPublicType,
  );

/** @internal */
export const GetV2DeploymentsDeploymentsPublicType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2DeploymentsDeploymentsPublicType> =
    GetV2DeploymentsDeploymentsPublicType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsDeploymentsPublicType$ {
  /** @deprecated use `GetV2DeploymentsDeploymentsPublicType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2DeploymentsDeploymentsPublicType$inboundSchema;
  /** @deprecated use `GetV2DeploymentsDeploymentsPublicType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2DeploymentsDeploymentsPublicType$outboundSchema;
}

/** @internal */
export const GetV2DeploymentsParameters$inboundSchema: z.ZodType<
  GetV2DeploymentsParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2DeploymentsDeploymentsPublicType$inboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/** @internal */
export type GetV2DeploymentsParameters$Outbound = {
  type: string;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

/** @internal */
export const GetV2DeploymentsParameters$outboundSchema: z.ZodType<
  GetV2DeploymentsParameters$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsParameters
> = z.object({
  type: GetV2DeploymentsDeploymentsPublicType$outboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsParameters$ {
  /** @deprecated use `GetV2DeploymentsParameters$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsParameters$inboundSchema;
  /** @deprecated use `GetV2DeploymentsParameters$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsParameters$outboundSchema;
  /** @deprecated use `GetV2DeploymentsParameters$Outbound` instead. */
  export type Outbound = GetV2DeploymentsParameters$Outbound;
}

/** @internal */
export const GetV2DeploymentsFunction$inboundSchema: z.ZodType<
  GetV2DeploymentsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => GetV2DeploymentsParameters$inboundSchema),
});

/** @internal */
export type GetV2DeploymentsFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters: GetV2DeploymentsParameters$Outbound;
};

/** @internal */
export const GetV2DeploymentsFunction$outboundSchema: z.ZodType<
  GetV2DeploymentsFunction$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => GetV2DeploymentsParameters$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsFunction$ {
  /** @deprecated use `GetV2DeploymentsFunction$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsFunction$inboundSchema;
  /** @deprecated use `GetV2DeploymentsFunction$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsFunction$outboundSchema;
  /** @deprecated use `GetV2DeploymentsFunction$Outbound` instead. */
  export type Outbound = GetV2DeploymentsFunction$Outbound;
}

/** @internal */
export const GetV2DeploymentsTools$inboundSchema: z.ZodType<
  GetV2DeploymentsTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2DeploymentsType$inboundSchema,
  function: z.lazy(() => GetV2DeploymentsFunction$inboundSchema),
  id: z.number().optional(),
});

/** @internal */
export type GetV2DeploymentsTools$Outbound = {
  type: string;
  function: GetV2DeploymentsFunction$Outbound;
  id?: number | undefined;
};

/** @internal */
export const GetV2DeploymentsTools$outboundSchema: z.ZodType<
  GetV2DeploymentsTools$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsTools
> = z.object({
  type: GetV2DeploymentsType$outboundSchema,
  function: z.lazy(() => GetV2DeploymentsFunction$outboundSchema),
  id: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsTools$ {
  /** @deprecated use `GetV2DeploymentsTools$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsTools$inboundSchema;
  /** @deprecated use `GetV2DeploymentsTools$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsTools$outboundSchema;
  /** @deprecated use `GetV2DeploymentsTools$Outbound` instead. */
  export type Outbound = GetV2DeploymentsTools$Outbound;
}

/** @internal */
export const ModelType$inboundSchema: z.ZodNativeEnum<typeof ModelType> = z
  .nativeEnum(ModelType);

/** @internal */
export const ModelType$outboundSchema: z.ZodNativeEnum<typeof ModelType> =
  ModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelType$ {
  /** @deprecated use `ModelType$inboundSchema` instead. */
  export const inboundSchema = ModelType$inboundSchema;
  /** @deprecated use `ModelType$outboundSchema` instead. */
  export const outboundSchema = ModelType$outboundSchema;
}

/** @internal */
export const GetV2DeploymentsFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsFormat
> = z.nativeEnum(GetV2DeploymentsFormat);

/** @internal */
export const GetV2DeploymentsFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsFormat
> = GetV2DeploymentsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsFormat$ {
  /** @deprecated use `GetV2DeploymentsFormat$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsFormat$inboundSchema;
  /** @deprecated use `GetV2DeploymentsFormat$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsFormat$outboundSchema;
}

/** @internal */
export const GetV2DeploymentsQuality$inboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsQuality
> = z.nativeEnum(GetV2DeploymentsQuality);

/** @internal */
export const GetV2DeploymentsQuality$outboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsQuality
> = GetV2DeploymentsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsQuality$ {
  /** @deprecated use `GetV2DeploymentsQuality$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsQuality$inboundSchema;
  /** @deprecated use `GetV2DeploymentsQuality$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsQuality$outboundSchema;
}

/** @internal */
export const GetV2DeploymentsResponseFormatDeploymentsType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2DeploymentsResponseFormatDeploymentsType> = z
    .nativeEnum(GetV2DeploymentsResponseFormatDeploymentsType);

/** @internal */
export const GetV2DeploymentsResponseFormatDeploymentsType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2DeploymentsResponseFormatDeploymentsType> =
    GetV2DeploymentsResponseFormatDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsResponseFormatDeploymentsType$ {
  /** @deprecated use `GetV2DeploymentsResponseFormatDeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2DeploymentsResponseFormatDeploymentsType$inboundSchema;
  /** @deprecated use `GetV2DeploymentsResponseFormatDeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2DeploymentsResponseFormatDeploymentsType$outboundSchema;
}

/** @internal */
export const GetV2DeploymentsResponseFormat2$inboundSchema: z.ZodType<
  GetV2DeploymentsResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2DeploymentsResponseFormatDeploymentsType$inboundSchema,
});

/** @internal */
export type GetV2DeploymentsResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const GetV2DeploymentsResponseFormat2$outboundSchema: z.ZodType<
  GetV2DeploymentsResponseFormat2$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsResponseFormat2
> = z.object({
  type: GetV2DeploymentsResponseFormatDeploymentsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsResponseFormat2$ {
  /** @deprecated use `GetV2DeploymentsResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsResponseFormat2$inboundSchema;
  /** @deprecated use `GetV2DeploymentsResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsResponseFormat2$outboundSchema;
  /** @deprecated use `GetV2DeploymentsResponseFormat2$Outbound` instead. */
  export type Outbound = GetV2DeploymentsResponseFormat2$Outbound;
}

/** @internal */
export const GetV2DeploymentsResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsResponseFormatType
> = z.nativeEnum(GetV2DeploymentsResponseFormatType);

/** @internal */
export const GetV2DeploymentsResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsResponseFormatType
> = GetV2DeploymentsResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsResponseFormatType$ {
  /** @deprecated use `GetV2DeploymentsResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsResponseFormatType$inboundSchema;
  /** @deprecated use `GetV2DeploymentsResponseFormatType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2DeploymentsResponseFormatType$outboundSchema;
}

/** @internal */
export const ResponseFormatJsonSchema$inboundSchema: z.ZodType<
  ResponseFormatJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type ResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const ResponseFormatJsonSchema$outboundSchema: z.ZodType<
  ResponseFormatJsonSchema$Outbound,
  z.ZodTypeDef,
  ResponseFormatJsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatJsonSchema$ {
  /** @deprecated use `ResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `ResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `ResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = ResponseFormatJsonSchema$Outbound;
}

/** @internal */
export const GetV2DeploymentsResponseFormat1$inboundSchema: z.ZodType<
  GetV2DeploymentsResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2DeploymentsResponseFormatType$inboundSchema,
  json_schema: z.lazy(() => ResponseFormatJsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type GetV2DeploymentsResponseFormat1$Outbound = {
  type: string;
  json_schema: ResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const GetV2DeploymentsResponseFormat1$outboundSchema: z.ZodType<
  GetV2DeploymentsResponseFormat1$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsResponseFormat1
> = z.object({
  type: GetV2DeploymentsResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() => ResponseFormatJsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsResponseFormat1$ {
  /** @deprecated use `GetV2DeploymentsResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsResponseFormat1$inboundSchema;
  /** @deprecated use `GetV2DeploymentsResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsResponseFormat1$outboundSchema;
  /** @deprecated use `GetV2DeploymentsResponseFormat1$Outbound` instead. */
  export type Outbound = GetV2DeploymentsResponseFormat1$Outbound;
}

/** @internal */
export const GetV2DeploymentsResponseFormat$inboundSchema: z.ZodType<
  GetV2DeploymentsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2DeploymentsResponseFormat2$inboundSchema),
  z.lazy(() => GetV2DeploymentsResponseFormat1$inboundSchema),
]);

/** @internal */
export type GetV2DeploymentsResponseFormat$Outbound =
  | GetV2DeploymentsResponseFormat2$Outbound
  | GetV2DeploymentsResponseFormat1$Outbound;

/** @internal */
export const GetV2DeploymentsResponseFormat$outboundSchema: z.ZodType<
  GetV2DeploymentsResponseFormat$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsResponseFormat
> = z.union([
  z.lazy(() => GetV2DeploymentsResponseFormat2$outboundSchema),
  z.lazy(() => GetV2DeploymentsResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsResponseFormat$ {
  /** @deprecated use `GetV2DeploymentsResponseFormat$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsResponseFormat$inboundSchema;
  /** @deprecated use `GetV2DeploymentsResponseFormat$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsResponseFormat$outboundSchema;
  /** @deprecated use `GetV2DeploymentsResponseFormat$Outbound` instead. */
  export type Outbound = GetV2DeploymentsResponseFormat$Outbound;
}

/** @internal */
export const GetV2DeploymentsPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsPhotoRealVersion
> = z.nativeEnum(GetV2DeploymentsPhotoRealVersion);

/** @internal */
export const GetV2DeploymentsPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsPhotoRealVersion
> = GetV2DeploymentsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsPhotoRealVersion$ {
  /** @deprecated use `GetV2DeploymentsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetV2DeploymentsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetV2DeploymentsEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsEncodingFormat
> = z.nativeEnum(GetV2DeploymentsEncodingFormat);

/** @internal */
export const GetV2DeploymentsEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsEncodingFormat
> = GetV2DeploymentsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsEncodingFormat$ {
  /** @deprecated use `GetV2DeploymentsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsEncodingFormat$inboundSchema;
  /** @deprecated use `GetV2DeploymentsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsEncodingFormat$outboundSchema;
}

/** @internal */
export const ModelParameters$inboundSchema: z.ZodType<
  ModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetV2DeploymentsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetV2DeploymentsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetV2DeploymentsResponseFormat2$inboundSchema),
      z.lazy(() => GetV2DeploymentsResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetV2DeploymentsPhotoRealVersion$inboundSchema.optional(),
  encoding_format: GetV2DeploymentsEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type ModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetV2DeploymentsResponseFormat2$Outbound
    | GetV2DeploymentsResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const ModelParameters$outboundSchema: z.ZodType<
  ModelParameters$Outbound,
  z.ZodTypeDef,
  ModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetV2DeploymentsFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetV2DeploymentsQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetV2DeploymentsResponseFormat2$outboundSchema),
      z.lazy(() => GetV2DeploymentsResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetV2DeploymentsPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: GetV2DeploymentsEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelParameters$ {
  /** @deprecated use `ModelParameters$inboundSchema` instead. */
  export const inboundSchema = ModelParameters$inboundSchema;
  /** @deprecated use `ModelParameters$outboundSchema` instead. */
  export const outboundSchema = ModelParameters$outboundSchema;
  /** @deprecated use `ModelParameters$Outbound` instead. */
  export type Outbound = ModelParameters$Outbound;
}

/** @internal */
export const GetV2DeploymentsProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsProvider
> = z.nativeEnum(GetV2DeploymentsProvider);

/** @internal */
export const GetV2DeploymentsProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsProvider
> = GetV2DeploymentsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsProvider$ {
  /** @deprecated use `GetV2DeploymentsProvider$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsProvider$inboundSchema;
  /** @deprecated use `GetV2DeploymentsProvider$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsProvider$outboundSchema;
}

/** @internal */
export const GetV2DeploymentsRole$inboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsRole
> = z.nativeEnum(GetV2DeploymentsRole);

/** @internal */
export const GetV2DeploymentsRole$outboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsRole
> = GetV2DeploymentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsRole$ {
  /** @deprecated use `GetV2DeploymentsRole$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsRole$inboundSchema;
  /** @deprecated use `GetV2DeploymentsRole$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsRole$outboundSchema;
}

/** @internal */
export const GetV2Deployments2DeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2Deployments2DeploymentsType
> = z.nativeEnum(GetV2Deployments2DeploymentsType);

/** @internal */
export const GetV2Deployments2DeploymentsType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2Deployments2DeploymentsType
> = GetV2Deployments2DeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2Deployments2DeploymentsType$ {
  /** @deprecated use `GetV2Deployments2DeploymentsType$inboundSchema` instead. */
  export const inboundSchema = GetV2Deployments2DeploymentsType$inboundSchema;
  /** @deprecated use `GetV2Deployments2DeploymentsType$outboundSchema` instead. */
  export const outboundSchema = GetV2Deployments2DeploymentsType$outboundSchema;
}

/** @internal */
export const GetV2Deployments2ImageUrl$inboundSchema: z.ZodType<
  GetV2Deployments2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetV2Deployments2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetV2Deployments2ImageUrl$outboundSchema: z.ZodType<
  GetV2Deployments2ImageUrl$Outbound,
  z.ZodTypeDef,
  GetV2Deployments2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2Deployments2ImageUrl$ {
  /** @deprecated use `GetV2Deployments2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = GetV2Deployments2ImageUrl$inboundSchema;
  /** @deprecated use `GetV2Deployments2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = GetV2Deployments2ImageUrl$outboundSchema;
  /** @deprecated use `GetV2Deployments2ImageUrl$Outbound` instead. */
  export type Outbound = GetV2Deployments2ImageUrl$Outbound;
}

/** @internal */
export const GetV2Deployments22$inboundSchema: z.ZodType<
  GetV2Deployments22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2Deployments2DeploymentsType$inboundSchema,
  image_url: z.lazy(() => GetV2Deployments2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetV2Deployments22$Outbound = {
  type: string;
  image_url: GetV2Deployments2ImageUrl$Outbound;
};

/** @internal */
export const GetV2Deployments22$outboundSchema: z.ZodType<
  GetV2Deployments22$Outbound,
  z.ZodTypeDef,
  GetV2Deployments22
> = z.object({
  type: GetV2Deployments2DeploymentsType$outboundSchema,
  imageUrl: z.lazy(() => GetV2Deployments2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2Deployments22$ {
  /** @deprecated use `GetV2Deployments22$inboundSchema` instead. */
  export const inboundSchema = GetV2Deployments22$inboundSchema;
  /** @deprecated use `GetV2Deployments22$outboundSchema` instead. */
  export const outboundSchema = GetV2Deployments22$outboundSchema;
  /** @deprecated use `GetV2Deployments22$Outbound` instead. */
  export type Outbound = GetV2Deployments22$Outbound;
}

/** @internal */
export const GetV2Deployments2Type$inboundSchema: z.ZodNativeEnum<
  typeof GetV2Deployments2Type
> = z.nativeEnum(GetV2Deployments2Type);

/** @internal */
export const GetV2Deployments2Type$outboundSchema: z.ZodNativeEnum<
  typeof GetV2Deployments2Type
> = GetV2Deployments2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2Deployments2Type$ {
  /** @deprecated use `GetV2Deployments2Type$inboundSchema` instead. */
  export const inboundSchema = GetV2Deployments2Type$inboundSchema;
  /** @deprecated use `GetV2Deployments2Type$outboundSchema` instead. */
  export const outboundSchema = GetV2Deployments2Type$outboundSchema;
}

/** @internal */
export const GetV2Deployments21$inboundSchema: z.ZodType<
  GetV2Deployments21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2Deployments2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetV2Deployments21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetV2Deployments21$outboundSchema: z.ZodType<
  GetV2Deployments21$Outbound,
  z.ZodTypeDef,
  GetV2Deployments21
> = z.object({
  type: GetV2Deployments2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2Deployments21$ {
  /** @deprecated use `GetV2Deployments21$inboundSchema` instead. */
  export const inboundSchema = GetV2Deployments21$inboundSchema;
  /** @deprecated use `GetV2Deployments21$outboundSchema` instead. */
  export const outboundSchema = GetV2Deployments21$outboundSchema;
  /** @deprecated use `GetV2Deployments21$Outbound` instead. */
  export type Outbound = GetV2Deployments21$Outbound;
}

/** @internal */
export const GetV2DeploymentsContent2$inboundSchema: z.ZodType<
  GetV2DeploymentsContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2Deployments21$inboundSchema),
  z.lazy(() => GetV2Deployments22$inboundSchema),
]);

/** @internal */
export type GetV2DeploymentsContent2$Outbound =
  | GetV2Deployments21$Outbound
  | GetV2Deployments22$Outbound;

/** @internal */
export const GetV2DeploymentsContent2$outboundSchema: z.ZodType<
  GetV2DeploymentsContent2$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsContent2
> = z.union([
  z.lazy(() => GetV2Deployments21$outboundSchema),
  z.lazy(() => GetV2Deployments22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsContent2$ {
  /** @deprecated use `GetV2DeploymentsContent2$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsContent2$inboundSchema;
  /** @deprecated use `GetV2DeploymentsContent2$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsContent2$outboundSchema;
  /** @deprecated use `GetV2DeploymentsContent2$Outbound` instead. */
  export type Outbound = GetV2DeploymentsContent2$Outbound;
}

/** @internal */
export const GetV2DeploymentsContent$inboundSchema: z.ZodType<
  GetV2DeploymentsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetV2Deployments21$inboundSchema),
    z.lazy(() => GetV2Deployments22$inboundSchema),
  ])),
]);

/** @internal */
export type GetV2DeploymentsContent$Outbound =
  | string
  | Array<GetV2Deployments21$Outbound | GetV2Deployments22$Outbound>;

/** @internal */
export const GetV2DeploymentsContent$outboundSchema: z.ZodType<
  GetV2DeploymentsContent$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetV2Deployments21$outboundSchema),
    z.lazy(() => GetV2Deployments22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsContent$ {
  /** @deprecated use `GetV2DeploymentsContent$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsContent$inboundSchema;
  /** @deprecated use `GetV2DeploymentsContent$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsContent$outboundSchema;
  /** @deprecated use `GetV2DeploymentsContent$Outbound` instead. */
  export type Outbound = GetV2DeploymentsContent$Outbound;
}

/** @internal */
export const GetV2DeploymentsDeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsDeploymentsType
> = z.nativeEnum(GetV2DeploymentsDeploymentsType);

/** @internal */
export const GetV2DeploymentsDeploymentsType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2DeploymentsDeploymentsType
> = GetV2DeploymentsDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsDeploymentsType$ {
  /** @deprecated use `GetV2DeploymentsDeploymentsType$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsDeploymentsType$inboundSchema;
  /** @deprecated use `GetV2DeploymentsDeploymentsType$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsDeploymentsType$outboundSchema;
}

/** @internal */
export const GetV2DeploymentsDeploymentsFunction$inboundSchema: z.ZodType<
  GetV2DeploymentsDeploymentsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type GetV2DeploymentsDeploymentsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetV2DeploymentsDeploymentsFunction$outboundSchema: z.ZodType<
  GetV2DeploymentsDeploymentsFunction$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsDeploymentsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsDeploymentsFunction$ {
  /** @deprecated use `GetV2DeploymentsDeploymentsFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetV2DeploymentsDeploymentsFunction$inboundSchema;
  /** @deprecated use `GetV2DeploymentsDeploymentsFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetV2DeploymentsDeploymentsFunction$outboundSchema;
  /** @deprecated use `GetV2DeploymentsDeploymentsFunction$Outbound` instead. */
  export type Outbound = GetV2DeploymentsDeploymentsFunction$Outbound;
}

/** @internal */
export const GetV2DeploymentsToolCalls$inboundSchema: z.ZodType<
  GetV2DeploymentsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2DeploymentsDeploymentsType$inboundSchema,
  function: z.lazy(() => GetV2DeploymentsDeploymentsFunction$inboundSchema),
});

/** @internal */
export type GetV2DeploymentsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetV2DeploymentsDeploymentsFunction$Outbound;
};

/** @internal */
export const GetV2DeploymentsToolCalls$outboundSchema: z.ZodType<
  GetV2DeploymentsToolCalls$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2DeploymentsDeploymentsType$outboundSchema,
  function: z.lazy(() => GetV2DeploymentsDeploymentsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsToolCalls$ {
  /** @deprecated use `GetV2DeploymentsToolCalls$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsToolCalls$inboundSchema;
  /** @deprecated use `GetV2DeploymentsToolCalls$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsToolCalls$outboundSchema;
  /** @deprecated use `GetV2DeploymentsToolCalls$Outbound` instead. */
  export type Outbound = GetV2DeploymentsToolCalls$Outbound;
}

/** @internal */
export const GetV2DeploymentsMessages$inboundSchema: z.ZodType<
  GetV2DeploymentsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetV2DeploymentsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetV2Deployments21$inboundSchema),
      z.lazy(() => GetV2Deployments22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => GetV2DeploymentsToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetV2DeploymentsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<GetV2Deployments21$Outbound | GetV2Deployments22$Outbound>;
  tool_calls?: Array<GetV2DeploymentsToolCalls$Outbound> | undefined;
};

/** @internal */
export const GetV2DeploymentsMessages$outboundSchema: z.ZodType<
  GetV2DeploymentsMessages$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsMessages
> = z.object({
  role: GetV2DeploymentsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetV2Deployments21$outboundSchema),
      z.lazy(() => GetV2Deployments22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => GetV2DeploymentsToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsMessages$ {
  /** @deprecated use `GetV2DeploymentsMessages$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsMessages$inboundSchema;
  /** @deprecated use `GetV2DeploymentsMessages$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsMessages$outboundSchema;
  /** @deprecated use `GetV2DeploymentsMessages$Outbound` instead. */
  export type Outbound = GetV2DeploymentsMessages$Outbound;
}

/** @internal */
export const PromptConfig$inboundSchema: z.ZodType<
  PromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  tools: z.array(z.lazy(() => GetV2DeploymentsTools$inboundSchema)),
  model: z.string(),
  model_type: ModelType$inboundSchema,
  model_parameters: z.lazy(() => ModelParameters$inboundSchema),
  provider: GetV2DeploymentsProvider$inboundSchema,
  messages: z.array(z.lazy(() => GetV2DeploymentsMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_type": "modelType",
    "model_parameters": "modelParameters",
  });
});

/** @internal */
export type PromptConfig$Outbound = {
  tools: Array<GetV2DeploymentsTools$Outbound>;
  model: string;
  model_type: string;
  model_parameters: ModelParameters$Outbound;
  provider: string;
  messages: Array<GetV2DeploymentsMessages$Outbound>;
};

/** @internal */
export const PromptConfig$outboundSchema: z.ZodType<
  PromptConfig$Outbound,
  z.ZodTypeDef,
  PromptConfig
> = z.object({
  tools: z.array(z.lazy(() => GetV2DeploymentsTools$outboundSchema)),
  model: z.string(),
  modelType: ModelType$outboundSchema,
  modelParameters: z.lazy(() => ModelParameters$outboundSchema),
  provider: GetV2DeploymentsProvider$outboundSchema,
  messages: z.array(z.lazy(() => GetV2DeploymentsMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelType: "model_type",
    modelParameters: "model_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptConfig$ {
  /** @deprecated use `PromptConfig$inboundSchema` instead. */
  export const inboundSchema = PromptConfig$inboundSchema;
  /** @deprecated use `PromptConfig$outboundSchema` instead. */
  export const outboundSchema = PromptConfig$outboundSchema;
  /** @deprecated use `PromptConfig$Outbound` instead. */
  export type Outbound = PromptConfig$Outbound;
}

/** @internal */
export const GetV2DeploymentsData$inboundSchema: z.ZodType<
  GetV2DeploymentsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created: z.string(),
  updated: z.string(),
  key: z.string(),
  description: z.string(),
  prompt_config: z.lazy(() => PromptConfig$inboundSchema),
  version: z.string(),
}).transform((v) => {
  return remap$(v, {
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetV2DeploymentsData$Outbound = {
  id: string;
  created: string;
  updated: string;
  key: string;
  description: string;
  prompt_config: PromptConfig$Outbound;
  version: string;
};

/** @internal */
export const GetV2DeploymentsData$outboundSchema: z.ZodType<
  GetV2DeploymentsData$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsData
> = z.object({
  id: z.string(),
  created: z.string(),
  updated: z.string(),
  key: z.string(),
  description: z.string(),
  promptConfig: z.lazy(() => PromptConfig$outboundSchema),
  version: z.string(),
}).transform((v) => {
  return remap$(v, {
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsData$ {
  /** @deprecated use `GetV2DeploymentsData$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsData$inboundSchema;
  /** @deprecated use `GetV2DeploymentsData$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsData$outboundSchema;
  /** @deprecated use `GetV2DeploymentsData$Outbound` instead. */
  export type Outbound = GetV2DeploymentsData$Outbound;
}

/** @internal */
export const GetV2DeploymentsResponseBody$inboundSchema: z.ZodType<
  GetV2DeploymentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: GetV2DeploymentsObject$inboundSchema,
  data: z.array(z.lazy(() => GetV2DeploymentsData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type GetV2DeploymentsResponseBody$Outbound = {
  object: string;
  data: Array<GetV2DeploymentsData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const GetV2DeploymentsResponseBody$outboundSchema: z.ZodType<
  GetV2DeploymentsResponseBody$Outbound,
  z.ZodTypeDef,
  GetV2DeploymentsResponseBody
> = z.object({
  object: GetV2DeploymentsObject$outboundSchema,
  data: z.array(z.lazy(() => GetV2DeploymentsData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2DeploymentsResponseBody$ {
  /** @deprecated use `GetV2DeploymentsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetV2DeploymentsResponseBody$inboundSchema;
  /** @deprecated use `GetV2DeploymentsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetV2DeploymentsResponseBody$outboundSchema;
  /** @deprecated use `GetV2DeploymentsResponseBody$Outbound` instead. */
  export type Outbound = GetV2DeploymentsResponseBody$Outbound;
}
