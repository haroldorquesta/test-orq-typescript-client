/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The role of the messages author, in this case **tool**.
 */
export const CreateChatCompletionsMessagesRouterChatCompletionsRequestRole = {
  Tool: "tool",
} as const;
/**
 * The role of the messages author, in this case **tool**.
 */
export type CreateChatCompletionsMessagesRouterChatCompletionsRequestRole =
  ClosedEnum<
    typeof CreateChatCompletionsMessagesRouterChatCompletionsRequestRole
  >;

export const CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type =
  {
    ImageUrl: "image_url",
  } as const;
export type CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type =
  ClosedEnum<
    typeof CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type
  >;

/**
 * Specifies the detail level of the image.
 */
export const CreateChatCompletions2Detail = {
  Low: "low",
  High: "high",
  Auto: "auto",
} as const;
/**
 * Specifies the detail level of the image.
 */
export type CreateChatCompletions2Detail = ClosedEnum<
  typeof CreateChatCompletions2Detail
>;

export type CreateChatCompletions2RouterChatCompletionsRequestImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded image data.
   */
  url: string;
  /**
   * Specifies the detail level of the image.
   */
  detail?: CreateChatCompletions2Detail | undefined;
};

export type CreateChatCompletions2RouterChatCompletionsRequest2 = {
  type:
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type;
  imageUrl: CreateChatCompletions2RouterChatCompletionsRequestImageUrl;
};

export const CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType =
  {
    Text: "text",
  } as const;
export type CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType =
  ClosedEnum<
    typeof CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType
  >;

export type CreateChatCompletions2RouterChatCompletionsRequest1 = {
  type:
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType;
  text: string;
};

export type CreateChatCompletionsContentRouterChatCompletionsRequest2 =
  | CreateChatCompletions2RouterChatCompletionsRequest1
  | CreateChatCompletions2RouterChatCompletionsRequest2;

/**
 * The contents of a particular role's message.
 */
export type CreateChatCompletionsMessagesRouterChatCompletionsRequestContent =
  | string
  | Array<
    | CreateChatCompletions2RouterChatCompletionsRequest1
    | CreateChatCompletions2RouterChatCompletionsRequest2
  >;

export type Four = {
  /**
   * The role of the messages author, in this case **tool**.
   */
  role: CreateChatCompletionsMessagesRouterChatCompletionsRequestRole;
  toolCallId: string;
  /**
   * The contents of a particular role's message.
   */
  content:
    | string
    | Array<
      | CreateChatCompletions2RouterChatCompletionsRequest1
      | CreateChatCompletions2RouterChatCompletionsRequest2
    >;
};

/**
 * The role of the messages author, in this case **assistant**.
 */
export const CreateChatCompletionsMessagesRouterChatCompletionsRole = {
  Assistant: "assistant",
} as const;
/**
 * The role of the messages author, in this case **assistant**.
 */
export type CreateChatCompletionsMessagesRouterChatCompletionsRole = ClosedEnum<
  typeof CreateChatCompletionsMessagesRouterChatCompletionsRole
>;

/**
 * The contents of the assistant message. Required unless tool_calls is specified.
 */
export type CreateChatCompletionsMessagesRouterChatCompletionsContent =
  | string
  | Array<any>;

/**
 * The type of the tool. Currently, only **function** is supported.
 */
export const MessagesType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only **function** is supported.
 */
export type MessagesType = ClosedEnum<typeof MessagesType>;

/**
 * The function that the model called.
 */
export type MessagesFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments: string;
};

export type MessagesToolCalls = {
  /**
   * The ID of the tool call.
   */
  id: string;
  /**
   * The type of the tool. Currently, only **function** is supported.
   */
  type: MessagesType;
  /**
   * The function that the model called.
   */
  function: MessagesFunction;
};

export type Messages3 = {
  /**
   * The role of the messages author, in this case **assistant**.
   */
  role: CreateChatCompletionsMessagesRouterChatCompletionsRole;
  /**
   * The contents of the assistant message. Required unless tool_calls is specified.
   */
  content?: string | Array<any> | undefined;
  /**
   * The refusal message by the assistant.
   */
  refusal?: string | null | undefined;
  /**
   * The tool calls generated by the model, such as function calls.
   */
  toolCalls: Array<MessagesToolCalls>;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
};

/**
 * The role of the messages author, in this case **user**.
 */
export const CreateChatCompletionsMessagesRole = {
  User: "user",
} as const;
/**
 * The role of the messages author, in this case **user**.
 */
export type CreateChatCompletionsMessagesRole = ClosedEnum<
  typeof CreateChatCompletionsMessagesRole
>;

export const CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType =
  {
    ImageUrl: "image_url",
  } as const;
export type CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType =
  ClosedEnum<
    typeof CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType
  >;

/**
 * Specifies the detail level of the image.
 */
export const TwoDetail = {
  Low: "low",
  High: "high",
  Auto: "auto",
} as const;
/**
 * Specifies the detail level of the image.
 */
export type TwoDetail = ClosedEnum<typeof TwoDetail>;

export type CreateChatCompletions2RouterChatCompletionsImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded image data.
   */
  url: string;
  /**
   * Specifies the detail level of the image.
   */
  detail?: TwoDetail | undefined;
};

export type CreateChatCompletions2RouterChatCompletions2 = {
  type: CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType;
  imageUrl: CreateChatCompletions2RouterChatCompletionsImageUrl;
};

export const CreateChatCompletions2RouterChatCompletionsRequestType = {
  Text: "text",
} as const;
export type CreateChatCompletions2RouterChatCompletionsRequestType = ClosedEnum<
  typeof CreateChatCompletions2RouterChatCompletionsRequestType
>;

export type CreateChatCompletions2RouterChatCompletions1 = {
  type: CreateChatCompletions2RouterChatCompletionsRequestType;
  text: string;
};

export type CreateChatCompletionsContentRouterChatCompletions2 =
  | CreateChatCompletions2RouterChatCompletions1
  | CreateChatCompletions2RouterChatCompletions2;

/**
 * The contents of a particular role's message.
 */
export type CreateChatCompletionsMessagesContent =
  | string
  | Array<
    | CreateChatCompletions2RouterChatCompletions1
    | CreateChatCompletions2RouterChatCompletions2
  >;

export type Messages2 = {
  /**
   * The role of the messages author, in this case **user**.
   */
  role: CreateChatCompletionsMessagesRole;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
  /**
   * The contents of a particular role's message.
   */
  content:
    | string
    | Array<
      | CreateChatCompletions2RouterChatCompletions1
      | CreateChatCompletions2RouterChatCompletions2
    >;
};

/**
 * The role of the messages author, in this case **system**.
 */
export const MessagesRole = {
  System: "system",
} as const;
/**
 * The role of the messages author, in this case **system**.
 */
export type MessagesRole = ClosedEnum<typeof MessagesRole>;

export const CreateChatCompletions2RouterChatCompletionsType = {
  ImageUrl: "image_url",
} as const;
export type CreateChatCompletions2RouterChatCompletionsType = ClosedEnum<
  typeof CreateChatCompletions2RouterChatCompletionsType
>;

/**
 * Specifies the detail level of the image.
 */
export const Detail = {
  Low: "low",
  High: "high",
  Auto: "auto",
} as const;
/**
 * Specifies the detail level of the image.
 */
export type Detail = ClosedEnum<typeof Detail>;

export type CreateChatCompletions2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded image data.
   */
  url: string;
  /**
   * Specifies the detail level of the image.
   */
  detail?: Detail | undefined;
};

export type CreateChatCompletions22 = {
  type: CreateChatCompletions2RouterChatCompletionsType;
  imageUrl: CreateChatCompletions2ImageUrl;
};

export const CreateChatCompletions2Type = {
  Text: "text",
} as const;
export type CreateChatCompletions2Type = ClosedEnum<
  typeof CreateChatCompletions2Type
>;

export type CreateChatCompletions21 = {
  type: CreateChatCompletions2Type;
  text: string;
};

export type CreateChatCompletionsContent2 =
  | CreateChatCompletions21
  | CreateChatCompletions22;

/**
 * The contents of a particular role's message.
 */
export type MessagesContent =
  | string
  | Array<CreateChatCompletions21 | CreateChatCompletions22>;

export type Messages1 = {
  /**
   * The role of the messages author, in this case **system**.
   */
  role: MessagesRole;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
  /**
   * The contents of a particular role's message.
   */
  content: string | Array<CreateChatCompletions21 | CreateChatCompletions22>;
};

export type CreateChatCompletionsMessages =
  | Messages1
  | Messages2
  | Four
  | Messages3;

/**
 * The type of the tool. Currently, only function is supported.
 */
export const CreateChatCompletionsType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only function is supported.
 */
export type CreateChatCompletionsType = ClosedEnum<
  typeof CreateChatCompletionsType
>;

export const CreateChatCompletionsRouterChatCompletionsType = {
  Object: "object",
} as const;
export type CreateChatCompletionsRouterChatCompletionsType = ClosedEnum<
  typeof CreateChatCompletionsRouterChatCompletionsType
>;

/**
 * The parameters the functions accepts, described as a JSON Schema object
 */
export type ParametersT = {
  type: CreateChatCompletionsRouterChatCompletionsType;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
};

export type CreateChatCompletionsFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object
   */
  parameters?: ParametersT | undefined;
  /**
   * Whether to enable strict schema adherence when generating the function call.
   */
  strict?: boolean | null | undefined;
};

export type Tools = {
  /**
   * The type of the tool. Currently, only function is supported.
   */
  type: CreateChatCompletionsType;
  function: CreateChatCompletionsFunction;
};

/**
 * Creates a model response for the given chat conversation.
 */
export type CreateChatCompletionsRequestBody = {
  /**
   * ID of the model to use
   */
  model: string;
  /**
   * A list of messages comprising the conversation so far.
   */
  messages: Array<Messages1 | Messages2 | Four | Messages3>;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
   */
  frequencyPenalty?: number | null | undefined;
  /**
   * The maximum number of tokens that can be generated in the chat completion.
   */
  maxTokens?: number | null | undefined;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
   */
  presencePenalty?: number | null | undefined;
  /**
   * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result.
   */
  seed?: number | null | undefined;
  /**
   * If set, partial message deltas will be sent, like in ChatGPT.
   */
  stream?: boolean | null | undefined;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   */
  temperature?: number | null | undefined;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
   */
  topP?: number | null | undefined;
  /**
   * A list of tools the model may call.
   */
  tools?: Array<Tools> | undefined;
};

/**
 * A response body that follows the official OpenAI schema
 */
export type CreateChatCompletionsRouterChatCompletionsResponseBody = {
  data: string;
  event?: string | undefined;
  id?: string | undefined;
  retry?: number | undefined;
};

/**
 * The reason the model stopped generating tokens.
 */
export const ResponseBodyFinishReason = {
  Stop: "stop",
  Length: "length",
  ContentFilter: "content_filter",
  ToolCalls: "tool_calls",
} as const;
/**
 * The reason the model stopped generating tokens.
 */
export type ResponseBodyFinishReason = ClosedEnum<
  typeof ResponseBodyFinishReason
>;

export type CreateChatCompletionsResponseBodyTopLogprobs = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
};

export type CreateChatCompletionsResponseBodyContent = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
  /**
   * List of the most likely tokens and their log probability, at this token position.
   */
  topLogprobs: Array<CreateChatCompletionsResponseBodyTopLogprobs>;
};

export type CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs =
  {
    /**
     * The token.
     */
    token: string;
    /**
     * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
     */
    logprob: number;
    /**
     * A list of integers representing the UTF-8 bytes representation of the token.
     */
    bytes: Array<number> | null;
  };

export type ResponseBodyRefusal = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
  /**
   * List of the most likely tokens and their log probability, at this token position.
   */
  topLogprobs: Array<
    CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs
  >;
};

/**
 * Log probability information for the choice.
 */
export type ResponseBodyLogprobs = {
  /**
   * A list of message content tokens with log probability information.
   */
  content: Array<CreateChatCompletionsResponseBodyContent> | null;
  /**
   * A list of message refusal tokens with log probability information.
   */
  refusal: Array<ResponseBodyRefusal> | null;
};

export const CreateChatCompletionsResponseBodyType = {
  Function: "function",
} as const;
export type CreateChatCompletionsResponseBodyType = ClosedEnum<
  typeof CreateChatCompletionsResponseBodyType
>;

/**
 * The function that the model called.
 */
export type CreateChatCompletionsResponseBodyFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments: string;
};

export type CreateChatCompletionsResponseBodyToolCalls = {
  id: string;
  type: CreateChatCompletionsResponseBodyType;
  /**
   * The function that the model called.
   */
  function: CreateChatCompletionsResponseBodyFunction;
};

export const CreateChatCompletionsResponseBodyRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
export type CreateChatCompletionsResponseBodyRole = ClosedEnum<
  typeof CreateChatCompletionsResponseBodyRole
>;

/**
 * A chat completion delta generated by streamed model responses.
 */
export type Delta = {
  content: string | null;
  refusal: string | null;
  toolCalls: Array<CreateChatCompletionsResponseBodyToolCalls>;
  role: CreateChatCompletionsResponseBodyRole;
};

export type CreateChatCompletionsResponseBodyChoices = {
  /**
   * The reason the model stopped generating tokens.
   */
  finishReason: ResponseBodyFinishReason;
  /**
   * The index of the choice in the list of choices.
   */
  index: number;
  /**
   * Log probability information for the choice.
   */
  logprobs: ResponseBodyLogprobs | null;
  /**
   * A chat completion delta generated by streamed model responses.
   */
  delta: Delta;
};

/**
 * Usage statistics for the completion request.
 */
export type CreateChatCompletionsResponseBodyUsage = {
  /**
   * Number of tokens in the generated completion.
   */
  completionTokens?: number | undefined;
  /**
   * Number of tokens in the prompt.
   */
  promptTokens?: number | undefined;
  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  totalTokens?: number | undefined;
};

/**
 * Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
 */
export type ResponseBody2 = {
  /**
   * A unique identifier for the chat completion.
   */
  id: string;
  /**
   * A list of chat completion choices. Can contain more than one elements if n is greater than 1. Can also be empty for the last chunk if you set stream_options: {"include_usage": true}.
   */
  choices: Array<CreateChatCompletionsResponseBodyChoices>;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created.
   */
  created: number;
  /**
   * The model used for the chat completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with.
   */
  systemFingerprint: string;
  /**
   * The object type
   */
  object: string;
  /**
   * Usage statistics for the completion request.
   */
  usage: CreateChatCompletionsResponseBodyUsage;
};

/**
 * The reason the model stopped generating tokens.
 */
export const CreateChatCompletionsResponseBodyFinishReason = {
  Stop: "stop",
  Length: "length",
  ContentFilter: "content_filter",
  ToolCalls: "tool_calls",
} as const;
/**
 * The reason the model stopped generating tokens.
 */
export type CreateChatCompletionsResponseBodyFinishReason = ClosedEnum<
  typeof CreateChatCompletionsResponseBodyFinishReason
>;

export const ResponseBodyType = {
  Function: "function",
} as const;
export type ResponseBodyType = ClosedEnum<typeof ResponseBodyType>;

/**
 * The function that the model called.
 */
export type ResponseBodyFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments: string;
};

export type ResponseBodyToolCalls = {
  id: string;
  type: ResponseBodyType;
  /**
   * The function that the model called.
   */
  function: ResponseBodyFunction;
};

export const ResponseBodyRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
export type ResponseBodyRole = ClosedEnum<typeof ResponseBodyRole>;

/**
 * A chat completion message generated by the model.
 */
export type ResponseBodyMessage = {
  content: string | null;
  refusal: string | null;
  toolCalls: Array<ResponseBodyToolCalls>;
  role: ResponseBodyRole;
};

export type TopLogprobs = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
};

export type ResponseBodyContent = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
  /**
   * List of the most likely tokens and their log probability, at this token position.
   */
  topLogprobs: Array<TopLogprobs>;
};

export type ResponseBodyTopLogprobs = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
};

export type Refusal = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
  /**
   * List of the most likely tokens and their log probability, at this token position.
   */
  topLogprobs: Array<ResponseBodyTopLogprobs>;
};

/**
 * Log probability information for the choice.
 */
export type Logprobs = {
  /**
   * A list of message content tokens with log probability information.
   */
  content: Array<ResponseBodyContent> | null;
  /**
   * A list of message refusal tokens with log probability information.
   */
  refusal: Array<Refusal> | null;
};

export type ResponseBodyChoices = {
  /**
   * The reason the model stopped generating tokens.
   */
  finishReason: CreateChatCompletionsResponseBodyFinishReason;
  /**
   * The index of the choice in the list of choices.
   */
  index: number;
  /**
   * A chat completion message generated by the model.
   */
  message: ResponseBodyMessage;
  /**
   * Log probability information for the choice.
   */
  logprobs: Logprobs | null;
};

/**
 * Usage statistics for the completion request.
 */
export type ResponseBodyUsage = {
  /**
   * Number of tokens in the generated completion.
   */
  completionTokens?: number | undefined;
  /**
   * Number of tokens in the prompt.
   */
  promptTokens?: number | undefined;
  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  totalTokens?: number | undefined;
};

/**
 * Represents a chat completion response returned by model, based on the provided input.
 */
export type ResponseBody1 = {
  /**
   * A unique identifier for the chat completion.
   */
  id: string;
  /**
   * A list of chat completion choices. Can be more than one if n is greater than 1.
   */
  choices: Array<ResponseBodyChoices>;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created.
   */
  created: number;
  /**
   * The model used for the chat completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with.
   */
  systemFingerprint: string;
  /**
   * The object type
   */
  object: string;
  /**
   * Usage statistics for the completion request.
   */
  usage: ResponseBodyUsage;
};

/**
 * A response body that follows the official OpenAI schema
 */
export type CreateChatCompletionsResponseBody = ResponseBody1 | ResponseBody2;

export type CreateChatCompletionsResponse =
  | ResponseBody1
  | ResponseBody2
  | EventStream<CreateChatCompletionsRouterChatCompletionsResponseBody>;

/** @internal */
export const CreateChatCompletionsMessagesRouterChatCompletionsRequestRole$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateChatCompletionsMessagesRouterChatCompletionsRequestRole
  > = z.nativeEnum(
    CreateChatCompletionsMessagesRouterChatCompletionsRequestRole,
  );

/** @internal */
export const CreateChatCompletionsMessagesRouterChatCompletionsRequestRole$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateChatCompletionsMessagesRouterChatCompletionsRequestRole
  > =
    CreateChatCompletionsMessagesRouterChatCompletionsRequestRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsMessagesRouterChatCompletionsRequestRole$ {
  /** @deprecated use `CreateChatCompletionsMessagesRouterChatCompletionsRequestRole$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsMessagesRouterChatCompletionsRequestRole$inboundSchema;
  /** @deprecated use `CreateChatCompletionsMessagesRouterChatCompletionsRequestRole$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsMessagesRouterChatCompletionsRequestRole$outboundSchema;
}

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type
  > = z.nativeEnum(
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type,
  );

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type
  > =
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$ {
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$inboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$outboundSchema;
}

/** @internal */
export const CreateChatCompletions2Detail$inboundSchema: z.ZodNativeEnum<
  typeof CreateChatCompletions2Detail
> = z.nativeEnum(CreateChatCompletions2Detail);

/** @internal */
export const CreateChatCompletions2Detail$outboundSchema: z.ZodNativeEnum<
  typeof CreateChatCompletions2Detail
> = CreateChatCompletions2Detail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2Detail$ {
  /** @deprecated use `CreateChatCompletions2Detail$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletions2Detail$inboundSchema;
  /** @deprecated use `CreateChatCompletions2Detail$outboundSchema` instead. */
  export const outboundSchema = CreateChatCompletions2Detail$outboundSchema;
}

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequestImageUrl$inboundSchema:
  z.ZodType<
    CreateChatCompletions2RouterChatCompletionsRequestImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    url: z.string(),
    detail: CreateChatCompletions2Detail$inboundSchema.optional(),
  });

/** @internal */
export type CreateChatCompletions2RouterChatCompletionsRequestImageUrl$Outbound =
  {
    url: string;
    detail?: string | undefined;
  };

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequestImageUrl$outboundSchema:
  z.ZodType<
    CreateChatCompletions2RouterChatCompletionsRequestImageUrl$Outbound,
    z.ZodTypeDef,
    CreateChatCompletions2RouterChatCompletionsRequestImageUrl
  > = z.object({
    url: z.string(),
    detail: CreateChatCompletions2Detail$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2RouterChatCompletionsRequestImageUrl$ {
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequestImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequestImageUrl$inboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequestImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequestImageUrl$outboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequestImageUrl$Outbound` instead. */
  export type Outbound =
    CreateChatCompletions2RouterChatCompletionsRequestImageUrl$Outbound;
}

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequest2$inboundSchema:
  z.ZodType<
    CreateChatCompletions2RouterChatCompletionsRequest2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$inboundSchema,
    image_url: z.lazy(() =>
      CreateChatCompletions2RouterChatCompletionsRequestImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type CreateChatCompletions2RouterChatCompletionsRequest2$Outbound = {
  type: string;
  image_url:
    CreateChatCompletions2RouterChatCompletionsRequestImageUrl$Outbound;
};

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequest2$outboundSchema:
  z.ZodType<
    CreateChatCompletions2RouterChatCompletionsRequest2$Outbound,
    z.ZodTypeDef,
    CreateChatCompletions2RouterChatCompletionsRequest2
  > = z.object({
    type:
      CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessages4Type$outboundSchema,
    imageUrl: z.lazy(() =>
      CreateChatCompletions2RouterChatCompletionsRequestImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2RouterChatCompletionsRequest2$ {
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequest2$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequest2$inboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequest2$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequest2$outboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequest2$Outbound` instead. */
  export type Outbound =
    CreateChatCompletions2RouterChatCompletionsRequest2$Outbound;
}

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType
  > = z.nativeEnum(
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType,
  );

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType
  > =
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$ {
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$inboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$outboundSchema;
}

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequest1$inboundSchema:
  z.ZodType<
    CreateChatCompletions2RouterChatCompletionsRequest1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type CreateChatCompletions2RouterChatCompletionsRequest1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequest1$outboundSchema:
  z.ZodType<
    CreateChatCompletions2RouterChatCompletionsRequest1$Outbound,
    z.ZodTypeDef,
    CreateChatCompletions2RouterChatCompletionsRequest1
  > = z.object({
    type:
      CreateChatCompletions2RouterChatCompletionsRequestRequestBodyMessagesType$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2RouterChatCompletionsRequest1$ {
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequest1$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequest1$inboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequest1$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequest1$outboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequest1$Outbound` instead. */
  export type Outbound =
    CreateChatCompletions2RouterChatCompletionsRequest1$Outbound;
}

/** @internal */
export const CreateChatCompletionsContentRouterChatCompletionsRequest2$inboundSchema:
  z.ZodType<
    CreateChatCompletionsContentRouterChatCompletionsRequest2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      CreateChatCompletions2RouterChatCompletionsRequest1$inboundSchema
    ),
    z.lazy(() =>
      CreateChatCompletions2RouterChatCompletionsRequest2$inboundSchema
    ),
  ]);

/** @internal */
export type CreateChatCompletionsContentRouterChatCompletionsRequest2$Outbound =
  | CreateChatCompletions2RouterChatCompletionsRequest1$Outbound
  | CreateChatCompletions2RouterChatCompletionsRequest2$Outbound;

/** @internal */
export const CreateChatCompletionsContentRouterChatCompletionsRequest2$outboundSchema:
  z.ZodType<
    CreateChatCompletionsContentRouterChatCompletionsRequest2$Outbound,
    z.ZodTypeDef,
    CreateChatCompletionsContentRouterChatCompletionsRequest2
  > = z.union([
    z.lazy(() =>
      CreateChatCompletions2RouterChatCompletionsRequest1$outboundSchema
    ),
    z.lazy(() =>
      CreateChatCompletions2RouterChatCompletionsRequest2$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsContentRouterChatCompletionsRequest2$ {
  /** @deprecated use `CreateChatCompletionsContentRouterChatCompletionsRequest2$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsContentRouterChatCompletionsRequest2$inboundSchema;
  /** @deprecated use `CreateChatCompletionsContentRouterChatCompletionsRequest2$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsContentRouterChatCompletionsRequest2$outboundSchema;
  /** @deprecated use `CreateChatCompletionsContentRouterChatCompletionsRequest2$Outbound` instead. */
  export type Outbound =
    CreateChatCompletionsContentRouterChatCompletionsRequest2$Outbound;
}

/** @internal */
export const CreateChatCompletionsMessagesRouterChatCompletionsRequestContent$inboundSchema:
  z.ZodType<
    CreateChatCompletionsMessagesRouterChatCompletionsRequestContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        CreateChatCompletions2RouterChatCompletionsRequest1$inboundSchema
      ),
      z.lazy(() =>
        CreateChatCompletions2RouterChatCompletionsRequest2$inboundSchema
      ),
    ])),
  ]);

/** @internal */
export type CreateChatCompletionsMessagesRouterChatCompletionsRequestContent$Outbound =
  | string
  | Array<
    | CreateChatCompletions2RouterChatCompletionsRequest1$Outbound
    | CreateChatCompletions2RouterChatCompletionsRequest2$Outbound
  >;

/** @internal */
export const CreateChatCompletionsMessagesRouterChatCompletionsRequestContent$outboundSchema:
  z.ZodType<
    CreateChatCompletionsMessagesRouterChatCompletionsRequestContent$Outbound,
    z.ZodTypeDef,
    CreateChatCompletionsMessagesRouterChatCompletionsRequestContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        CreateChatCompletions2RouterChatCompletionsRequest1$outboundSchema
      ),
      z.lazy(() =>
        CreateChatCompletions2RouterChatCompletionsRequest2$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsMessagesRouterChatCompletionsRequestContent$ {
  /** @deprecated use `CreateChatCompletionsMessagesRouterChatCompletionsRequestContent$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsMessagesRouterChatCompletionsRequestContent$inboundSchema;
  /** @deprecated use `CreateChatCompletionsMessagesRouterChatCompletionsRequestContent$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsMessagesRouterChatCompletionsRequestContent$outboundSchema;
  /** @deprecated use `CreateChatCompletionsMessagesRouterChatCompletionsRequestContent$Outbound` instead. */
  export type Outbound =
    CreateChatCompletionsMessagesRouterChatCompletionsRequestContent$Outbound;
}

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({
    role:
      CreateChatCompletionsMessagesRouterChatCompletionsRequestRole$inboundSchema,
    tool_call_id: z.string(),
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          CreateChatCompletions2RouterChatCompletionsRequest1$inboundSchema
        ),
        z.lazy(() =>
          CreateChatCompletions2RouterChatCompletionsRequest2$inboundSchema
        ),
      ])),
    ]),
  }).transform((v) => {
    return remap$(v, {
      "tool_call_id": "toolCallId",
    });
  });

/** @internal */
export type Four$Outbound = {
  role: string;
  tool_call_id: string;
  content:
    | string
    | Array<
      | CreateChatCompletions2RouterChatCompletionsRequest1$Outbound
      | CreateChatCompletions2RouterChatCompletionsRequest2$Outbound
    >;
};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({
    role:
      CreateChatCompletionsMessagesRouterChatCompletionsRequestRole$outboundSchema,
    toolCallId: z.string(),
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          CreateChatCompletions2RouterChatCompletionsRequest1$outboundSchema
        ),
        z.lazy(() =>
          CreateChatCompletions2RouterChatCompletionsRequest2$outboundSchema
        ),
      ])),
    ]),
  }).transform((v) => {
    return remap$(v, {
      toolCallId: "tool_call_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

/** @internal */
export const CreateChatCompletionsMessagesRouterChatCompletionsRole$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateChatCompletionsMessagesRouterChatCompletionsRole
  > = z.nativeEnum(CreateChatCompletionsMessagesRouterChatCompletionsRole);

/** @internal */
export const CreateChatCompletionsMessagesRouterChatCompletionsRole$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateChatCompletionsMessagesRouterChatCompletionsRole
  > = CreateChatCompletionsMessagesRouterChatCompletionsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsMessagesRouterChatCompletionsRole$ {
  /** @deprecated use `CreateChatCompletionsMessagesRouterChatCompletionsRole$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsMessagesRouterChatCompletionsRole$inboundSchema;
  /** @deprecated use `CreateChatCompletionsMessagesRouterChatCompletionsRole$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsMessagesRouterChatCompletionsRole$outboundSchema;
}

/** @internal */
export const CreateChatCompletionsMessagesRouterChatCompletionsContent$inboundSchema:
  z.ZodType<
    CreateChatCompletionsMessagesRouterChatCompletionsContent,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.any())]);

/** @internal */
export type CreateChatCompletionsMessagesRouterChatCompletionsContent$Outbound =
  | string
  | Array<any>;

/** @internal */
export const CreateChatCompletionsMessagesRouterChatCompletionsContent$outboundSchema:
  z.ZodType<
    CreateChatCompletionsMessagesRouterChatCompletionsContent$Outbound,
    z.ZodTypeDef,
    CreateChatCompletionsMessagesRouterChatCompletionsContent
  > = z.union([z.string(), z.array(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsMessagesRouterChatCompletionsContent$ {
  /** @deprecated use `CreateChatCompletionsMessagesRouterChatCompletionsContent$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsMessagesRouterChatCompletionsContent$inboundSchema;
  /** @deprecated use `CreateChatCompletionsMessagesRouterChatCompletionsContent$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsMessagesRouterChatCompletionsContent$outboundSchema;
  /** @deprecated use `CreateChatCompletionsMessagesRouterChatCompletionsContent$Outbound` instead. */
  export type Outbound =
    CreateChatCompletionsMessagesRouterChatCompletionsContent$Outbound;
}

/** @internal */
export const MessagesType$inboundSchema: z.ZodNativeEnum<typeof MessagesType> =
  z.nativeEnum(MessagesType);

/** @internal */
export const MessagesType$outboundSchema: z.ZodNativeEnum<typeof MessagesType> =
  MessagesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesType$ {
  /** @deprecated use `MessagesType$inboundSchema` instead. */
  export const inboundSchema = MessagesType$inboundSchema;
  /** @deprecated use `MessagesType$outboundSchema` instead. */
  export const outboundSchema = MessagesType$outboundSchema;
}

/** @internal */
export const MessagesFunction$inboundSchema: z.ZodType<
  MessagesFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type MessagesFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const MessagesFunction$outboundSchema: z.ZodType<
  MessagesFunction$Outbound,
  z.ZodTypeDef,
  MessagesFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesFunction$ {
  /** @deprecated use `MessagesFunction$inboundSchema` instead. */
  export const inboundSchema = MessagesFunction$inboundSchema;
  /** @deprecated use `MessagesFunction$outboundSchema` instead. */
  export const outboundSchema = MessagesFunction$outboundSchema;
  /** @deprecated use `MessagesFunction$Outbound` instead. */
  export type Outbound = MessagesFunction$Outbound;
}

/** @internal */
export const MessagesToolCalls$inboundSchema: z.ZodType<
  MessagesToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: MessagesType$inboundSchema,
  function: z.lazy(() => MessagesFunction$inboundSchema),
});

/** @internal */
export type MessagesToolCalls$Outbound = {
  id: string;
  type: string;
  function: MessagesFunction$Outbound;
};

/** @internal */
export const MessagesToolCalls$outboundSchema: z.ZodType<
  MessagesToolCalls$Outbound,
  z.ZodTypeDef,
  MessagesToolCalls
> = z.object({
  id: z.string(),
  type: MessagesType$outboundSchema,
  function: z.lazy(() => MessagesFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesToolCalls$ {
  /** @deprecated use `MessagesToolCalls$inboundSchema` instead. */
  export const inboundSchema = MessagesToolCalls$inboundSchema;
  /** @deprecated use `MessagesToolCalls$outboundSchema` instead. */
  export const outboundSchema = MessagesToolCalls$outboundSchema;
  /** @deprecated use `MessagesToolCalls$Outbound` instead. */
  export type Outbound = MessagesToolCalls$Outbound;
}

/** @internal */
export const Messages3$inboundSchema: z.ZodType<
  Messages3,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: CreateChatCompletionsMessagesRouterChatCompletionsRole$inboundSchema,
  content: z.union([z.string(), z.array(z.any())]).optional(),
  refusal: z.nullable(z.string()).optional(),
  tool_calls: z.array(z.lazy(() => MessagesToolCalls$inboundSchema)),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type Messages3$Outbound = {
  role: string;
  content?: string | Array<any> | undefined;
  refusal?: string | null | undefined;
  tool_calls: Array<MessagesToolCalls$Outbound>;
  name?: string | undefined;
};

/** @internal */
export const Messages3$outboundSchema: z.ZodType<
  Messages3$Outbound,
  z.ZodTypeDef,
  Messages3
> = z.object({
  role: CreateChatCompletionsMessagesRouterChatCompletionsRole$outboundSchema,
  content: z.union([z.string(), z.array(z.any())]).optional(),
  refusal: z.nullable(z.string()).optional(),
  toolCalls: z.array(z.lazy(() => MessagesToolCalls$outboundSchema)),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages3$ {
  /** @deprecated use `Messages3$inboundSchema` instead. */
  export const inboundSchema = Messages3$inboundSchema;
  /** @deprecated use `Messages3$outboundSchema` instead. */
  export const outboundSchema = Messages3$outboundSchema;
  /** @deprecated use `Messages3$Outbound` instead. */
  export type Outbound = Messages3$Outbound;
}

/** @internal */
export const CreateChatCompletionsMessagesRole$inboundSchema: z.ZodNativeEnum<
  typeof CreateChatCompletionsMessagesRole
> = z.nativeEnum(CreateChatCompletionsMessagesRole);

/** @internal */
export const CreateChatCompletionsMessagesRole$outboundSchema: z.ZodNativeEnum<
  typeof CreateChatCompletionsMessagesRole
> = CreateChatCompletionsMessagesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsMessagesRole$ {
  /** @deprecated use `CreateChatCompletionsMessagesRole$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletionsMessagesRole$inboundSchema;
  /** @deprecated use `CreateChatCompletionsMessagesRole$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsMessagesRole$outboundSchema;
}

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType
  > = z.nativeEnum(
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType,
  );

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType
  > =
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType$ {
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const TwoDetail$inboundSchema: z.ZodNativeEnum<typeof TwoDetail> = z
  .nativeEnum(TwoDetail);

/** @internal */
export const TwoDetail$outboundSchema: z.ZodNativeEnum<typeof TwoDetail> =
  TwoDetail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TwoDetail$ {
  /** @deprecated use `TwoDetail$inboundSchema` instead. */
  export const inboundSchema = TwoDetail$inboundSchema;
  /** @deprecated use `TwoDetail$outboundSchema` instead. */
  export const outboundSchema = TwoDetail$outboundSchema;
}

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsImageUrl$inboundSchema:
  z.ZodType<
    CreateChatCompletions2RouterChatCompletionsImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    url: z.string(),
    detail: TwoDetail$inboundSchema.optional(),
  });

/** @internal */
export type CreateChatCompletions2RouterChatCompletionsImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsImageUrl$outboundSchema:
  z.ZodType<
    CreateChatCompletions2RouterChatCompletionsImageUrl$Outbound,
    z.ZodTypeDef,
    CreateChatCompletions2RouterChatCompletionsImageUrl
  > = z.object({
    url: z.string(),
    detail: TwoDetail$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2RouterChatCompletionsImageUrl$ {
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletions2RouterChatCompletionsImageUrl$inboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletions2RouterChatCompletionsImageUrl$outboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsImageUrl$Outbound` instead. */
  export type Outbound =
    CreateChatCompletions2RouterChatCompletionsImageUrl$Outbound;
}

/** @internal */
export const CreateChatCompletions2RouterChatCompletions2$inboundSchema:
  z.ZodType<
    CreateChatCompletions2RouterChatCompletions2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType$inboundSchema,
    image_url: z.lazy(() =>
      CreateChatCompletions2RouterChatCompletionsImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type CreateChatCompletions2RouterChatCompletions2$Outbound = {
  type: string;
  image_url: CreateChatCompletions2RouterChatCompletionsImageUrl$Outbound;
};

/** @internal */
export const CreateChatCompletions2RouterChatCompletions2$outboundSchema:
  z.ZodType<
    CreateChatCompletions2RouterChatCompletions2$Outbound,
    z.ZodTypeDef,
    CreateChatCompletions2RouterChatCompletions2
  > = z.object({
    type:
      CreateChatCompletions2RouterChatCompletionsRequestRequestBodyType$outboundSchema,
    imageUrl: z.lazy(() =>
      CreateChatCompletions2RouterChatCompletionsImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2RouterChatCompletions2$ {
  /** @deprecated use `CreateChatCompletions2RouterChatCompletions2$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletions2RouterChatCompletions2$inboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletions2$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletions2RouterChatCompletions2$outboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletions2$Outbound` instead. */
  export type Outbound = CreateChatCompletions2RouterChatCompletions2$Outbound;
}

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequestType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateChatCompletions2RouterChatCompletionsRequestType
  > = z.nativeEnum(CreateChatCompletions2RouterChatCompletionsRequestType);

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsRequestType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateChatCompletions2RouterChatCompletionsRequestType
  > = CreateChatCompletions2RouterChatCompletionsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2RouterChatCompletionsRequestType$ {
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequestType$inboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletions2RouterChatCompletionsRequestType$outboundSchema;
}

/** @internal */
export const CreateChatCompletions2RouterChatCompletions1$inboundSchema:
  z.ZodType<
    CreateChatCompletions2RouterChatCompletions1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: CreateChatCompletions2RouterChatCompletionsRequestType$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type CreateChatCompletions2RouterChatCompletions1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreateChatCompletions2RouterChatCompletions1$outboundSchema:
  z.ZodType<
    CreateChatCompletions2RouterChatCompletions1$Outbound,
    z.ZodTypeDef,
    CreateChatCompletions2RouterChatCompletions1
  > = z.object({
    type: CreateChatCompletions2RouterChatCompletionsRequestType$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2RouterChatCompletions1$ {
  /** @deprecated use `CreateChatCompletions2RouterChatCompletions1$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletions2RouterChatCompletions1$inboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletions1$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletions2RouterChatCompletions1$outboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletions1$Outbound` instead. */
  export type Outbound = CreateChatCompletions2RouterChatCompletions1$Outbound;
}

/** @internal */
export const CreateChatCompletionsContentRouterChatCompletions2$inboundSchema:
  z.ZodType<
    CreateChatCompletionsContentRouterChatCompletions2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => CreateChatCompletions2RouterChatCompletions1$inboundSchema),
    z.lazy(() => CreateChatCompletions2RouterChatCompletions2$inboundSchema),
  ]);

/** @internal */
export type CreateChatCompletionsContentRouterChatCompletions2$Outbound =
  | CreateChatCompletions2RouterChatCompletions1$Outbound
  | CreateChatCompletions2RouterChatCompletions2$Outbound;

/** @internal */
export const CreateChatCompletionsContentRouterChatCompletions2$outboundSchema:
  z.ZodType<
    CreateChatCompletionsContentRouterChatCompletions2$Outbound,
    z.ZodTypeDef,
    CreateChatCompletionsContentRouterChatCompletions2
  > = z.union([
    z.lazy(() => CreateChatCompletions2RouterChatCompletions1$outboundSchema),
    z.lazy(() => CreateChatCompletions2RouterChatCompletions2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsContentRouterChatCompletions2$ {
  /** @deprecated use `CreateChatCompletionsContentRouterChatCompletions2$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsContentRouterChatCompletions2$inboundSchema;
  /** @deprecated use `CreateChatCompletionsContentRouterChatCompletions2$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsContentRouterChatCompletions2$outboundSchema;
  /** @deprecated use `CreateChatCompletionsContentRouterChatCompletions2$Outbound` instead. */
  export type Outbound =
    CreateChatCompletionsContentRouterChatCompletions2$Outbound;
}

/** @internal */
export const CreateChatCompletionsMessagesContent$inboundSchema: z.ZodType<
  CreateChatCompletionsMessagesContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreateChatCompletions2RouterChatCompletions1$inboundSchema),
    z.lazy(() => CreateChatCompletions2RouterChatCompletions2$inboundSchema),
  ])),
]);

/** @internal */
export type CreateChatCompletionsMessagesContent$Outbound =
  | string
  | Array<
    | CreateChatCompletions2RouterChatCompletions1$Outbound
    | CreateChatCompletions2RouterChatCompletions2$Outbound
  >;

/** @internal */
export const CreateChatCompletionsMessagesContent$outboundSchema: z.ZodType<
  CreateChatCompletionsMessagesContent$Outbound,
  z.ZodTypeDef,
  CreateChatCompletionsMessagesContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreateChatCompletions2RouterChatCompletions1$outboundSchema),
    z.lazy(() => CreateChatCompletions2RouterChatCompletions2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsMessagesContent$ {
  /** @deprecated use `CreateChatCompletionsMessagesContent$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsMessagesContent$inboundSchema;
  /** @deprecated use `CreateChatCompletionsMessagesContent$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsMessagesContent$outboundSchema;
  /** @deprecated use `CreateChatCompletionsMessagesContent$Outbound` instead. */
  export type Outbound = CreateChatCompletionsMessagesContent$Outbound;
}

/** @internal */
export const Messages2$inboundSchema: z.ZodType<
  Messages2,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: CreateChatCompletionsMessagesRole$inboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreateChatCompletions2RouterChatCompletions1$inboundSchema),
      z.lazy(() =>
        CreateChatCompletions2RouterChatCompletions2$inboundSchema
      ),
    ])),
  ]),
});

/** @internal */
export type Messages2$Outbound = {
  role: string;
  name?: string | undefined;
  content:
    | string
    | Array<
      | CreateChatCompletions2RouterChatCompletions1$Outbound
      | CreateChatCompletions2RouterChatCompletions2$Outbound
    >;
};

/** @internal */
export const Messages2$outboundSchema: z.ZodType<
  Messages2$Outbound,
  z.ZodTypeDef,
  Messages2
> = z.object({
  role: CreateChatCompletionsMessagesRole$outboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreateChatCompletions2RouterChatCompletions1$outboundSchema),
      z.lazy(() =>
        CreateChatCompletions2RouterChatCompletions2$outboundSchema
      ),
    ])),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages2$ {
  /** @deprecated use `Messages2$inboundSchema` instead. */
  export const inboundSchema = Messages2$inboundSchema;
  /** @deprecated use `Messages2$outboundSchema` instead. */
  export const outboundSchema = Messages2$outboundSchema;
  /** @deprecated use `Messages2$Outbound` instead. */
  export type Outbound = Messages2$Outbound;
}

/** @internal */
export const MessagesRole$inboundSchema: z.ZodNativeEnum<typeof MessagesRole> =
  z.nativeEnum(MessagesRole);

/** @internal */
export const MessagesRole$outboundSchema: z.ZodNativeEnum<typeof MessagesRole> =
  MessagesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesRole$ {
  /** @deprecated use `MessagesRole$inboundSchema` instead. */
  export const inboundSchema = MessagesRole$inboundSchema;
  /** @deprecated use `MessagesRole$outboundSchema` instead. */
  export const outboundSchema = MessagesRole$outboundSchema;
}

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsType$inboundSchema:
  z.ZodNativeEnum<typeof CreateChatCompletions2RouterChatCompletionsType> = z
    .nativeEnum(CreateChatCompletions2RouterChatCompletionsType);

/** @internal */
export const CreateChatCompletions2RouterChatCompletionsType$outboundSchema:
  z.ZodNativeEnum<typeof CreateChatCompletions2RouterChatCompletionsType> =
    CreateChatCompletions2RouterChatCompletionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2RouterChatCompletionsType$ {
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsType$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletions2RouterChatCompletionsType$inboundSchema;
  /** @deprecated use `CreateChatCompletions2RouterChatCompletionsType$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletions2RouterChatCompletionsType$outboundSchema;
}

/** @internal */
export const Detail$inboundSchema: z.ZodNativeEnum<typeof Detail> = z
  .nativeEnum(Detail);

/** @internal */
export const Detail$outboundSchema: z.ZodNativeEnum<typeof Detail> =
  Detail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Detail$ {
  /** @deprecated use `Detail$inboundSchema` instead. */
  export const inboundSchema = Detail$inboundSchema;
  /** @deprecated use `Detail$outboundSchema` instead. */
  export const outboundSchema = Detail$outboundSchema;
}

/** @internal */
export const CreateChatCompletions2ImageUrl$inboundSchema: z.ZodType<
  CreateChatCompletions2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: Detail$inboundSchema.optional(),
});

/** @internal */
export type CreateChatCompletions2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const CreateChatCompletions2ImageUrl$outboundSchema: z.ZodType<
  CreateChatCompletions2ImageUrl$Outbound,
  z.ZodTypeDef,
  CreateChatCompletions2ImageUrl
> = z.object({
  url: z.string(),
  detail: Detail$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2ImageUrl$ {
  /** @deprecated use `CreateChatCompletions2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletions2ImageUrl$inboundSchema;
  /** @deprecated use `CreateChatCompletions2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = CreateChatCompletions2ImageUrl$outboundSchema;
  /** @deprecated use `CreateChatCompletions2ImageUrl$Outbound` instead. */
  export type Outbound = CreateChatCompletions2ImageUrl$Outbound;
}

/** @internal */
export const CreateChatCompletions22$inboundSchema: z.ZodType<
  CreateChatCompletions22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateChatCompletions2RouterChatCompletionsType$inboundSchema,
  image_url: z.lazy(() => CreateChatCompletions2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type CreateChatCompletions22$Outbound = {
  type: string;
  image_url: CreateChatCompletions2ImageUrl$Outbound;
};

/** @internal */
export const CreateChatCompletions22$outboundSchema: z.ZodType<
  CreateChatCompletions22$Outbound,
  z.ZodTypeDef,
  CreateChatCompletions22
> = z.object({
  type: CreateChatCompletions2RouterChatCompletionsType$outboundSchema,
  imageUrl: z.lazy(() => CreateChatCompletions2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions22$ {
  /** @deprecated use `CreateChatCompletions22$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletions22$inboundSchema;
  /** @deprecated use `CreateChatCompletions22$outboundSchema` instead. */
  export const outboundSchema = CreateChatCompletions22$outboundSchema;
  /** @deprecated use `CreateChatCompletions22$Outbound` instead. */
  export type Outbound = CreateChatCompletions22$Outbound;
}

/** @internal */
export const CreateChatCompletions2Type$inboundSchema: z.ZodNativeEnum<
  typeof CreateChatCompletions2Type
> = z.nativeEnum(CreateChatCompletions2Type);

/** @internal */
export const CreateChatCompletions2Type$outboundSchema: z.ZodNativeEnum<
  typeof CreateChatCompletions2Type
> = CreateChatCompletions2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions2Type$ {
  /** @deprecated use `CreateChatCompletions2Type$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletions2Type$inboundSchema;
  /** @deprecated use `CreateChatCompletions2Type$outboundSchema` instead. */
  export const outboundSchema = CreateChatCompletions2Type$outboundSchema;
}

/** @internal */
export const CreateChatCompletions21$inboundSchema: z.ZodType<
  CreateChatCompletions21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateChatCompletions2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreateChatCompletions21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreateChatCompletions21$outboundSchema: z.ZodType<
  CreateChatCompletions21$Outbound,
  z.ZodTypeDef,
  CreateChatCompletions21
> = z.object({
  type: CreateChatCompletions2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletions21$ {
  /** @deprecated use `CreateChatCompletions21$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletions21$inboundSchema;
  /** @deprecated use `CreateChatCompletions21$outboundSchema` instead. */
  export const outboundSchema = CreateChatCompletions21$outboundSchema;
  /** @deprecated use `CreateChatCompletions21$Outbound` instead. */
  export type Outbound = CreateChatCompletions21$Outbound;
}

/** @internal */
export const CreateChatCompletionsContent2$inboundSchema: z.ZodType<
  CreateChatCompletionsContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateChatCompletions21$inboundSchema),
  z.lazy(() => CreateChatCompletions22$inboundSchema),
]);

/** @internal */
export type CreateChatCompletionsContent2$Outbound =
  | CreateChatCompletions21$Outbound
  | CreateChatCompletions22$Outbound;

/** @internal */
export const CreateChatCompletionsContent2$outboundSchema: z.ZodType<
  CreateChatCompletionsContent2$Outbound,
  z.ZodTypeDef,
  CreateChatCompletionsContent2
> = z.union([
  z.lazy(() => CreateChatCompletions21$outboundSchema),
  z.lazy(() => CreateChatCompletions22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsContent2$ {
  /** @deprecated use `CreateChatCompletionsContent2$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletionsContent2$inboundSchema;
  /** @deprecated use `CreateChatCompletionsContent2$outboundSchema` instead. */
  export const outboundSchema = CreateChatCompletionsContent2$outboundSchema;
  /** @deprecated use `CreateChatCompletionsContent2$Outbound` instead. */
  export type Outbound = CreateChatCompletionsContent2$Outbound;
}

/** @internal */
export const MessagesContent$inboundSchema: z.ZodType<
  MessagesContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreateChatCompletions21$inboundSchema),
    z.lazy(() => CreateChatCompletions22$inboundSchema),
  ])),
]);

/** @internal */
export type MessagesContent$Outbound =
  | string
  | Array<CreateChatCompletions21$Outbound | CreateChatCompletions22$Outbound>;

/** @internal */
export const MessagesContent$outboundSchema: z.ZodType<
  MessagesContent$Outbound,
  z.ZodTypeDef,
  MessagesContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreateChatCompletions21$outboundSchema),
    z.lazy(() => CreateChatCompletions22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesContent$ {
  /** @deprecated use `MessagesContent$inboundSchema` instead. */
  export const inboundSchema = MessagesContent$inboundSchema;
  /** @deprecated use `MessagesContent$outboundSchema` instead. */
  export const outboundSchema = MessagesContent$outboundSchema;
  /** @deprecated use `MessagesContent$Outbound` instead. */
  export type Outbound = MessagesContent$Outbound;
}

/** @internal */
export const Messages1$inboundSchema: z.ZodType<
  Messages1,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: MessagesRole$inboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreateChatCompletions21$inboundSchema),
      z.lazy(() => CreateChatCompletions22$inboundSchema),
    ])),
  ]),
});

/** @internal */
export type Messages1$Outbound = {
  role: string;
  name?: string | undefined;
  content:
    | string
    | Array<
      CreateChatCompletions21$Outbound | CreateChatCompletions22$Outbound
    >;
};

/** @internal */
export const Messages1$outboundSchema: z.ZodType<
  Messages1$Outbound,
  z.ZodTypeDef,
  Messages1
> = z.object({
  role: MessagesRole$outboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreateChatCompletions21$outboundSchema),
      z.lazy(() => CreateChatCompletions22$outboundSchema),
    ])),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages1$ {
  /** @deprecated use `Messages1$inboundSchema` instead. */
  export const inboundSchema = Messages1$inboundSchema;
  /** @deprecated use `Messages1$outboundSchema` instead. */
  export const outboundSchema = Messages1$outboundSchema;
  /** @deprecated use `Messages1$Outbound` instead. */
  export type Outbound = Messages1$Outbound;
}

/** @internal */
export const CreateChatCompletionsMessages$inboundSchema: z.ZodType<
  CreateChatCompletionsMessages,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Messages1$inboundSchema),
  z.lazy(() => Messages2$inboundSchema),
  z.lazy(() => Four$inboundSchema),
  z.lazy(() => Messages3$inboundSchema),
]);

/** @internal */
export type CreateChatCompletionsMessages$Outbound =
  | Messages1$Outbound
  | Messages2$Outbound
  | Four$Outbound
  | Messages3$Outbound;

/** @internal */
export const CreateChatCompletionsMessages$outboundSchema: z.ZodType<
  CreateChatCompletionsMessages$Outbound,
  z.ZodTypeDef,
  CreateChatCompletionsMessages
> = z.union([
  z.lazy(() => Messages1$outboundSchema),
  z.lazy(() => Messages2$outboundSchema),
  z.lazy(() => Four$outboundSchema),
  z.lazy(() => Messages3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsMessages$ {
  /** @deprecated use `CreateChatCompletionsMessages$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletionsMessages$inboundSchema;
  /** @deprecated use `CreateChatCompletionsMessages$outboundSchema` instead. */
  export const outboundSchema = CreateChatCompletionsMessages$outboundSchema;
  /** @deprecated use `CreateChatCompletionsMessages$Outbound` instead. */
  export type Outbound = CreateChatCompletionsMessages$Outbound;
}

/** @internal */
export const CreateChatCompletionsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateChatCompletionsType
> = z.nativeEnum(CreateChatCompletionsType);

/** @internal */
export const CreateChatCompletionsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateChatCompletionsType
> = CreateChatCompletionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsType$ {
  /** @deprecated use `CreateChatCompletionsType$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletionsType$inboundSchema;
  /** @deprecated use `CreateChatCompletionsType$outboundSchema` instead. */
  export const outboundSchema = CreateChatCompletionsType$outboundSchema;
}

/** @internal */
export const CreateChatCompletionsRouterChatCompletionsType$inboundSchema:
  z.ZodNativeEnum<typeof CreateChatCompletionsRouterChatCompletionsType> = z
    .nativeEnum(CreateChatCompletionsRouterChatCompletionsType);

/** @internal */
export const CreateChatCompletionsRouterChatCompletionsType$outboundSchema:
  z.ZodNativeEnum<typeof CreateChatCompletionsRouterChatCompletionsType> =
    CreateChatCompletionsRouterChatCompletionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsRouterChatCompletionsType$ {
  /** @deprecated use `CreateChatCompletionsRouterChatCompletionsType$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsRouterChatCompletionsType$inboundSchema;
  /** @deprecated use `CreateChatCompletionsRouterChatCompletionsType$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsRouterChatCompletionsType$outboundSchema;
}

/** @internal */
export const ParametersT$inboundSchema: z.ZodType<
  ParametersT,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateChatCompletionsRouterChatCompletionsType$inboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
});

/** @internal */
export type ParametersT$Outbound = {
  type: string;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
};

/** @internal */
export const ParametersT$outboundSchema: z.ZodType<
  ParametersT$Outbound,
  z.ZodTypeDef,
  ParametersT
> = z.object({
  type: CreateChatCompletionsRouterChatCompletionsType$outboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParametersT$ {
  /** @deprecated use `ParametersT$inboundSchema` instead. */
  export const inboundSchema = ParametersT$inboundSchema;
  /** @deprecated use `ParametersT$outboundSchema` instead. */
  export const outboundSchema = ParametersT$outboundSchema;
  /** @deprecated use `ParametersT$Outbound` instead. */
  export type Outbound = ParametersT$Outbound;
}

/** @internal */
export const CreateChatCompletionsFunction$inboundSchema: z.ZodType<
  CreateChatCompletionsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.lazy(() => ParametersT$inboundSchema).optional(),
  strict: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type CreateChatCompletionsFunction$Outbound = {
  name: string;
  description?: string | undefined;
  parameters?: ParametersT$Outbound | undefined;
  strict: boolean | null;
};

/** @internal */
export const CreateChatCompletionsFunction$outboundSchema: z.ZodType<
  CreateChatCompletionsFunction$Outbound,
  z.ZodTypeDef,
  CreateChatCompletionsFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.lazy(() => ParametersT$outboundSchema).optional(),
  strict: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsFunction$ {
  /** @deprecated use `CreateChatCompletionsFunction$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletionsFunction$inboundSchema;
  /** @deprecated use `CreateChatCompletionsFunction$outboundSchema` instead. */
  export const outboundSchema = CreateChatCompletionsFunction$outboundSchema;
  /** @deprecated use `CreateChatCompletionsFunction$Outbound` instead. */
  export type Outbound = CreateChatCompletionsFunction$Outbound;
}

/** @internal */
export const Tools$inboundSchema: z.ZodType<Tools, z.ZodTypeDef, unknown> = z
  .object({
    type: CreateChatCompletionsType$inboundSchema,
    function: z.lazy(() => CreateChatCompletionsFunction$inboundSchema),
  });

/** @internal */
export type Tools$Outbound = {
  type: string;
  function: CreateChatCompletionsFunction$Outbound;
};

/** @internal */
export const Tools$outboundSchema: z.ZodType<
  Tools$Outbound,
  z.ZodTypeDef,
  Tools
> = z.object({
  type: CreateChatCompletionsType$outboundSchema,
  function: z.lazy(() => CreateChatCompletionsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools$ {
  /** @deprecated use `Tools$inboundSchema` instead. */
  export const inboundSchema = Tools$inboundSchema;
  /** @deprecated use `Tools$outboundSchema` instead. */
  export const outboundSchema = Tools$outboundSchema;
  /** @deprecated use `Tools$Outbound` instead. */
  export type Outbound = Tools$Outbound;
}

/** @internal */
export const CreateChatCompletionsRequestBody$inboundSchema: z.ZodType<
  CreateChatCompletionsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  messages: z.array(
    z.union([
      z.lazy(() => Messages1$inboundSchema),
      z.lazy(() => Messages2$inboundSchema),
      z.lazy(() => Four$inboundSchema),
      z.lazy(() => Messages3$inboundSchema),
    ]),
  ),
  frequency_penalty: z.nullable(z.number().default(0)),
  max_tokens: z.nullable(z.number()).optional(),
  presence_penalty: z.nullable(z.number().default(0)),
  seed: z.nullable(z.number()).optional(),
  stream: z.nullable(z.boolean().default(false)),
  temperature: z.nullable(z.number().default(1)),
  top_p: z.nullable(z.number().default(1)),
  tools: z.array(z.lazy(() => Tools$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "frequency_penalty": "frequencyPenalty",
    "max_tokens": "maxTokens",
    "presence_penalty": "presencePenalty",
    "top_p": "topP",
  });
});

/** @internal */
export type CreateChatCompletionsRequestBody$Outbound = {
  model: string;
  messages: Array<
    Messages1$Outbound | Messages2$Outbound | Four$Outbound | Messages3$Outbound
  >;
  frequency_penalty: number | null;
  max_tokens?: number | null | undefined;
  presence_penalty: number | null;
  seed?: number | null | undefined;
  stream: boolean | null;
  temperature: number | null;
  top_p: number | null;
  tools?: Array<Tools$Outbound> | undefined;
};

/** @internal */
export const CreateChatCompletionsRequestBody$outboundSchema: z.ZodType<
  CreateChatCompletionsRequestBody$Outbound,
  z.ZodTypeDef,
  CreateChatCompletionsRequestBody
> = z.object({
  model: z.string(),
  messages: z.array(
    z.union([
      z.lazy(() => Messages1$outboundSchema),
      z.lazy(() => Messages2$outboundSchema),
      z.lazy(() => Four$outboundSchema),
      z.lazy(() => Messages3$outboundSchema),
    ]),
  ),
  frequencyPenalty: z.nullable(z.number().default(0)),
  maxTokens: z.nullable(z.number()).optional(),
  presencePenalty: z.nullable(z.number().default(0)),
  seed: z.nullable(z.number()).optional(),
  stream: z.nullable(z.boolean().default(false)),
  temperature: z.nullable(z.number().default(1)),
  topP: z.nullable(z.number().default(1)),
  tools: z.array(z.lazy(() => Tools$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    frequencyPenalty: "frequency_penalty",
    maxTokens: "max_tokens",
    presencePenalty: "presence_penalty",
    topP: "top_p",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsRequestBody$ {
  /** @deprecated use `CreateChatCompletionsRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletionsRequestBody$inboundSchema;
  /** @deprecated use `CreateChatCompletionsRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateChatCompletionsRequestBody$outboundSchema;
  /** @deprecated use `CreateChatCompletionsRequestBody$Outbound` instead. */
  export type Outbound = CreateChatCompletionsRequestBody$Outbound;
}

/** @internal */
export const CreateChatCompletionsRouterChatCompletionsResponseBody$inboundSchema:
  z.ZodType<
    CreateChatCompletionsRouterChatCompletionsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.string(),
    event: z.string().optional(),
    id: z.string().optional(),
    retry: z.number().int().optional(),
  });

/** @internal */
export type CreateChatCompletionsRouterChatCompletionsResponseBody$Outbound = {
  data: string;
  event?: string | undefined;
  id?: string | undefined;
  retry?: number | undefined;
};

/** @internal */
export const CreateChatCompletionsRouterChatCompletionsResponseBody$outboundSchema:
  z.ZodType<
    CreateChatCompletionsRouterChatCompletionsResponseBody$Outbound,
    z.ZodTypeDef,
    CreateChatCompletionsRouterChatCompletionsResponseBody
  > = z.object({
    data: z.string(),
    event: z.string().optional(),
    id: z.string().optional(),
    retry: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsRouterChatCompletionsResponseBody$ {
  /** @deprecated use `CreateChatCompletionsRouterChatCompletionsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsRouterChatCompletionsResponseBody$inboundSchema;
  /** @deprecated use `CreateChatCompletionsRouterChatCompletionsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsRouterChatCompletionsResponseBody$outboundSchema;
  /** @deprecated use `CreateChatCompletionsRouterChatCompletionsResponseBody$Outbound` instead. */
  export type Outbound =
    CreateChatCompletionsRouterChatCompletionsResponseBody$Outbound;
}

/** @internal */
export const ResponseBodyFinishReason$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFinishReason
> = z.nativeEnum(ResponseBodyFinishReason);

/** @internal */
export const ResponseBodyFinishReason$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFinishReason
> = ResponseBodyFinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFinishReason$ {
  /** @deprecated use `ResponseBodyFinishReason$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFinishReason$inboundSchema;
  /** @deprecated use `ResponseBodyFinishReason$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFinishReason$outboundSchema;
}

/** @internal */
export const CreateChatCompletionsResponseBodyTopLogprobs$inboundSchema:
  z.ZodType<
    CreateChatCompletionsResponseBodyTopLogprobs,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
  });

/** @internal */
export type CreateChatCompletionsResponseBodyTopLogprobs$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

/** @internal */
export const CreateChatCompletionsResponseBodyTopLogprobs$outboundSchema:
  z.ZodType<
    CreateChatCompletionsResponseBodyTopLogprobs$Outbound,
    z.ZodTypeDef,
    CreateChatCompletionsResponseBodyTopLogprobs
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsResponseBodyTopLogprobs$ {
  /** @deprecated use `CreateChatCompletionsResponseBodyTopLogprobs$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsResponseBodyTopLogprobs$inboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyTopLogprobs$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsResponseBodyTopLogprobs$outboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyTopLogprobs$Outbound` instead. */
  export type Outbound = CreateChatCompletionsResponseBodyTopLogprobs$Outbound;
}

/** @internal */
export const CreateChatCompletionsResponseBodyContent$inboundSchema: z.ZodType<
  CreateChatCompletionsResponseBodyContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  top_logprobs: z.array(
    z.lazy(() => CreateChatCompletionsResponseBodyTopLogprobs$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type CreateChatCompletionsResponseBodyContent$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<CreateChatCompletionsResponseBodyTopLogprobs$Outbound>;
};

/** @internal */
export const CreateChatCompletionsResponseBodyContent$outboundSchema: z.ZodType<
  CreateChatCompletionsResponseBodyContent$Outbound,
  z.ZodTypeDef,
  CreateChatCompletionsResponseBodyContent
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  topLogprobs: z.array(
    z.lazy(() => CreateChatCompletionsResponseBodyTopLogprobs$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsResponseBodyContent$ {
  /** @deprecated use `CreateChatCompletionsResponseBodyContent$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsResponseBodyContent$inboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyContent$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsResponseBodyContent$outboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyContent$Outbound` instead. */
  export type Outbound = CreateChatCompletionsResponseBodyContent$Outbound;
}

/** @internal */
export const CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$inboundSchema:
  z.ZodType<
    CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
  });

/** @internal */
export type CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$Outbound =
  {
    token: string;
    logprob: number;
    bytes: Array<number> | null;
  };

/** @internal */
export const CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$outboundSchema:
  z.ZodType<
    CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$Outbound,
    z.ZodTypeDef,
    CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$ {
  /** @deprecated use `CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$inboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$outboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$Outbound` instead. */
  export type Outbound =
    CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$Outbound;
}

/** @internal */
export const ResponseBodyRefusal$inboundSchema: z.ZodType<
  ResponseBodyRefusal,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  top_logprobs: z.array(
    z.lazy(() =>
      CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$inboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type ResponseBodyRefusal$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<
    CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$Outbound
  >;
};

/** @internal */
export const ResponseBodyRefusal$outboundSchema: z.ZodType<
  ResponseBodyRefusal$Outbound,
  z.ZodTypeDef,
  ResponseBodyRefusal
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  topLogprobs: z.array(
    z.lazy(() =>
      CreateChatCompletionsResponseBodyRouterChatCompletionsTopLogprobs$outboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRefusal$ {
  /** @deprecated use `ResponseBodyRefusal$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRefusal$inboundSchema;
  /** @deprecated use `ResponseBodyRefusal$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRefusal$outboundSchema;
  /** @deprecated use `ResponseBodyRefusal$Outbound` instead. */
  export type Outbound = ResponseBodyRefusal$Outbound;
}

/** @internal */
export const ResponseBodyLogprobs$inboundSchema: z.ZodType<
  ResponseBodyLogprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(
    z.array(
      z.lazy(() => CreateChatCompletionsResponseBodyContent$inboundSchema),
    ),
  ),
  refusal: z.nullable(z.array(z.lazy(() => ResponseBodyRefusal$inboundSchema))),
});

/** @internal */
export type ResponseBodyLogprobs$Outbound = {
  content: Array<CreateChatCompletionsResponseBodyContent$Outbound> | null;
  refusal: Array<ResponseBodyRefusal$Outbound> | null;
};

/** @internal */
export const ResponseBodyLogprobs$outboundSchema: z.ZodType<
  ResponseBodyLogprobs$Outbound,
  z.ZodTypeDef,
  ResponseBodyLogprobs
> = z.object({
  content: z.nullable(
    z.array(
      z.lazy(() => CreateChatCompletionsResponseBodyContent$outboundSchema),
    ),
  ),
  refusal: z.nullable(
    z.array(z.lazy(() => ResponseBodyRefusal$outboundSchema)),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyLogprobs$ {
  /** @deprecated use `ResponseBodyLogprobs$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyLogprobs$inboundSchema;
  /** @deprecated use `ResponseBodyLogprobs$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyLogprobs$outboundSchema;
  /** @deprecated use `ResponseBodyLogprobs$Outbound` instead. */
  export type Outbound = ResponseBodyLogprobs$Outbound;
}

/** @internal */
export const CreateChatCompletionsResponseBodyType$inboundSchema:
  z.ZodNativeEnum<typeof CreateChatCompletionsResponseBodyType> = z.nativeEnum(
    CreateChatCompletionsResponseBodyType,
  );

/** @internal */
export const CreateChatCompletionsResponseBodyType$outboundSchema:
  z.ZodNativeEnum<typeof CreateChatCompletionsResponseBodyType> =
    CreateChatCompletionsResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsResponseBodyType$ {
  /** @deprecated use `CreateChatCompletionsResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsResponseBodyType$inboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsResponseBodyType$outboundSchema;
}

/** @internal */
export const CreateChatCompletionsResponseBodyFunction$inboundSchema: z.ZodType<
  CreateChatCompletionsResponseBodyFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type CreateChatCompletionsResponseBodyFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const CreateChatCompletionsResponseBodyFunction$outboundSchema:
  z.ZodType<
    CreateChatCompletionsResponseBodyFunction$Outbound,
    z.ZodTypeDef,
    CreateChatCompletionsResponseBodyFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsResponseBodyFunction$ {
  /** @deprecated use `CreateChatCompletionsResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsResponseBodyFunction$inboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsResponseBodyFunction$outboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyFunction$Outbound` instead. */
  export type Outbound = CreateChatCompletionsResponseBodyFunction$Outbound;
}

/** @internal */
export const CreateChatCompletionsResponseBodyToolCalls$inboundSchema:
  z.ZodType<CreateChatCompletionsResponseBodyToolCalls, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string(),
      type: CreateChatCompletionsResponseBodyType$inboundSchema,
      function: z.lazy(() =>
        CreateChatCompletionsResponseBodyFunction$inboundSchema
      ),
    });

/** @internal */
export type CreateChatCompletionsResponseBodyToolCalls$Outbound = {
  id: string;
  type: string;
  function: CreateChatCompletionsResponseBodyFunction$Outbound;
};

/** @internal */
export const CreateChatCompletionsResponseBodyToolCalls$outboundSchema:
  z.ZodType<
    CreateChatCompletionsResponseBodyToolCalls$Outbound,
    z.ZodTypeDef,
    CreateChatCompletionsResponseBodyToolCalls
  > = z.object({
    id: z.string(),
    type: CreateChatCompletionsResponseBodyType$outboundSchema,
    function: z.lazy(() =>
      CreateChatCompletionsResponseBodyFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsResponseBodyToolCalls$ {
  /** @deprecated use `CreateChatCompletionsResponseBodyToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsResponseBodyToolCalls$inboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsResponseBodyToolCalls$outboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyToolCalls$Outbound` instead. */
  export type Outbound = CreateChatCompletionsResponseBodyToolCalls$Outbound;
}

/** @internal */
export const CreateChatCompletionsResponseBodyRole$inboundSchema:
  z.ZodNativeEnum<typeof CreateChatCompletionsResponseBodyRole> = z.nativeEnum(
    CreateChatCompletionsResponseBodyRole,
  );

/** @internal */
export const CreateChatCompletionsResponseBodyRole$outboundSchema:
  z.ZodNativeEnum<typeof CreateChatCompletionsResponseBodyRole> =
    CreateChatCompletionsResponseBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsResponseBodyRole$ {
  /** @deprecated use `CreateChatCompletionsResponseBodyRole$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsResponseBodyRole$inboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyRole$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsResponseBodyRole$outboundSchema;
}

/** @internal */
export const Delta$inboundSchema: z.ZodType<Delta, z.ZodTypeDef, unknown> = z
  .object({
    content: z.nullable(z.string()),
    refusal: z.nullable(z.string()),
    tool_calls: z.array(
      z.lazy(() => CreateChatCompletionsResponseBodyToolCalls$inboundSchema),
    ),
    role: CreateChatCompletionsResponseBodyRole$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type Delta$Outbound = {
  content: string | null;
  refusal: string | null;
  tool_calls: Array<CreateChatCompletionsResponseBodyToolCalls$Outbound>;
  role: string;
};

/** @internal */
export const Delta$outboundSchema: z.ZodType<
  Delta$Outbound,
  z.ZodTypeDef,
  Delta
> = z.object({
  content: z.nullable(z.string()),
  refusal: z.nullable(z.string()),
  toolCalls: z.array(
    z.lazy(() => CreateChatCompletionsResponseBodyToolCalls$outboundSchema),
  ),
  role: CreateChatCompletionsResponseBodyRole$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Delta$ {
  /** @deprecated use `Delta$inboundSchema` instead. */
  export const inboundSchema = Delta$inboundSchema;
  /** @deprecated use `Delta$outboundSchema` instead. */
  export const outboundSchema = Delta$outboundSchema;
  /** @deprecated use `Delta$Outbound` instead. */
  export type Outbound = Delta$Outbound;
}

/** @internal */
export const CreateChatCompletionsResponseBodyChoices$inboundSchema: z.ZodType<
  CreateChatCompletionsResponseBodyChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  finish_reason: ResponseBodyFinishReason$inboundSchema,
  index: z.number(),
  logprobs: z.nullable(z.lazy(() => ResponseBodyLogprobs$inboundSchema)),
  delta: z.lazy(() => Delta$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type CreateChatCompletionsResponseBodyChoices$Outbound = {
  finish_reason: string;
  index: number;
  logprobs: ResponseBodyLogprobs$Outbound | null;
  delta: Delta$Outbound;
};

/** @internal */
export const CreateChatCompletionsResponseBodyChoices$outboundSchema: z.ZodType<
  CreateChatCompletionsResponseBodyChoices$Outbound,
  z.ZodTypeDef,
  CreateChatCompletionsResponseBodyChoices
> = z.object({
  finishReason: ResponseBodyFinishReason$outboundSchema,
  index: z.number(),
  logprobs: z.nullable(z.lazy(() => ResponseBodyLogprobs$outboundSchema)),
  delta: z.lazy(() => Delta$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsResponseBodyChoices$ {
  /** @deprecated use `CreateChatCompletionsResponseBodyChoices$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsResponseBodyChoices$inboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyChoices$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsResponseBodyChoices$outboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyChoices$Outbound` instead. */
  export type Outbound = CreateChatCompletionsResponseBodyChoices$Outbound;
}

/** @internal */
export const CreateChatCompletionsResponseBodyUsage$inboundSchema: z.ZodType<
  CreateChatCompletionsResponseBodyUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  completion_tokens: z.number().optional(),
  prompt_tokens: z.number().optional(),
  total_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "completion_tokens": "completionTokens",
    "prompt_tokens": "promptTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type CreateChatCompletionsResponseBodyUsage$Outbound = {
  completion_tokens?: number | undefined;
  prompt_tokens?: number | undefined;
  total_tokens?: number | undefined;
};

/** @internal */
export const CreateChatCompletionsResponseBodyUsage$outboundSchema: z.ZodType<
  CreateChatCompletionsResponseBodyUsage$Outbound,
  z.ZodTypeDef,
  CreateChatCompletionsResponseBodyUsage
> = z.object({
  completionTokens: z.number().optional(),
  promptTokens: z.number().optional(),
  totalTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    completionTokens: "completion_tokens",
    promptTokens: "prompt_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsResponseBodyUsage$ {
  /** @deprecated use `CreateChatCompletionsResponseBodyUsage$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsResponseBodyUsage$inboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyUsage$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsResponseBodyUsage$outboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyUsage$Outbound` instead. */
  export type Outbound = CreateChatCompletionsResponseBodyUsage$Outbound;
}

/** @internal */
export const ResponseBody2$inboundSchema: z.ZodType<
  ResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  choices: z.array(
    z.lazy(() => CreateChatCompletionsResponseBodyChoices$inboundSchema),
  ),
  created: z.number(),
  model: z.string(),
  system_fingerprint: z.string(),
  object: z.string(),
  usage: z.lazy(() => CreateChatCompletionsResponseBodyUsage$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type ResponseBody2$Outbound = {
  id: string;
  choices: Array<CreateChatCompletionsResponseBodyChoices$Outbound>;
  created: number;
  model: string;
  system_fingerprint: string;
  object: string;
  usage: CreateChatCompletionsResponseBodyUsage$Outbound;
};

/** @internal */
export const ResponseBody2$outboundSchema: z.ZodType<
  ResponseBody2$Outbound,
  z.ZodTypeDef,
  ResponseBody2
> = z.object({
  id: z.string(),
  choices: z.array(
    z.lazy(() => CreateChatCompletionsResponseBodyChoices$outboundSchema),
  ),
  created: z.number(),
  model: z.string(),
  systemFingerprint: z.string(),
  object: z.string(),
  usage: z.lazy(() => CreateChatCompletionsResponseBodyUsage$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody2$ {
  /** @deprecated use `ResponseBody2$inboundSchema` instead. */
  export const inboundSchema = ResponseBody2$inboundSchema;
  /** @deprecated use `ResponseBody2$outboundSchema` instead. */
  export const outboundSchema = ResponseBody2$outboundSchema;
  /** @deprecated use `ResponseBody2$Outbound` instead. */
  export type Outbound = ResponseBody2$Outbound;
}

/** @internal */
export const CreateChatCompletionsResponseBodyFinishReason$inboundSchema:
  z.ZodNativeEnum<typeof CreateChatCompletionsResponseBodyFinishReason> = z
    .nativeEnum(CreateChatCompletionsResponseBodyFinishReason);

/** @internal */
export const CreateChatCompletionsResponseBodyFinishReason$outboundSchema:
  z.ZodNativeEnum<typeof CreateChatCompletionsResponseBodyFinishReason> =
    CreateChatCompletionsResponseBodyFinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsResponseBodyFinishReason$ {
  /** @deprecated use `CreateChatCompletionsResponseBodyFinishReason$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatCompletionsResponseBodyFinishReason$inboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBodyFinishReason$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsResponseBodyFinishReason$outboundSchema;
}

/** @internal */
export const ResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyType
> = z.nativeEnum(ResponseBodyType);

/** @internal */
export const ResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyType
> = ResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyType$ {
  /** @deprecated use `ResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyType$inboundSchema;
  /** @deprecated use `ResponseBodyType$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyType$outboundSchema;
}

/** @internal */
export const ResponseBodyFunction$inboundSchema: z.ZodType<
  ResponseBodyFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type ResponseBodyFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const ResponseBodyFunction$outboundSchema: z.ZodType<
  ResponseBodyFunction$Outbound,
  z.ZodTypeDef,
  ResponseBodyFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFunction$ {
  /** @deprecated use `ResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFunction$inboundSchema;
  /** @deprecated use `ResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFunction$outboundSchema;
  /** @deprecated use `ResponseBodyFunction$Outbound` instead. */
  export type Outbound = ResponseBodyFunction$Outbound;
}

/** @internal */
export const ResponseBodyToolCalls$inboundSchema: z.ZodType<
  ResponseBodyToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: ResponseBodyType$inboundSchema,
  function: z.lazy(() => ResponseBodyFunction$inboundSchema),
});

/** @internal */
export type ResponseBodyToolCalls$Outbound = {
  id: string;
  type: string;
  function: ResponseBodyFunction$Outbound;
};

/** @internal */
export const ResponseBodyToolCalls$outboundSchema: z.ZodType<
  ResponseBodyToolCalls$Outbound,
  z.ZodTypeDef,
  ResponseBodyToolCalls
> = z.object({
  id: z.string(),
  type: ResponseBodyType$outboundSchema,
  function: z.lazy(() => ResponseBodyFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyToolCalls$ {
  /** @deprecated use `ResponseBodyToolCalls$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyToolCalls$inboundSchema;
  /** @deprecated use `ResponseBodyToolCalls$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyToolCalls$outboundSchema;
  /** @deprecated use `ResponseBodyToolCalls$Outbound` instead. */
  export type Outbound = ResponseBodyToolCalls$Outbound;
}

/** @internal */
export const ResponseBodyRole$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyRole
> = z.nativeEnum(ResponseBodyRole);

/** @internal */
export const ResponseBodyRole$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyRole
> = ResponseBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRole$ {
  /** @deprecated use `ResponseBodyRole$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRole$inboundSchema;
  /** @deprecated use `ResponseBodyRole$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRole$outboundSchema;
}

/** @internal */
export const ResponseBodyMessage$inboundSchema: z.ZodType<
  ResponseBodyMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()),
  refusal: z.nullable(z.string()),
  tool_calls: z.array(z.lazy(() => ResponseBodyToolCalls$inboundSchema)),
  role: ResponseBodyRole$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ResponseBodyMessage$Outbound = {
  content: string | null;
  refusal: string | null;
  tool_calls: Array<ResponseBodyToolCalls$Outbound>;
  role: string;
};

/** @internal */
export const ResponseBodyMessage$outboundSchema: z.ZodType<
  ResponseBodyMessage$Outbound,
  z.ZodTypeDef,
  ResponseBodyMessage
> = z.object({
  content: z.nullable(z.string()),
  refusal: z.nullable(z.string()),
  toolCalls: z.array(z.lazy(() => ResponseBodyToolCalls$outboundSchema)),
  role: ResponseBodyRole$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyMessage$ {
  /** @deprecated use `ResponseBodyMessage$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyMessage$inboundSchema;
  /** @deprecated use `ResponseBodyMessage$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyMessage$outboundSchema;
  /** @deprecated use `ResponseBodyMessage$Outbound` instead. */
  export type Outbound = ResponseBodyMessage$Outbound;
}

/** @internal */
export const TopLogprobs$inboundSchema: z.ZodType<
  TopLogprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/** @internal */
export type TopLogprobs$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

/** @internal */
export const TopLogprobs$outboundSchema: z.ZodType<
  TopLogprobs$Outbound,
  z.ZodTypeDef,
  TopLogprobs
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopLogprobs$ {
  /** @deprecated use `TopLogprobs$inboundSchema` instead. */
  export const inboundSchema = TopLogprobs$inboundSchema;
  /** @deprecated use `TopLogprobs$outboundSchema` instead. */
  export const outboundSchema = TopLogprobs$outboundSchema;
  /** @deprecated use `TopLogprobs$Outbound` instead. */
  export type Outbound = TopLogprobs$Outbound;
}

/** @internal */
export const ResponseBodyContent$inboundSchema: z.ZodType<
  ResponseBodyContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  top_logprobs: z.array(z.lazy(() => TopLogprobs$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type ResponseBodyContent$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<TopLogprobs$Outbound>;
};

/** @internal */
export const ResponseBodyContent$outboundSchema: z.ZodType<
  ResponseBodyContent$Outbound,
  z.ZodTypeDef,
  ResponseBodyContent
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  topLogprobs: z.array(z.lazy(() => TopLogprobs$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyContent$ {
  /** @deprecated use `ResponseBodyContent$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyContent$inboundSchema;
  /** @deprecated use `ResponseBodyContent$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyContent$outboundSchema;
  /** @deprecated use `ResponseBodyContent$Outbound` instead. */
  export type Outbound = ResponseBodyContent$Outbound;
}

/** @internal */
export const ResponseBodyTopLogprobs$inboundSchema: z.ZodType<
  ResponseBodyTopLogprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/** @internal */
export type ResponseBodyTopLogprobs$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

/** @internal */
export const ResponseBodyTopLogprobs$outboundSchema: z.ZodType<
  ResponseBodyTopLogprobs$Outbound,
  z.ZodTypeDef,
  ResponseBodyTopLogprobs
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyTopLogprobs$ {
  /** @deprecated use `ResponseBodyTopLogprobs$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyTopLogprobs$inboundSchema;
  /** @deprecated use `ResponseBodyTopLogprobs$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyTopLogprobs$outboundSchema;
  /** @deprecated use `ResponseBodyTopLogprobs$Outbound` instead. */
  export type Outbound = ResponseBodyTopLogprobs$Outbound;
}

/** @internal */
export const Refusal$inboundSchema: z.ZodType<Refusal, z.ZodTypeDef, unknown> =
  z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
    top_logprobs: z.array(z.lazy(() => ResponseBodyTopLogprobs$inboundSchema)),
  }).transform((v) => {
    return remap$(v, {
      "top_logprobs": "topLogprobs",
    });
  });

/** @internal */
export type Refusal$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<ResponseBodyTopLogprobs$Outbound>;
};

/** @internal */
export const Refusal$outboundSchema: z.ZodType<
  Refusal$Outbound,
  z.ZodTypeDef,
  Refusal
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  topLogprobs: z.array(z.lazy(() => ResponseBodyTopLogprobs$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Refusal$ {
  /** @deprecated use `Refusal$inboundSchema` instead. */
  export const inboundSchema = Refusal$inboundSchema;
  /** @deprecated use `Refusal$outboundSchema` instead. */
  export const outboundSchema = Refusal$outboundSchema;
  /** @deprecated use `Refusal$Outbound` instead. */
  export type Outbound = Refusal$Outbound;
}

/** @internal */
export const Logprobs$inboundSchema: z.ZodType<
  Logprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.array(z.lazy(() => ResponseBodyContent$inboundSchema))),
  refusal: z.nullable(z.array(z.lazy(() => Refusal$inboundSchema))),
});

/** @internal */
export type Logprobs$Outbound = {
  content: Array<ResponseBodyContent$Outbound> | null;
  refusal: Array<Refusal$Outbound> | null;
};

/** @internal */
export const Logprobs$outboundSchema: z.ZodType<
  Logprobs$Outbound,
  z.ZodTypeDef,
  Logprobs
> = z.object({
  content: z.nullable(
    z.array(z.lazy(() => ResponseBodyContent$outboundSchema)),
  ),
  refusal: z.nullable(z.array(z.lazy(() => Refusal$outboundSchema))),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Logprobs$ {
  /** @deprecated use `Logprobs$inboundSchema` instead. */
  export const inboundSchema = Logprobs$inboundSchema;
  /** @deprecated use `Logprobs$outboundSchema` instead. */
  export const outboundSchema = Logprobs$outboundSchema;
  /** @deprecated use `Logprobs$Outbound` instead. */
  export type Outbound = Logprobs$Outbound;
}

/** @internal */
export const ResponseBodyChoices$inboundSchema: z.ZodType<
  ResponseBodyChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  finish_reason: CreateChatCompletionsResponseBodyFinishReason$inboundSchema,
  index: z.number(),
  message: z.lazy(() => ResponseBodyMessage$inboundSchema),
  logprobs: z.nullable(z.lazy(() => Logprobs$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type ResponseBodyChoices$Outbound = {
  finish_reason: string;
  index: number;
  message: ResponseBodyMessage$Outbound;
  logprobs: Logprobs$Outbound | null;
};

/** @internal */
export const ResponseBodyChoices$outboundSchema: z.ZodType<
  ResponseBodyChoices$Outbound,
  z.ZodTypeDef,
  ResponseBodyChoices
> = z.object({
  finishReason: CreateChatCompletionsResponseBodyFinishReason$outboundSchema,
  index: z.number(),
  message: z.lazy(() => ResponseBodyMessage$outboundSchema),
  logprobs: z.nullable(z.lazy(() => Logprobs$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyChoices$ {
  /** @deprecated use `ResponseBodyChoices$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyChoices$inboundSchema;
  /** @deprecated use `ResponseBodyChoices$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyChoices$outboundSchema;
  /** @deprecated use `ResponseBodyChoices$Outbound` instead. */
  export type Outbound = ResponseBodyChoices$Outbound;
}

/** @internal */
export const ResponseBodyUsage$inboundSchema: z.ZodType<
  ResponseBodyUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  completion_tokens: z.number().optional(),
  prompt_tokens: z.number().optional(),
  total_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "completion_tokens": "completionTokens",
    "prompt_tokens": "promptTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type ResponseBodyUsage$Outbound = {
  completion_tokens?: number | undefined;
  prompt_tokens?: number | undefined;
  total_tokens?: number | undefined;
};

/** @internal */
export const ResponseBodyUsage$outboundSchema: z.ZodType<
  ResponseBodyUsage$Outbound,
  z.ZodTypeDef,
  ResponseBodyUsage
> = z.object({
  completionTokens: z.number().optional(),
  promptTokens: z.number().optional(),
  totalTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    completionTokens: "completion_tokens",
    promptTokens: "prompt_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyUsage$ {
  /** @deprecated use `ResponseBodyUsage$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyUsage$inboundSchema;
  /** @deprecated use `ResponseBodyUsage$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyUsage$outboundSchema;
  /** @deprecated use `ResponseBodyUsage$Outbound` instead. */
  export type Outbound = ResponseBodyUsage$Outbound;
}

/** @internal */
export const ResponseBody1$inboundSchema: z.ZodType<
  ResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  choices: z.array(z.lazy(() => ResponseBodyChoices$inboundSchema)),
  created: z.number(),
  model: z.string(),
  system_fingerprint: z.string(),
  object: z.string(),
  usage: z.lazy(() => ResponseBodyUsage$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type ResponseBody1$Outbound = {
  id: string;
  choices: Array<ResponseBodyChoices$Outbound>;
  created: number;
  model: string;
  system_fingerprint: string;
  object: string;
  usage: ResponseBodyUsage$Outbound;
};

/** @internal */
export const ResponseBody1$outboundSchema: z.ZodType<
  ResponseBody1$Outbound,
  z.ZodTypeDef,
  ResponseBody1
> = z.object({
  id: z.string(),
  choices: z.array(z.lazy(() => ResponseBodyChoices$outboundSchema)),
  created: z.number(),
  model: z.string(),
  systemFingerprint: z.string(),
  object: z.string(),
  usage: z.lazy(() => ResponseBodyUsage$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody1$ {
  /** @deprecated use `ResponseBody1$inboundSchema` instead. */
  export const inboundSchema = ResponseBody1$inboundSchema;
  /** @deprecated use `ResponseBody1$outboundSchema` instead. */
  export const outboundSchema = ResponseBody1$outboundSchema;
  /** @deprecated use `ResponseBody1$Outbound` instead. */
  export type Outbound = ResponseBody1$Outbound;
}

/** @internal */
export const CreateChatCompletionsResponseBody$inboundSchema: z.ZodType<
  CreateChatCompletionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ResponseBody1$inboundSchema),
  z.lazy(() => ResponseBody2$inboundSchema),
]);

/** @internal */
export type CreateChatCompletionsResponseBody$Outbound =
  | ResponseBody1$Outbound
  | ResponseBody2$Outbound;

/** @internal */
export const CreateChatCompletionsResponseBody$outboundSchema: z.ZodType<
  CreateChatCompletionsResponseBody$Outbound,
  z.ZodTypeDef,
  CreateChatCompletionsResponseBody
> = z.union([
  z.lazy(() => ResponseBody1$outboundSchema),
  z.lazy(() => ResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsResponseBody$ {
  /** @deprecated use `CreateChatCompletionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletionsResponseBody$inboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatCompletionsResponseBody$outboundSchema;
  /** @deprecated use `CreateChatCompletionsResponseBody$Outbound` instead. */
  export type Outbound = CreateChatCompletionsResponseBody$Outbound;
}

/** @internal */
export const CreateChatCompletionsResponse$inboundSchema: z.ZodType<
  CreateChatCompletionsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.lazy(() => ResponseBody1$inboundSchema),
    z.lazy(() => ResponseBody2$inboundSchema),
  ]),
  z.instanceof(ReadableStream<Uint8Array>).transform(stream => {
    return new EventStream({
      stream,
      decoder(rawEvent) {
        const schema = z.lazy(() =>
          CreateChatCompletionsRouterChatCompletionsResponseBody$inboundSchema
        );
        return schema.parse(rawEvent);
      },
    });
  }),
]);

/** @internal */
export type CreateChatCompletionsResponse$Outbound =
  | ResponseBody1$Outbound
  | ResponseBody2$Outbound
  | never;

/** @internal */
export const CreateChatCompletionsResponse$outboundSchema: z.ZodType<
  CreateChatCompletionsResponse$Outbound,
  z.ZodTypeDef,
  CreateChatCompletionsResponse
> = z.union([
  z.union([
    z.lazy(() => ResponseBody1$outboundSchema),
    z.lazy(() => ResponseBody2$outboundSchema),
  ]),
  z.never(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionsResponse$ {
  /** @deprecated use `CreateChatCompletionsResponse$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletionsResponse$inboundSchema;
  /** @deprecated use `CreateChatCompletionsResponse$outboundSchema` instead. */
  export const outboundSchema = CreateChatCompletionsResponse$outboundSchema;
  /** @deprecated use `CreateChatCompletionsResponse$Outbound` instead. */
  export type Outbound = CreateChatCompletionsResponse$Outbound;
}
