/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * Update user information payload
 */
export type PostV2ContactsRequestBody = {
  /**
   * Unique string value to identify the contact user in the customer's system
   */
  externalId: string;
  /**
   * Display name or nickname of the user
   */
  displayName?: string | null | undefined;
  /**
   * Email address of the user
   */
  email?: string | null | undefined;
  /**
   * URL linking to the user's avatar image
   */
  avatarUrl?: string | null | undefined;
  /**
   * Array of UUIDs representing tags associated with the user
   */
  tags?: Array<string> | undefined;
  /**
   * Additional custom metadata associated with the user as key-value pairs
   */
  metadata?: { [k: string]: any } | undefined;
};

/**
 * Successful operation
 */
export type PostV2ContactsResponseBody = {
  /**
   * Unique ULID (Universally Unique Lexicographically Sortable Identifier) for the user
   */
  id: string;
  /**
   * Unique string value to identify the contact user in the customer's system
   */
  externalId: string;
  /**
   * Display name or nickname of the user
   */
  displayName?: string | null | undefined;
  /**
   * Email address of the user
   */
  email?: string | null | undefined;
  /**
   * URL linking to the user's avatar image
   */
  avatarUrl?: string | null | undefined;
  /**
   * Array of UUIDs representing tags associated with the user
   */
  tags?: Array<string> | undefined;
  /**
   * Additional custom metadata associated with the user as key-value pairs
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
};

/** @internal */
export const PostV2ContactsRequestBody$inboundSchema: z.ZodType<
  PostV2ContactsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
  display_name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  avatar_url: z.nullable(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "display_name": "displayName",
    "avatar_url": "avatarUrl",
  });
});

/** @internal */
export type PostV2ContactsRequestBody$Outbound = {
  external_id: string;
  display_name?: string | null | undefined;
  email?: string | null | undefined;
  avatar_url?: string | null | undefined;
  tags?: Array<string> | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const PostV2ContactsRequestBody$outboundSchema: z.ZodType<
  PostV2ContactsRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2ContactsRequestBody
> = z.object({
  externalId: z.string(),
  displayName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  avatarUrl: z.nullable(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    displayName: "display_name",
    avatarUrl: "avatar_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ContactsRequestBody$ {
  /** @deprecated use `PostV2ContactsRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ContactsRequestBody$inboundSchema;
  /** @deprecated use `PostV2ContactsRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostV2ContactsRequestBody$outboundSchema;
  /** @deprecated use `PostV2ContactsRequestBody$Outbound` instead. */
  export type Outbound = PostV2ContactsRequestBody$Outbound;
}

/** @internal */
export const PostV2ContactsResponseBody$inboundSchema: z.ZodType<
  PostV2ContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  external_id: z.string(),
  display_name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  avatar_url: z.nullable(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2024-11-12T13:30:37.087Z",
  ).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "display_name": "displayName",
    "avatar_url": "avatarUrl",
  });
});

/** @internal */
export type PostV2ContactsResponseBody$Outbound = {
  id: string;
  external_id: string;
  display_name?: string | null | undefined;
  email?: string | null | undefined;
  avatar_url?: string | null | undefined;
  tags?: Array<string> | undefined;
  metadata?: { [k: string]: any } | undefined;
  created?: string | undefined;
  updated: string;
};

/** @internal */
export const PostV2ContactsResponseBody$outboundSchema: z.ZodType<
  PostV2ContactsResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2ContactsResponseBody
> = z.object({
  id: z.string(),
  externalId: z.string(),
  displayName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  avatarUrl: z.nullable(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2024-11-12T13:30:37.087Z"))
    .transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    displayName: "display_name",
    avatarUrl: "avatar_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ContactsResponseBody$ {
  /** @deprecated use `PostV2ContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ContactsResponseBody$inboundSchema;
  /** @deprecated use `PostV2ContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostV2ContactsResponseBody$outboundSchema;
  /** @deprecated use `PostV2ContactsResponseBody$Outbound` instead. */
  export type Outbound = PostV2ContactsResponseBody$Outbound;
}
