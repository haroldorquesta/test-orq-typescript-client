/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The quality of the image
 */
export const Quality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * The quality of the image
 */
export type Quality = ClosedEnum<typeof Quality>;

/**
 * The format of the image
 */
export const ResponseFormat = {
  Url: "url",
  B64Json: "b64_json",
} as const;
/**
 * The format of the image
 */
export type ResponseFormat = ClosedEnum<typeof ResponseFormat>;

/**
 * The size of the image
 */
export const Size = {
  TwoHundredAndFiftySixx256: "256x256",
  FiveHundredAndTwelvex512: "512x512",
  OneThousandAndTwentyFourx1024: "1024x1024",
} as const;
/**
 * The size of the image
 */
export type Size = ClosedEnum<typeof Size>;

/**
 * A request body that follows the official OpenAI schema
 */
export type RouterImageGenerationsRequestBody = {
  /**
   * The prompt to generate an image
   */
  prompt: string;
  /**
   * The model to use for generation
   */
  model?: string | undefined;
  /**
   * The number of images to generate
   */
  n?: number | undefined;
  /**
   * The quality of the image
   */
  quality?: Quality | undefined;
  /**
   * The format of the image
   */
  responseFormat?: ResponseFormat | undefined;
  /**
   * The size of the image
   */
  size?: Size | undefined;
  /**
   * The style of the image
   */
  style?: string | undefined;
  /**
   * The user who created the image
   */
  user?: string | undefined;
};

/**
 * The role of the prompt message
 */
export const RouterImageGenerationsMessageRouterImagesResponseRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type RouterImageGenerationsMessageRouterImagesResponseRole = ClosedEnum<
  typeof RouterImageGenerationsMessageRouterImagesResponseRole
>;

export const RouterImageGenerationsMessageType = {
  Function: "function",
} as const;
export type RouterImageGenerationsMessageType = ClosedEnum<
  typeof RouterImageGenerationsMessageType
>;

export type RouterImageGenerationsMessageFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type RouterImageGenerationsMessageToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: RouterImageGenerationsMessageType;
  function: RouterImageGenerationsMessageFunction;
};

export type RouterImageGenerationsMessage3 = {
  /**
   * The role of the prompt message
   */
  role: RouterImageGenerationsMessageRouterImagesResponseRole;
  toolCalls: Array<RouterImageGenerationsMessageToolCalls>;
};

/**
 * The role of the prompt message
 */
export const RouterImageGenerationsMessageRouterImagesRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type RouterImageGenerationsMessageRouterImagesRole = ClosedEnum<
  typeof RouterImageGenerationsMessageRouterImagesRole
>;

export type RouterImageGenerationsMessage2 = {
  /**
   * The role of the prompt message
   */
  role: RouterImageGenerationsMessageRouterImagesRole;
  url: string;
};

/**
 * The role of the prompt message
 */
export const RouterImageGenerationsMessageRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type RouterImageGenerationsMessageRole = ClosedEnum<
  typeof RouterImageGenerationsMessageRole
>;

export type RouterImageGenerationsMessage1 = {
  /**
   * The role of the prompt message
   */
  role: RouterImageGenerationsMessageRole;
  content: string | null;
};

export type RouterImageGenerationsMessage =
  | RouterImageGenerationsMessage1
  | RouterImageGenerationsMessage2
  | RouterImageGenerationsMessage3;

export type RouterImageGenerationsChoices = {
  /**
   * The reason for finishing the generation
   */
  finishReason?: string | null | undefined;
  /**
   * The index of the choice in the list of choices.
   */
  index: number;
  message?:
    | RouterImageGenerationsMessage1
    | RouterImageGenerationsMessage2
    | RouterImageGenerationsMessage3
    | undefined;
};

/**
 * A response body that follows the official OpenAI schema
 */
export type RouterImageGenerationsResponseBody = {
  /**
   * The unique identifier of the created image
   */
  id: string;
  created: number;
  /**
   * The list of create image choices the model generated for the prompt.
   */
  choices: Array<RouterImageGenerationsChoices>;
  /**
   * The model used for the image creation.
   */
  model: string;
  /**
   * The object type
   */
  object: string;
};

/** @internal */
export const Quality$inboundSchema: z.ZodNativeEnum<typeof Quality> = z
  .nativeEnum(Quality);

/** @internal */
export const Quality$outboundSchema: z.ZodNativeEnum<typeof Quality> =
  Quality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Quality$ {
  /** @deprecated use `Quality$inboundSchema` instead. */
  export const inboundSchema = Quality$inboundSchema;
  /** @deprecated use `Quality$outboundSchema` instead. */
  export const outboundSchema = Quality$outboundSchema;
}

/** @internal */
export const ResponseFormat$inboundSchema: z.ZodNativeEnum<
  typeof ResponseFormat
> = z.nativeEnum(ResponseFormat);

/** @internal */
export const ResponseFormat$outboundSchema: z.ZodNativeEnum<
  typeof ResponseFormat
> = ResponseFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat$ {
  /** @deprecated use `ResponseFormat$inboundSchema` instead. */
  export const inboundSchema = ResponseFormat$inboundSchema;
  /** @deprecated use `ResponseFormat$outboundSchema` instead. */
  export const outboundSchema = ResponseFormat$outboundSchema;
}

/** @internal */
export const Size$inboundSchema: z.ZodNativeEnum<typeof Size> = z.nativeEnum(
  Size,
);

/** @internal */
export const Size$outboundSchema: z.ZodNativeEnum<typeof Size> =
  Size$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Size$ {
  /** @deprecated use `Size$inboundSchema` instead. */
  export const inboundSchema = Size$inboundSchema;
  /** @deprecated use `Size$outboundSchema` instead. */
  export const outboundSchema = Size$outboundSchema;
}

/** @internal */
export const RouterImageGenerationsRequestBody$inboundSchema: z.ZodType<
  RouterImageGenerationsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.string(),
  model: z.string().default("openai/dall-e-2"),
  n: z.number().default(1),
  quality: Quality$inboundSchema.default("standard"),
  response_format: ResponseFormat$inboundSchema.default("url"),
  size: Size$inboundSchema.default("1024x1024"),
  style: z.string().default("vivid"),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "response_format": "responseFormat",
  });
});

/** @internal */
export type RouterImageGenerationsRequestBody$Outbound = {
  prompt: string;
  model: string;
  n: number;
  quality: string;
  response_format: string;
  size: string;
  style: string;
  user?: string | undefined;
};

/** @internal */
export const RouterImageGenerationsRequestBody$outboundSchema: z.ZodType<
  RouterImageGenerationsRequestBody$Outbound,
  z.ZodTypeDef,
  RouterImageGenerationsRequestBody
> = z.object({
  prompt: z.string(),
  model: z.string().default("openai/dall-e-2"),
  n: z.number().default(1),
  quality: Quality$outboundSchema.default("standard"),
  responseFormat: ResponseFormat$outboundSchema.default("url"),
  size: Size$outboundSchema.default("1024x1024"),
  style: z.string().default("vivid"),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterImageGenerationsRequestBody$ {
  /** @deprecated use `RouterImageGenerationsRequestBody$inboundSchema` instead. */
  export const inboundSchema = RouterImageGenerationsRequestBody$inboundSchema;
  /** @deprecated use `RouterImageGenerationsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RouterImageGenerationsRequestBody$outboundSchema;
  /** @deprecated use `RouterImageGenerationsRequestBody$Outbound` instead. */
  export type Outbound = RouterImageGenerationsRequestBody$Outbound;
}

export function routerImageGenerationsRequestBodyToJSON(
  routerImageGenerationsRequestBody: RouterImageGenerationsRequestBody,
): string {
  return JSON.stringify(
    RouterImageGenerationsRequestBody$outboundSchema.parse(
      routerImageGenerationsRequestBody,
    ),
  );
}

export function routerImageGenerationsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RouterImageGenerationsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouterImageGenerationsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouterImageGenerationsRequestBody' from JSON`,
  );
}

/** @internal */
export const RouterImageGenerationsMessageRouterImagesResponseRole$inboundSchema:
  z.ZodNativeEnum<
    typeof RouterImageGenerationsMessageRouterImagesResponseRole
  > = z.nativeEnum(RouterImageGenerationsMessageRouterImagesResponseRole);

/** @internal */
export const RouterImageGenerationsMessageRouterImagesResponseRole$outboundSchema:
  z.ZodNativeEnum<
    typeof RouterImageGenerationsMessageRouterImagesResponseRole
  > = RouterImageGenerationsMessageRouterImagesResponseRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterImageGenerationsMessageRouterImagesResponseRole$ {
  /** @deprecated use `RouterImageGenerationsMessageRouterImagesResponseRole$inboundSchema` instead. */
  export const inboundSchema =
    RouterImageGenerationsMessageRouterImagesResponseRole$inboundSchema;
  /** @deprecated use `RouterImageGenerationsMessageRouterImagesResponseRole$outboundSchema` instead. */
  export const outboundSchema =
    RouterImageGenerationsMessageRouterImagesResponseRole$outboundSchema;
}

/** @internal */
export const RouterImageGenerationsMessageType$inboundSchema: z.ZodNativeEnum<
  typeof RouterImageGenerationsMessageType
> = z.nativeEnum(RouterImageGenerationsMessageType);

/** @internal */
export const RouterImageGenerationsMessageType$outboundSchema: z.ZodNativeEnum<
  typeof RouterImageGenerationsMessageType
> = RouterImageGenerationsMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterImageGenerationsMessageType$ {
  /** @deprecated use `RouterImageGenerationsMessageType$inboundSchema` instead. */
  export const inboundSchema = RouterImageGenerationsMessageType$inboundSchema;
  /** @deprecated use `RouterImageGenerationsMessageType$outboundSchema` instead. */
  export const outboundSchema =
    RouterImageGenerationsMessageType$outboundSchema;
}

/** @internal */
export const RouterImageGenerationsMessageFunction$inboundSchema: z.ZodType<
  RouterImageGenerationsMessageFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type RouterImageGenerationsMessageFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const RouterImageGenerationsMessageFunction$outboundSchema: z.ZodType<
  RouterImageGenerationsMessageFunction$Outbound,
  z.ZodTypeDef,
  RouterImageGenerationsMessageFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterImageGenerationsMessageFunction$ {
  /** @deprecated use `RouterImageGenerationsMessageFunction$inboundSchema` instead. */
  export const inboundSchema =
    RouterImageGenerationsMessageFunction$inboundSchema;
  /** @deprecated use `RouterImageGenerationsMessageFunction$outboundSchema` instead. */
  export const outboundSchema =
    RouterImageGenerationsMessageFunction$outboundSchema;
  /** @deprecated use `RouterImageGenerationsMessageFunction$Outbound` instead. */
  export type Outbound = RouterImageGenerationsMessageFunction$Outbound;
}

export function routerImageGenerationsMessageFunctionToJSON(
  routerImageGenerationsMessageFunction: RouterImageGenerationsMessageFunction,
): string {
  return JSON.stringify(
    RouterImageGenerationsMessageFunction$outboundSchema.parse(
      routerImageGenerationsMessageFunction,
    ),
  );
}

export function routerImageGenerationsMessageFunctionFromJSON(
  jsonString: string,
): SafeParseResult<RouterImageGenerationsMessageFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RouterImageGenerationsMessageFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouterImageGenerationsMessageFunction' from JSON`,
  );
}

/** @internal */
export const RouterImageGenerationsMessageToolCalls$inboundSchema: z.ZodType<
  RouterImageGenerationsMessageToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: RouterImageGenerationsMessageType$inboundSchema,
  function: z.lazy(() => RouterImageGenerationsMessageFunction$inboundSchema),
});

/** @internal */
export type RouterImageGenerationsMessageToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: RouterImageGenerationsMessageFunction$Outbound;
};

/** @internal */
export const RouterImageGenerationsMessageToolCalls$outboundSchema: z.ZodType<
  RouterImageGenerationsMessageToolCalls$Outbound,
  z.ZodTypeDef,
  RouterImageGenerationsMessageToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: RouterImageGenerationsMessageType$outboundSchema,
  function: z.lazy(() => RouterImageGenerationsMessageFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterImageGenerationsMessageToolCalls$ {
  /** @deprecated use `RouterImageGenerationsMessageToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    RouterImageGenerationsMessageToolCalls$inboundSchema;
  /** @deprecated use `RouterImageGenerationsMessageToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    RouterImageGenerationsMessageToolCalls$outboundSchema;
  /** @deprecated use `RouterImageGenerationsMessageToolCalls$Outbound` instead. */
  export type Outbound = RouterImageGenerationsMessageToolCalls$Outbound;
}

export function routerImageGenerationsMessageToolCallsToJSON(
  routerImageGenerationsMessageToolCalls:
    RouterImageGenerationsMessageToolCalls,
): string {
  return JSON.stringify(
    RouterImageGenerationsMessageToolCalls$outboundSchema.parse(
      routerImageGenerationsMessageToolCalls,
    ),
  );
}

export function routerImageGenerationsMessageToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<RouterImageGenerationsMessageToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RouterImageGenerationsMessageToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouterImageGenerationsMessageToolCalls' from JSON`,
  );
}

/** @internal */
export const RouterImageGenerationsMessage3$inboundSchema: z.ZodType<
  RouterImageGenerationsMessage3,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: RouterImageGenerationsMessageRouterImagesResponseRole$inboundSchema,
  tool_calls: z.array(
    z.lazy(() => RouterImageGenerationsMessageToolCalls$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type RouterImageGenerationsMessage3$Outbound = {
  role: string;
  tool_calls: Array<RouterImageGenerationsMessageToolCalls$Outbound>;
};

/** @internal */
export const RouterImageGenerationsMessage3$outboundSchema: z.ZodType<
  RouterImageGenerationsMessage3$Outbound,
  z.ZodTypeDef,
  RouterImageGenerationsMessage3
> = z.object({
  role: RouterImageGenerationsMessageRouterImagesResponseRole$outboundSchema,
  toolCalls: z.array(
    z.lazy(() => RouterImageGenerationsMessageToolCalls$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterImageGenerationsMessage3$ {
  /** @deprecated use `RouterImageGenerationsMessage3$inboundSchema` instead. */
  export const inboundSchema = RouterImageGenerationsMessage3$inboundSchema;
  /** @deprecated use `RouterImageGenerationsMessage3$outboundSchema` instead. */
  export const outboundSchema = RouterImageGenerationsMessage3$outboundSchema;
  /** @deprecated use `RouterImageGenerationsMessage3$Outbound` instead. */
  export type Outbound = RouterImageGenerationsMessage3$Outbound;
}

export function routerImageGenerationsMessage3ToJSON(
  routerImageGenerationsMessage3: RouterImageGenerationsMessage3,
): string {
  return JSON.stringify(
    RouterImageGenerationsMessage3$outboundSchema.parse(
      routerImageGenerationsMessage3,
    ),
  );
}

export function routerImageGenerationsMessage3FromJSON(
  jsonString: string,
): SafeParseResult<RouterImageGenerationsMessage3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouterImageGenerationsMessage3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouterImageGenerationsMessage3' from JSON`,
  );
}

/** @internal */
export const RouterImageGenerationsMessageRouterImagesRole$inboundSchema:
  z.ZodNativeEnum<typeof RouterImageGenerationsMessageRouterImagesRole> = z
    .nativeEnum(RouterImageGenerationsMessageRouterImagesRole);

/** @internal */
export const RouterImageGenerationsMessageRouterImagesRole$outboundSchema:
  z.ZodNativeEnum<typeof RouterImageGenerationsMessageRouterImagesRole> =
    RouterImageGenerationsMessageRouterImagesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterImageGenerationsMessageRouterImagesRole$ {
  /** @deprecated use `RouterImageGenerationsMessageRouterImagesRole$inboundSchema` instead. */
  export const inboundSchema =
    RouterImageGenerationsMessageRouterImagesRole$inboundSchema;
  /** @deprecated use `RouterImageGenerationsMessageRouterImagesRole$outboundSchema` instead. */
  export const outboundSchema =
    RouterImageGenerationsMessageRouterImagesRole$outboundSchema;
}

/** @internal */
export const RouterImageGenerationsMessage2$inboundSchema: z.ZodType<
  RouterImageGenerationsMessage2,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: RouterImageGenerationsMessageRouterImagesRole$inboundSchema,
  url: z.string(),
});

/** @internal */
export type RouterImageGenerationsMessage2$Outbound = {
  role: string;
  url: string;
};

/** @internal */
export const RouterImageGenerationsMessage2$outboundSchema: z.ZodType<
  RouterImageGenerationsMessage2$Outbound,
  z.ZodTypeDef,
  RouterImageGenerationsMessage2
> = z.object({
  role: RouterImageGenerationsMessageRouterImagesRole$outboundSchema,
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterImageGenerationsMessage2$ {
  /** @deprecated use `RouterImageGenerationsMessage2$inboundSchema` instead. */
  export const inboundSchema = RouterImageGenerationsMessage2$inboundSchema;
  /** @deprecated use `RouterImageGenerationsMessage2$outboundSchema` instead. */
  export const outboundSchema = RouterImageGenerationsMessage2$outboundSchema;
  /** @deprecated use `RouterImageGenerationsMessage2$Outbound` instead. */
  export type Outbound = RouterImageGenerationsMessage2$Outbound;
}

export function routerImageGenerationsMessage2ToJSON(
  routerImageGenerationsMessage2: RouterImageGenerationsMessage2,
): string {
  return JSON.stringify(
    RouterImageGenerationsMessage2$outboundSchema.parse(
      routerImageGenerationsMessage2,
    ),
  );
}

export function routerImageGenerationsMessage2FromJSON(
  jsonString: string,
): SafeParseResult<RouterImageGenerationsMessage2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouterImageGenerationsMessage2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouterImageGenerationsMessage2' from JSON`,
  );
}

/** @internal */
export const RouterImageGenerationsMessageRole$inboundSchema: z.ZodNativeEnum<
  typeof RouterImageGenerationsMessageRole
> = z.nativeEnum(RouterImageGenerationsMessageRole);

/** @internal */
export const RouterImageGenerationsMessageRole$outboundSchema: z.ZodNativeEnum<
  typeof RouterImageGenerationsMessageRole
> = RouterImageGenerationsMessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterImageGenerationsMessageRole$ {
  /** @deprecated use `RouterImageGenerationsMessageRole$inboundSchema` instead. */
  export const inboundSchema = RouterImageGenerationsMessageRole$inboundSchema;
  /** @deprecated use `RouterImageGenerationsMessageRole$outboundSchema` instead. */
  export const outboundSchema =
    RouterImageGenerationsMessageRole$outboundSchema;
}

/** @internal */
export const RouterImageGenerationsMessage1$inboundSchema: z.ZodType<
  RouterImageGenerationsMessage1,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: RouterImageGenerationsMessageRole$inboundSchema,
  content: z.nullable(z.string()),
});

/** @internal */
export type RouterImageGenerationsMessage1$Outbound = {
  role: string;
  content: string | null;
};

/** @internal */
export const RouterImageGenerationsMessage1$outboundSchema: z.ZodType<
  RouterImageGenerationsMessage1$Outbound,
  z.ZodTypeDef,
  RouterImageGenerationsMessage1
> = z.object({
  role: RouterImageGenerationsMessageRole$outboundSchema,
  content: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterImageGenerationsMessage1$ {
  /** @deprecated use `RouterImageGenerationsMessage1$inboundSchema` instead. */
  export const inboundSchema = RouterImageGenerationsMessage1$inboundSchema;
  /** @deprecated use `RouterImageGenerationsMessage1$outboundSchema` instead. */
  export const outboundSchema = RouterImageGenerationsMessage1$outboundSchema;
  /** @deprecated use `RouterImageGenerationsMessage1$Outbound` instead. */
  export type Outbound = RouterImageGenerationsMessage1$Outbound;
}

export function routerImageGenerationsMessage1ToJSON(
  routerImageGenerationsMessage1: RouterImageGenerationsMessage1,
): string {
  return JSON.stringify(
    RouterImageGenerationsMessage1$outboundSchema.parse(
      routerImageGenerationsMessage1,
    ),
  );
}

export function routerImageGenerationsMessage1FromJSON(
  jsonString: string,
): SafeParseResult<RouterImageGenerationsMessage1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouterImageGenerationsMessage1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouterImageGenerationsMessage1' from JSON`,
  );
}

/** @internal */
export const RouterImageGenerationsMessage$inboundSchema: z.ZodType<
  RouterImageGenerationsMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RouterImageGenerationsMessage1$inboundSchema),
  z.lazy(() => RouterImageGenerationsMessage2$inboundSchema),
  z.lazy(() => RouterImageGenerationsMessage3$inboundSchema),
]);

/** @internal */
export type RouterImageGenerationsMessage$Outbound =
  | RouterImageGenerationsMessage1$Outbound
  | RouterImageGenerationsMessage2$Outbound
  | RouterImageGenerationsMessage3$Outbound;

/** @internal */
export const RouterImageGenerationsMessage$outboundSchema: z.ZodType<
  RouterImageGenerationsMessage$Outbound,
  z.ZodTypeDef,
  RouterImageGenerationsMessage
> = z.union([
  z.lazy(() => RouterImageGenerationsMessage1$outboundSchema),
  z.lazy(() => RouterImageGenerationsMessage2$outboundSchema),
  z.lazy(() => RouterImageGenerationsMessage3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterImageGenerationsMessage$ {
  /** @deprecated use `RouterImageGenerationsMessage$inboundSchema` instead. */
  export const inboundSchema = RouterImageGenerationsMessage$inboundSchema;
  /** @deprecated use `RouterImageGenerationsMessage$outboundSchema` instead. */
  export const outboundSchema = RouterImageGenerationsMessage$outboundSchema;
  /** @deprecated use `RouterImageGenerationsMessage$Outbound` instead. */
  export type Outbound = RouterImageGenerationsMessage$Outbound;
}

export function routerImageGenerationsMessageToJSON(
  routerImageGenerationsMessage: RouterImageGenerationsMessage,
): string {
  return JSON.stringify(
    RouterImageGenerationsMessage$outboundSchema.parse(
      routerImageGenerationsMessage,
    ),
  );
}

export function routerImageGenerationsMessageFromJSON(
  jsonString: string,
): SafeParseResult<RouterImageGenerationsMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouterImageGenerationsMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouterImageGenerationsMessage' from JSON`,
  );
}

/** @internal */
export const RouterImageGenerationsChoices$inboundSchema: z.ZodType<
  RouterImageGenerationsChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  finish_reason: z.nullable(z.string()).optional(),
  index: z.number(),
  message: z.union([
    z.lazy(() => RouterImageGenerationsMessage1$inboundSchema),
    z.lazy(() => RouterImageGenerationsMessage2$inboundSchema),
    z.lazy(() => RouterImageGenerationsMessage3$inboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type RouterImageGenerationsChoices$Outbound = {
  finish_reason?: string | null | undefined;
  index: number;
  message?:
    | RouterImageGenerationsMessage1$Outbound
    | RouterImageGenerationsMessage2$Outbound
    | RouterImageGenerationsMessage3$Outbound
    | undefined;
};

/** @internal */
export const RouterImageGenerationsChoices$outboundSchema: z.ZodType<
  RouterImageGenerationsChoices$Outbound,
  z.ZodTypeDef,
  RouterImageGenerationsChoices
> = z.object({
  finishReason: z.nullable(z.string()).optional(),
  index: z.number(),
  message: z.union([
    z.lazy(() => RouterImageGenerationsMessage1$outboundSchema),
    z.lazy(() => RouterImageGenerationsMessage2$outboundSchema),
    z.lazy(() => RouterImageGenerationsMessage3$outboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterImageGenerationsChoices$ {
  /** @deprecated use `RouterImageGenerationsChoices$inboundSchema` instead. */
  export const inboundSchema = RouterImageGenerationsChoices$inboundSchema;
  /** @deprecated use `RouterImageGenerationsChoices$outboundSchema` instead. */
  export const outboundSchema = RouterImageGenerationsChoices$outboundSchema;
  /** @deprecated use `RouterImageGenerationsChoices$Outbound` instead. */
  export type Outbound = RouterImageGenerationsChoices$Outbound;
}

export function routerImageGenerationsChoicesToJSON(
  routerImageGenerationsChoices: RouterImageGenerationsChoices,
): string {
  return JSON.stringify(
    RouterImageGenerationsChoices$outboundSchema.parse(
      routerImageGenerationsChoices,
    ),
  );
}

export function routerImageGenerationsChoicesFromJSON(
  jsonString: string,
): SafeParseResult<RouterImageGenerationsChoices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouterImageGenerationsChoices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouterImageGenerationsChoices' from JSON`,
  );
}

/** @internal */
export const RouterImageGenerationsResponseBody$inboundSchema: z.ZodType<
  RouterImageGenerationsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created: z.number(),
  choices: z.array(z.lazy(() => RouterImageGenerationsChoices$inboundSchema)),
  model: z.string(),
  object: z.string(),
});

/** @internal */
export type RouterImageGenerationsResponseBody$Outbound = {
  id: string;
  created: number;
  choices: Array<RouterImageGenerationsChoices$Outbound>;
  model: string;
  object: string;
};

/** @internal */
export const RouterImageGenerationsResponseBody$outboundSchema: z.ZodType<
  RouterImageGenerationsResponseBody$Outbound,
  z.ZodTypeDef,
  RouterImageGenerationsResponseBody
> = z.object({
  id: z.string(),
  created: z.number(),
  choices: z.array(z.lazy(() => RouterImageGenerationsChoices$outboundSchema)),
  model: z.string(),
  object: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterImageGenerationsResponseBody$ {
  /** @deprecated use `RouterImageGenerationsResponseBody$inboundSchema` instead. */
  export const inboundSchema = RouterImageGenerationsResponseBody$inboundSchema;
  /** @deprecated use `RouterImageGenerationsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RouterImageGenerationsResponseBody$outboundSchema;
  /** @deprecated use `RouterImageGenerationsResponseBody$Outbound` instead. */
  export type Outbound = RouterImageGenerationsResponseBody$Outbound;
}

export function routerImageGenerationsResponseBodyToJSON(
  routerImageGenerationsResponseBody: RouterImageGenerationsResponseBody,
): string {
  return JSON.stringify(
    RouterImageGenerationsResponseBody$outboundSchema.parse(
      routerImageGenerationsResponseBody,
    ),
  );
}

export function routerImageGenerationsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RouterImageGenerationsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RouterImageGenerationsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouterImageGenerationsResponseBody' from JSON`,
  );
}
