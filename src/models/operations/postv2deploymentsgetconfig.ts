/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export type Inputs = string | number | boolean;

/**
 * The role of the prompt message
 */
export const Role = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type Role = ClosedEnum<typeof Role>;

export const TwoType = {
  ImageUrl: "image_url",
} as const;
export type TwoType = ClosedEnum<typeof TwoType>;

export type ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type Two2 = {
  type: TwoType;
  imageUrl: ImageUrl;
};

export const Type = {
  Text: "text",
} as const;
export type Type = ClosedEnum<typeof Type>;

/**
 * Text content part of a prompt message
 */
export type One = {
  type: Type;
  text: string;
};

export type Two = One | Two2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type Content = string | Array<One | Two2>;

export const PostV2DeploymentsGetConfigType = {
  Function: "function",
} as const;
export type PostV2DeploymentsGetConfigType = ClosedEnum<
  typeof PostV2DeploymentsGetConfigType
>;

export type FunctionT = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type ToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: PostV2DeploymentsGetConfigType;
  function: FunctionT;
};

export type PrefixMessages = {
  /**
   * The role of the prompt message
   */
  role: Role;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<One | Two2>;
  toolCalls?: Array<ToolCalls> | undefined;
};

/**
 * The role of the prompt message
 */
export const PostV2DeploymentsGetConfigRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type PostV2DeploymentsGetConfigRole = ClosedEnum<
  typeof PostV2DeploymentsGetConfigRole
>;

export const PostV2DeploymentsGetConfig2DeploymentsType = {
  ImageUrl: "image_url",
} as const;
export type PostV2DeploymentsGetConfig2DeploymentsType = ClosedEnum<
  typeof PostV2DeploymentsGetConfig2DeploymentsType
>;

export type TwoImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type PostV2DeploymentsGetConfig22 = {
  type: PostV2DeploymentsGetConfig2DeploymentsType;
  imageUrl: TwoImageUrl;
};

export const PostV2DeploymentsGetConfig2Type = {
  Text: "text",
} as const;
export type PostV2DeploymentsGetConfig2Type = ClosedEnum<
  typeof PostV2DeploymentsGetConfig2Type
>;

/**
 * Text content part of a prompt message
 */
export type Two1 = {
  type: PostV2DeploymentsGetConfig2Type;
  text: string;
};

export type Content2 = Two1 | PostV2DeploymentsGetConfig22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type PostV2DeploymentsGetConfigContent =
  | string
  | Array<Two1 | PostV2DeploymentsGetConfig22>;

export const PostV2DeploymentsGetConfigDeploymentsType = {
  Function: "function",
} as const;
export type PostV2DeploymentsGetConfigDeploymentsType = ClosedEnum<
  typeof PostV2DeploymentsGetConfigDeploymentsType
>;

export type PostV2DeploymentsGetConfigFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type PostV2DeploymentsGetConfigToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: PostV2DeploymentsGetConfigDeploymentsType;
  function: PostV2DeploymentsGetConfigFunction;
};

export type Messages = {
  /**
   * The role of the prompt message
   */
  role: PostV2DeploymentsGetConfigRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<Two1 | PostV2DeploymentsGetConfig22>;
  toolCalls?: Array<PostV2DeploymentsGetConfigToolCalls> | undefined;
};

/**
 * Unique ID that identifies a user. This is useful for tracking the same user across multiple requests
 */
export type UserId = string | number;

export type InvokeOptions = {
  /**
   * Whether to include the retrieved knowledge chunks in the response.
   */
  includeRetrievals?: boolean | undefined;
};

export type PostV2DeploymentsGetConfigRequestBody = {
  /**
   * The deployment id to invoke
   */
  key: string;
  /**
   * Key-value pairs variables to replace in your prompts. If a variable is not provided that is defined in the prompt, the default variables are used.
   */
  inputs?: { [k: string]: string | number | boolean } | undefined;
  /**
   * Key-value pairs that match your data model and fields declared in your configuration matrix. If you send multiple prompt keys, the context will be applied to the evaluation of each key.
   */
  context?: { [k: string]: any } | undefined;
  /**
   * A list of messages to include after the `System` message, but before the  `User` and `Assistant` pairs configured in your deployment.
   */
  prefixMessages?: Array<PrefixMessages> | undefined;
  /**
   * A list of messages to send to the deployment.
   */
  messages?: Array<Messages> | undefined;
  /**
   * A list of file IDs that are associated with the deployment request.
   */
  fileIds?: Array<string> | undefined;
  /**
   * Key-value pairs that you want to attach to the log generated by this request.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Unique ID that identifies a chaining operation. This is useful for tracking a chain of completions across multiple
   */
  chainId?: string | undefined;
  /**
   * Unique ID that identifies a chat conversation. This is useful for tracking the same conversation across multiple requests
   */
  conversationId?: string | undefined;
  /**
   * Unique ID that identifies a user. This is useful for tracking the same user across multiple requests
   */
  userId?: string | number | undefined;
  /**
   * Unique ID that identifies a deployment entity.
   */
  deploymentId?: string | undefined;
  /**
   * Unique ID that identifies a specific variant of a deployment.
   */
  deploymentVariantId?: string | undefined;
  /**
   * Utilized for passing additional parameters to the model provider. Exercise caution when using this feature, as the included parameters will overwrite any parameters specified in the deployment prompt configuration.
   */
  extraParams?: { [k: string]: any } | undefined;
  invokeOptions?: InvokeOptions | undefined;
};

/**
 * The type of the model. Current `chat`,`completion` and `image` are supported
 */
export const PostV2DeploymentsGetConfigDeploymentsPublicType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model. Current `chat`,`completion` and `image` are supported
 */
export type PostV2DeploymentsGetConfigDeploymentsPublicType = ClosedEnum<
  typeof PostV2DeploymentsGetConfigDeploymentsPublicType
>;

/**
 * The role of the prompt message
 */
export const PostV2DeploymentsGetConfigDeploymentsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type PostV2DeploymentsGetConfigDeploymentsRole = ClosedEnum<
  typeof PostV2DeploymentsGetConfigDeploymentsRole
>;

export const PostV2DeploymentsGetConfig2DeploymentsPublicResponseType = {
  ImageUrl: "image_url",
} as const;
export type PostV2DeploymentsGetConfig2DeploymentsPublicResponseType =
  ClosedEnum<typeof PostV2DeploymentsGetConfig2DeploymentsPublicResponseType>;

export type PostV2DeploymentsGetConfig2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type PostV2DeploymentsGetConfig2Deployments2 = {
  type: PostV2DeploymentsGetConfig2DeploymentsPublicResponseType;
  imageUrl: PostV2DeploymentsGetConfig2ImageUrl;
};

export const PostV2DeploymentsGetConfig2DeploymentsPublicType = {
  Text: "text",
} as const;
export type PostV2DeploymentsGetConfig2DeploymentsPublicType = ClosedEnum<
  typeof PostV2DeploymentsGetConfig2DeploymentsPublicType
>;

/**
 * Text content part of a prompt message
 */
export type PostV2DeploymentsGetConfig21 = {
  type: PostV2DeploymentsGetConfig2DeploymentsPublicType;
  text: string;
};

export type PostV2DeploymentsGetConfigContent2 =
  | PostV2DeploymentsGetConfig21
  | PostV2DeploymentsGetConfig2Deployments2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type PostV2DeploymentsGetConfigDeploymentsContent =
  | string
  | Array<
    PostV2DeploymentsGetConfig21 | PostV2DeploymentsGetConfig2Deployments2
  >;

export const PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type = {
  Function: "function",
} as const;
export type PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type =
  ClosedEnum<typeof PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type>;

export type PostV2DeploymentsGetConfigDeploymentsPublicFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type PostV2DeploymentsGetConfigDeploymentsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type;
  function: PostV2DeploymentsGetConfigDeploymentsPublicFunction;
};

export type PostV2DeploymentsGetConfigMessages = {
  /**
   * The role of the prompt message
   */
  role: PostV2DeploymentsGetConfigDeploymentsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      PostV2DeploymentsGetConfig21 | PostV2DeploymentsGetConfig2Deployments2
    >;
  toolCalls?: Array<PostV2DeploymentsGetConfigDeploymentsToolCalls> | undefined;
};

/**
 * Only supported on `image` models.
 */
export const Format = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type Format = ClosedEnum<typeof Format>;

/**
 * Only supported on `image` models.
 */
export const PostV2DeploymentsGetConfigQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type PostV2DeploymentsGetConfigQuality = ClosedEnum<
  typeof PostV2DeploymentsGetConfigQuality
>;

export const PostV2DeploymentsGetConfigResponseFormatType = {
  JsonObject: "json_object",
} as const;
export type PostV2DeploymentsGetConfigResponseFormatType = ClosedEnum<
  typeof PostV2DeploymentsGetConfigResponseFormatType
>;

export type ResponseFormat2 = {
  type: PostV2DeploymentsGetConfigResponseFormatType;
};

export const ResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type ResponseFormatType = ClosedEnum<typeof ResponseFormatType>;

export type JsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type ResponseFormat1 = {
  type: ResponseFormatType;
  jsonSchema: JsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type PostV2DeploymentsGetConfigResponseFormat =
  | ResponseFormat2
  | ResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const PhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type PhotoRealVersion = ClosedEnum<typeof PhotoRealVersion>;

/**
 * The format to return the embeddings
 */
export const PostV2DeploymentsGetConfigEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type PostV2DeploymentsGetConfigEncodingFormat = ClosedEnum<
  typeof PostV2DeploymentsGetConfigEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type PostV2DeploymentsGetConfigParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: Format | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: PostV2DeploymentsGetConfigQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?: ResponseFormat2 | ResponseFormat1 | null | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: PhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: PostV2DeploymentsGetConfigEncodingFormat | undefined;
};

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const PostV2DeploymentsGetConfigDeploymentsPublicResponseType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type PostV2DeploymentsGetConfigDeploymentsPublicResponseType =
  ClosedEnum<typeof PostV2DeploymentsGetConfigDeploymentsPublicResponseType>;

export type PostV2DeploymentsGetConfigDeploymentsFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object.
   *
   * @remarks
   *
   *  Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters?: { [k: string]: any } | undefined;
};

export type PostV2DeploymentsGetConfigTools = {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: PostV2DeploymentsGetConfigDeploymentsPublicResponseType;
  function: PostV2DeploymentsGetConfigDeploymentsFunction;
};

/**
 * The deployment configuration
 */
export type PostV2DeploymentsGetConfigResponseBody = {
  /**
   * A unique identifier for the response. Can be used to add metrics to the transaction.
   */
  id: string;
  /**
   * The provider of the model
   */
  provider: string;
  /**
   * The model of the configuration
   */
  model: string;
  /**
   * The type of the model. Current `chat`,`completion` and `image` are supported
   */
  type?: PostV2DeploymentsGetConfigDeploymentsPublicType | undefined;
  messages: Array<PostV2DeploymentsGetConfigMessages>;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  parameters: PostV2DeploymentsGetConfigParameters;
  /**
   * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.
   */
  tools?: Array<PostV2DeploymentsGetConfigTools> | undefined;
};

/** @internal */
export const Inputs$inboundSchema: z.ZodType<Inputs, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type Inputs$Outbound = string | number | boolean;

/** @internal */
export const Inputs$outboundSchema: z.ZodType<
  Inputs$Outbound,
  z.ZodTypeDef,
  Inputs
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Inputs$ {
  /** @deprecated use `Inputs$inboundSchema` instead. */
  export const inboundSchema = Inputs$inboundSchema;
  /** @deprecated use `Inputs$outboundSchema` instead. */
  export const outboundSchema = Inputs$outboundSchema;
  /** @deprecated use `Inputs$Outbound` instead. */
  export type Outbound = Inputs$Outbound;
}

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const TwoType$inboundSchema: z.ZodNativeEnum<typeof TwoType> = z
  .nativeEnum(TwoType);

/** @internal */
export const TwoType$outboundSchema: z.ZodNativeEnum<typeof TwoType> =
  TwoType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TwoType$ {
  /** @deprecated use `TwoType$inboundSchema` instead. */
  export const inboundSchema = TwoType$inboundSchema;
  /** @deprecated use `TwoType$outboundSchema` instead. */
  export const outboundSchema = TwoType$outboundSchema;
}

/** @internal */
export const ImageUrl$inboundSchema: z.ZodType<
  ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const ImageUrl$outboundSchema: z.ZodType<
  ImageUrl$Outbound,
  z.ZodTypeDef,
  ImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageUrl$ {
  /** @deprecated use `ImageUrl$inboundSchema` instead. */
  export const inboundSchema = ImageUrl$inboundSchema;
  /** @deprecated use `ImageUrl$outboundSchema` instead. */
  export const outboundSchema = ImageUrl$outboundSchema;
  /** @deprecated use `ImageUrl$Outbound` instead. */
  export type Outbound = ImageUrl$Outbound;
}

/** @internal */
export const Two2$inboundSchema: z.ZodType<Two2, z.ZodTypeDef, unknown> = z
  .object({
    type: TwoType$inboundSchema,
    image_url: z.lazy(() => ImageUrl$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type Two2$Outbound = {
  type: string;
  image_url: ImageUrl$Outbound;
};

/** @internal */
export const Two2$outboundSchema: z.ZodType<Two2$Outbound, z.ZodTypeDef, Two2> =
  z.object({
    type: TwoType$outboundSchema,
    imageUrl: z.lazy(() => ImageUrl$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two2$ {
  /** @deprecated use `Two2$inboundSchema` instead. */
  export const inboundSchema = Two2$inboundSchema;
  /** @deprecated use `Two2$outboundSchema` instead. */
  export const outboundSchema = Two2$outboundSchema;
  /** @deprecated use `Two2$Outbound` instead. */
  export type Outbound = Two2$Outbound;
}

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({
    type: Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type One$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({
    type: Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z.union(
  [z.lazy(() => One$inboundSchema), z.lazy(() => Two2$inboundSchema)],
);

/** @internal */
export type Two$Outbound = One$Outbound | Two2$Outbound;

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z
  .union([z.lazy(() => One$outboundSchema), z.lazy(() => Two2$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
  /** @deprecated use `Two$inboundSchema` instead. */
  export const inboundSchema = Two$inboundSchema;
  /** @deprecated use `Two$outboundSchema` instead. */
  export const outboundSchema = Two$outboundSchema;
  /** @deprecated use `Two$Outbound` instead. */
  export type Outbound = Two$Outbound;
}

/** @internal */
export const Content$inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> =
  z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => One$inboundSchema),
      z.lazy(() => Two2$inboundSchema),
    ])),
  ]);

/** @internal */
export type Content$Outbound = string | Array<One$Outbound | Two2$Outbound>;

/** @internal */
export const Content$outboundSchema: z.ZodType<
  Content$Outbound,
  z.ZodTypeDef,
  Content
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => One$outboundSchema),
    z.lazy(() => Two2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content$ {
  /** @deprecated use `Content$inboundSchema` instead. */
  export const inboundSchema = Content$inboundSchema;
  /** @deprecated use `Content$outboundSchema` instead. */
  export const outboundSchema = Content$outboundSchema;
  /** @deprecated use `Content$Outbound` instead. */
  export type Outbound = Content$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigType$inboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsGetConfigType
> = z.nativeEnum(PostV2DeploymentsGetConfigType);

/** @internal */
export const PostV2DeploymentsGetConfigType$outboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsGetConfigType
> = PostV2DeploymentsGetConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigType$ {
  /** @deprecated use `PostV2DeploymentsGetConfigType$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsGetConfigType$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigType$outboundSchema` instead. */
  export const outboundSchema = PostV2DeploymentsGetConfigType$outboundSchema;
}

/** @internal */
export const FunctionT$inboundSchema: z.ZodType<
  FunctionT,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type FunctionT$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const FunctionT$outboundSchema: z.ZodType<
  FunctionT$Outbound,
  z.ZodTypeDef,
  FunctionT
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionT$ {
  /** @deprecated use `FunctionT$inboundSchema` instead. */
  export const inboundSchema = FunctionT$inboundSchema;
  /** @deprecated use `FunctionT$outboundSchema` instead. */
  export const outboundSchema = FunctionT$outboundSchema;
  /** @deprecated use `FunctionT$Outbound` instead. */
  export type Outbound = FunctionT$Outbound;
}

/** @internal */
export const ToolCalls$inboundSchema: z.ZodType<
  ToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: PostV2DeploymentsGetConfigType$inboundSchema,
  function: z.lazy(() => FunctionT$inboundSchema),
});

/** @internal */
export type ToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: FunctionT$Outbound;
};

/** @internal */
export const ToolCalls$outboundSchema: z.ZodType<
  ToolCalls$Outbound,
  z.ZodTypeDef,
  ToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: PostV2DeploymentsGetConfigType$outboundSchema,
  function: z.lazy(() => FunctionT$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolCalls$ {
  /** @deprecated use `ToolCalls$inboundSchema` instead. */
  export const inboundSchema = ToolCalls$inboundSchema;
  /** @deprecated use `ToolCalls$outboundSchema` instead. */
  export const outboundSchema = ToolCalls$outboundSchema;
  /** @deprecated use `ToolCalls$Outbound` instead. */
  export type Outbound = ToolCalls$Outbound;
}

/** @internal */
export const PrefixMessages$inboundSchema: z.ZodType<
  PrefixMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: Role$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => One$inboundSchema),
      z.lazy(() => Two2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => ToolCalls$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type PrefixMessages$Outbound = {
  role: string;
  content: string | Array<One$Outbound | Two2$Outbound>;
  tool_calls?: Array<ToolCalls$Outbound> | undefined;
};

/** @internal */
export const PrefixMessages$outboundSchema: z.ZodType<
  PrefixMessages$Outbound,
  z.ZodTypeDef,
  PrefixMessages
> = z.object({
  role: Role$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => One$outboundSchema),
      z.lazy(() => Two2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => ToolCalls$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefixMessages$ {
  /** @deprecated use `PrefixMessages$inboundSchema` instead. */
  export const inboundSchema = PrefixMessages$inboundSchema;
  /** @deprecated use `PrefixMessages$outboundSchema` instead. */
  export const outboundSchema = PrefixMessages$outboundSchema;
  /** @deprecated use `PrefixMessages$Outbound` instead. */
  export type Outbound = PrefixMessages$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigRole$inboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsGetConfigRole
> = z.nativeEnum(PostV2DeploymentsGetConfigRole);

/** @internal */
export const PostV2DeploymentsGetConfigRole$outboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsGetConfigRole
> = PostV2DeploymentsGetConfigRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigRole$ {
  /** @deprecated use `PostV2DeploymentsGetConfigRole$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsGetConfigRole$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigRole$outboundSchema` instead. */
  export const outboundSchema = PostV2DeploymentsGetConfigRole$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsGetConfig2DeploymentsType$inboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfig2DeploymentsType> = z
    .nativeEnum(PostV2DeploymentsGetConfig2DeploymentsType);

/** @internal */
export const PostV2DeploymentsGetConfig2DeploymentsType$outboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfig2DeploymentsType> =
    PostV2DeploymentsGetConfig2DeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfig2DeploymentsType$ {
  /** @deprecated use `PostV2DeploymentsGetConfig2DeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfig2DeploymentsType$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfig2DeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfig2DeploymentsType$outboundSchema;
}

/** @internal */
export const TwoImageUrl$inboundSchema: z.ZodType<
  TwoImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type TwoImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const TwoImageUrl$outboundSchema: z.ZodType<
  TwoImageUrl$Outbound,
  z.ZodTypeDef,
  TwoImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TwoImageUrl$ {
  /** @deprecated use `TwoImageUrl$inboundSchema` instead. */
  export const inboundSchema = TwoImageUrl$inboundSchema;
  /** @deprecated use `TwoImageUrl$outboundSchema` instead. */
  export const outboundSchema = TwoImageUrl$outboundSchema;
  /** @deprecated use `TwoImageUrl$Outbound` instead. */
  export type Outbound = TwoImageUrl$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfig22$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfig22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PostV2DeploymentsGetConfig2DeploymentsType$inboundSchema,
  image_url: z.lazy(() => TwoImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type PostV2DeploymentsGetConfig22$Outbound = {
  type: string;
  image_url: TwoImageUrl$Outbound;
};

/** @internal */
export const PostV2DeploymentsGetConfig22$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfig22$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfig22
> = z.object({
  type: PostV2DeploymentsGetConfig2DeploymentsType$outboundSchema,
  imageUrl: z.lazy(() => TwoImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfig22$ {
  /** @deprecated use `PostV2DeploymentsGetConfig22$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsGetConfig22$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfig22$outboundSchema` instead. */
  export const outboundSchema = PostV2DeploymentsGetConfig22$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfig22$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfig22$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfig2Type$inboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsGetConfig2Type
> = z.nativeEnum(PostV2DeploymentsGetConfig2Type);

/** @internal */
export const PostV2DeploymentsGetConfig2Type$outboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsGetConfig2Type
> = PostV2DeploymentsGetConfig2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfig2Type$ {
  /** @deprecated use `PostV2DeploymentsGetConfig2Type$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsGetConfig2Type$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfig2Type$outboundSchema` instead. */
  export const outboundSchema = PostV2DeploymentsGetConfig2Type$outboundSchema;
}

/** @internal */
export const Two1$inboundSchema: z.ZodType<Two1, z.ZodTypeDef, unknown> = z
  .object({
    type: PostV2DeploymentsGetConfig2Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type Two1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const Two1$outboundSchema: z.ZodType<Two1$Outbound, z.ZodTypeDef, Two1> =
  z.object({
    type: PostV2DeploymentsGetConfig2Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two1$ {
  /** @deprecated use `Two1$inboundSchema` instead. */
  export const inboundSchema = Two1$inboundSchema;
  /** @deprecated use `Two1$outboundSchema` instead. */
  export const outboundSchema = Two1$outboundSchema;
  /** @deprecated use `Two1$Outbound` instead. */
  export type Outbound = Two1$Outbound;
}

/** @internal */
export const Content2$inboundSchema: z.ZodType<
  Content2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Two1$inboundSchema),
  z.lazy(() => PostV2DeploymentsGetConfig22$inboundSchema),
]);

/** @internal */
export type Content2$Outbound =
  | Two1$Outbound
  | PostV2DeploymentsGetConfig22$Outbound;

/** @internal */
export const Content2$outboundSchema: z.ZodType<
  Content2$Outbound,
  z.ZodTypeDef,
  Content2
> = z.union([
  z.lazy(() => Two1$outboundSchema),
  z.lazy(() => PostV2DeploymentsGetConfig22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content2$ {
  /** @deprecated use `Content2$inboundSchema` instead. */
  export const inboundSchema = Content2$inboundSchema;
  /** @deprecated use `Content2$outboundSchema` instead. */
  export const outboundSchema = Content2$outboundSchema;
  /** @deprecated use `Content2$Outbound` instead. */
  export type Outbound = Content2$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigContent$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => Two1$inboundSchema),
    z.lazy(() => PostV2DeploymentsGetConfig22$inboundSchema),
  ])),
]);

/** @internal */
export type PostV2DeploymentsGetConfigContent$Outbound =
  | string
  | Array<Two1$Outbound | PostV2DeploymentsGetConfig22$Outbound>;

/** @internal */
export const PostV2DeploymentsGetConfigContent$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigContent$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfigContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => Two1$outboundSchema),
    z.lazy(() => PostV2DeploymentsGetConfig22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigContent$ {
  /** @deprecated use `PostV2DeploymentsGetConfigContent$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsGetConfigContent$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigContent$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigContent$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigContent$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfigContent$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsType$inboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfigDeploymentsType> = z
    .nativeEnum(PostV2DeploymentsGetConfigDeploymentsType);

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsType$outboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfigDeploymentsType> =
    PostV2DeploymentsGetConfigDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigDeploymentsType$ {
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigDeploymentsType$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigDeploymentsType$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsGetConfigFunction$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type PostV2DeploymentsGetConfigFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const PostV2DeploymentsGetConfigFunction$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigFunction$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfigFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigFunction$ {
  /** @deprecated use `PostV2DeploymentsGetConfigFunction$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsGetConfigFunction$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigFunction$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigFunction$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigFunction$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfigFunction$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigToolCalls$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: PostV2DeploymentsGetConfigDeploymentsType$inboundSchema,
  function: z.lazy(() => PostV2DeploymentsGetConfigFunction$inboundSchema),
});

/** @internal */
export type PostV2DeploymentsGetConfigToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: PostV2DeploymentsGetConfigFunction$Outbound;
};

/** @internal */
export const PostV2DeploymentsGetConfigToolCalls$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigToolCalls$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfigToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: PostV2DeploymentsGetConfigDeploymentsType$outboundSchema,
  function: z.lazy(() => PostV2DeploymentsGetConfigFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigToolCalls$ {
  /** @deprecated use `PostV2DeploymentsGetConfigToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigToolCalls$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigToolCalls$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigToolCalls$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfigToolCalls$Outbound;
}

/** @internal */
export const Messages$inboundSchema: z.ZodType<
  Messages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: PostV2DeploymentsGetConfigRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => Two1$inboundSchema),
      z.lazy(() => PostV2DeploymentsGetConfig22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => PostV2DeploymentsGetConfigToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type Messages$Outbound = {
  role: string;
  content:
    | string
    | Array<Two1$Outbound | PostV2DeploymentsGetConfig22$Outbound>;
  tool_calls?: Array<PostV2DeploymentsGetConfigToolCalls$Outbound> | undefined;
};

/** @internal */
export const Messages$outboundSchema: z.ZodType<
  Messages$Outbound,
  z.ZodTypeDef,
  Messages
> = z.object({
  role: PostV2DeploymentsGetConfigRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => Two1$outboundSchema),
      z.lazy(() => PostV2DeploymentsGetConfig22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => PostV2DeploymentsGetConfigToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages$ {
  /** @deprecated use `Messages$inboundSchema` instead. */
  export const inboundSchema = Messages$inboundSchema;
  /** @deprecated use `Messages$outboundSchema` instead. */
  export const outboundSchema = Messages$outboundSchema;
  /** @deprecated use `Messages$Outbound` instead. */
  export type Outbound = Messages$Outbound;
}

/** @internal */
export const UserId$inboundSchema: z.ZodType<UserId, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number()]);

/** @internal */
export type UserId$Outbound = string | number;

/** @internal */
export const UserId$outboundSchema: z.ZodType<
  UserId$Outbound,
  z.ZodTypeDef,
  UserId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserId$ {
  /** @deprecated use `UserId$inboundSchema` instead. */
  export const inboundSchema = UserId$inboundSchema;
  /** @deprecated use `UserId$outboundSchema` instead. */
  export const outboundSchema = UserId$outboundSchema;
  /** @deprecated use `UserId$Outbound` instead. */
  export type Outbound = UserId$Outbound;
}

/** @internal */
export const InvokeOptions$inboundSchema: z.ZodType<
  InvokeOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_retrievals: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "include_retrievals": "includeRetrievals",
  });
});

/** @internal */
export type InvokeOptions$Outbound = {
  include_retrievals: boolean;
};

/** @internal */
export const InvokeOptions$outboundSchema: z.ZodType<
  InvokeOptions$Outbound,
  z.ZodTypeDef,
  InvokeOptions
> = z.object({
  includeRetrievals: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    includeRetrievals: "include_retrievals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeOptions$ {
  /** @deprecated use `InvokeOptions$inboundSchema` instead. */
  export const inboundSchema = InvokeOptions$inboundSchema;
  /** @deprecated use `InvokeOptions$outboundSchema` instead. */
  export const outboundSchema = InvokeOptions$outboundSchema;
  /** @deprecated use `InvokeOptions$Outbound` instead. */
  export type Outbound = InvokeOptions$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigRequestBody$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  inputs: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  context: z.record(z.any()).optional(),
  prefix_messages: z.array(z.lazy(() => PrefixMessages$inboundSchema))
    .optional(),
  messages: z.array(z.lazy(() => Messages$inboundSchema)).optional(),
  file_ids: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
  chain_id: z.string().optional(),
  conversation_id: z.string().optional(),
  user_id: z.union([z.string(), z.number()]).optional(),
  deployment_id: z.string().optional(),
  deployment_variant_id: z.string().optional(),
  extra_params: z.record(z.any()).optional(),
  invoke_options: z.lazy(() => InvokeOptions$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "prefix_messages": "prefixMessages",
    "file_ids": "fileIds",
    "chain_id": "chainId",
    "conversation_id": "conversationId",
    "user_id": "userId",
    "deployment_id": "deploymentId",
    "deployment_variant_id": "deploymentVariantId",
    "extra_params": "extraParams",
    "invoke_options": "invokeOptions",
  });
});

/** @internal */
export type PostV2DeploymentsGetConfigRequestBody$Outbound = {
  key: string;
  inputs?: { [k: string]: string | number | boolean } | undefined;
  context?: { [k: string]: any } | undefined;
  prefix_messages?: Array<PrefixMessages$Outbound> | undefined;
  messages?: Array<Messages$Outbound> | undefined;
  file_ids?: Array<string> | undefined;
  metadata?: { [k: string]: any } | undefined;
  chain_id?: string | undefined;
  conversation_id?: string | undefined;
  user_id?: string | number | undefined;
  deployment_id?: string | undefined;
  deployment_variant_id?: string | undefined;
  extra_params?: { [k: string]: any } | undefined;
  invoke_options?: InvokeOptions$Outbound | undefined;
};

/** @internal */
export const PostV2DeploymentsGetConfigRequestBody$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfigRequestBody
> = z.object({
  key: z.string(),
  inputs: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  context: z.record(z.any()).optional(),
  prefixMessages: z.array(z.lazy(() => PrefixMessages$outboundSchema))
    .optional(),
  messages: z.array(z.lazy(() => Messages$outboundSchema)).optional(),
  fileIds: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
  chainId: z.string().optional(),
  conversationId: z.string().optional(),
  userId: z.union([z.string(), z.number()]).optional(),
  deploymentId: z.string().optional(),
  deploymentVariantId: z.string().optional(),
  extraParams: z.record(z.any()).optional(),
  invokeOptions: z.lazy(() => InvokeOptions$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    prefixMessages: "prefix_messages",
    fileIds: "file_ids",
    chainId: "chain_id",
    conversationId: "conversation_id",
    userId: "user_id",
    deploymentId: "deployment_id",
    deploymentVariantId: "deployment_variant_id",
    extraParams: "extra_params",
    invokeOptions: "invoke_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigRequestBody$ {
  /** @deprecated use `PostV2DeploymentsGetConfigRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigRequestBody$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigRequestBody$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigRequestBody$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfigRequestBody$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsPublicType$inboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfigDeploymentsPublicType> = z
    .nativeEnum(PostV2DeploymentsGetConfigDeploymentsPublicType);

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsPublicType$outboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfigDeploymentsPublicType> =
    PostV2DeploymentsGetConfigDeploymentsPublicType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigDeploymentsPublicType$ {
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsPublicType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigDeploymentsPublicType$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsPublicType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigDeploymentsPublicType$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsRole$inboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfigDeploymentsRole> = z
    .nativeEnum(PostV2DeploymentsGetConfigDeploymentsRole);

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsRole$outboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfigDeploymentsRole> =
    PostV2DeploymentsGetConfigDeploymentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigDeploymentsRole$ {
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsRole$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigDeploymentsRole$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsRole$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigDeploymentsRole$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsGetConfig2DeploymentsPublicResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof PostV2DeploymentsGetConfig2DeploymentsPublicResponseType
  > = z.nativeEnum(PostV2DeploymentsGetConfig2DeploymentsPublicResponseType);

/** @internal */
export const PostV2DeploymentsGetConfig2DeploymentsPublicResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof PostV2DeploymentsGetConfig2DeploymentsPublicResponseType
  > = PostV2DeploymentsGetConfig2DeploymentsPublicResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfig2DeploymentsPublicResponseType$ {
  /** @deprecated use `PostV2DeploymentsGetConfig2DeploymentsPublicResponseType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfig2DeploymentsPublicResponseType$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfig2DeploymentsPublicResponseType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfig2DeploymentsPublicResponseType$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsGetConfig2ImageUrl$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfig2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type PostV2DeploymentsGetConfig2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const PostV2DeploymentsGetConfig2ImageUrl$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfig2ImageUrl$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfig2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfig2ImageUrl$ {
  /** @deprecated use `PostV2DeploymentsGetConfig2ImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfig2ImageUrl$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfig2ImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfig2ImageUrl$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfig2ImageUrl$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfig2ImageUrl$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfig2Deployments2$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfig2Deployments2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PostV2DeploymentsGetConfig2DeploymentsPublicResponseType$inboundSchema,
  image_url: z.lazy(() => PostV2DeploymentsGetConfig2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type PostV2DeploymentsGetConfig2Deployments2$Outbound = {
  type: string;
  image_url: PostV2DeploymentsGetConfig2ImageUrl$Outbound;
};

/** @internal */
export const PostV2DeploymentsGetConfig2Deployments2$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfig2Deployments2$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfig2Deployments2
> = z.object({
  type: PostV2DeploymentsGetConfig2DeploymentsPublicResponseType$outboundSchema,
  imageUrl: z.lazy(() => PostV2DeploymentsGetConfig2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfig2Deployments2$ {
  /** @deprecated use `PostV2DeploymentsGetConfig2Deployments2$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfig2Deployments2$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfig2Deployments2$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfig2Deployments2$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfig2Deployments2$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfig2Deployments2$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfig2DeploymentsPublicType$inboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfig2DeploymentsPublicType> = z
    .nativeEnum(PostV2DeploymentsGetConfig2DeploymentsPublicType);

/** @internal */
export const PostV2DeploymentsGetConfig2DeploymentsPublicType$outboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfig2DeploymentsPublicType> =
    PostV2DeploymentsGetConfig2DeploymentsPublicType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfig2DeploymentsPublicType$ {
  /** @deprecated use `PostV2DeploymentsGetConfig2DeploymentsPublicType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfig2DeploymentsPublicType$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfig2DeploymentsPublicType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfig2DeploymentsPublicType$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsGetConfig21$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfig21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PostV2DeploymentsGetConfig2DeploymentsPublicType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type PostV2DeploymentsGetConfig21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const PostV2DeploymentsGetConfig21$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfig21$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfig21
> = z.object({
  type: PostV2DeploymentsGetConfig2DeploymentsPublicType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfig21$ {
  /** @deprecated use `PostV2DeploymentsGetConfig21$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsGetConfig21$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfig21$outboundSchema` instead. */
  export const outboundSchema = PostV2DeploymentsGetConfig21$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfig21$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfig21$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigContent2$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostV2DeploymentsGetConfig21$inboundSchema),
  z.lazy(() => PostV2DeploymentsGetConfig2Deployments2$inboundSchema),
]);

/** @internal */
export type PostV2DeploymentsGetConfigContent2$Outbound =
  | PostV2DeploymentsGetConfig21$Outbound
  | PostV2DeploymentsGetConfig2Deployments2$Outbound;

/** @internal */
export const PostV2DeploymentsGetConfigContent2$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigContent2$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfigContent2
> = z.union([
  z.lazy(() => PostV2DeploymentsGetConfig21$outboundSchema),
  z.lazy(() => PostV2DeploymentsGetConfig2Deployments2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigContent2$ {
  /** @deprecated use `PostV2DeploymentsGetConfigContent2$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsGetConfigContent2$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigContent2$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigContent2$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigContent2$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfigContent2$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsContent$inboundSchema:
  z.ZodType<
    PostV2DeploymentsGetConfigDeploymentsContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => PostV2DeploymentsGetConfig21$inboundSchema),
      z.lazy(() => PostV2DeploymentsGetConfig2Deployments2$inboundSchema),
    ])),
  ]);

/** @internal */
export type PostV2DeploymentsGetConfigDeploymentsContent$Outbound =
  | string
  | Array<
    | PostV2DeploymentsGetConfig21$Outbound
    | PostV2DeploymentsGetConfig2Deployments2$Outbound
  >;

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsContent$outboundSchema:
  z.ZodType<
    PostV2DeploymentsGetConfigDeploymentsContent$Outbound,
    z.ZodTypeDef,
    PostV2DeploymentsGetConfigDeploymentsContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => PostV2DeploymentsGetConfig21$outboundSchema),
      z.lazy(() => PostV2DeploymentsGetConfig2Deployments2$outboundSchema),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigDeploymentsContent$ {
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsContent$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigDeploymentsContent$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsContent$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigDeploymentsContent$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsContent$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfigDeploymentsContent$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type
  > = z.nativeEnum(PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type);

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type
  > = PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type$ {
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsPublicFunction$inboundSchema:
  z.ZodType<
    PostV2DeploymentsGetConfigDeploymentsPublicFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type PostV2DeploymentsGetConfigDeploymentsPublicFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsPublicFunction$outboundSchema:
  z.ZodType<
    PostV2DeploymentsGetConfigDeploymentsPublicFunction$Outbound,
    z.ZodTypeDef,
    PostV2DeploymentsGetConfigDeploymentsPublicFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigDeploymentsPublicFunction$ {
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsPublicFunction$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigDeploymentsPublicFunction$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsPublicFunction$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigDeploymentsPublicFunction$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsPublicFunction$Outbound` instead. */
  export type Outbound =
    PostV2DeploymentsGetConfigDeploymentsPublicFunction$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsToolCalls$inboundSchema:
  z.ZodType<
    PostV2DeploymentsGetConfigDeploymentsToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type$inboundSchema,
    function: z.lazy(() =>
      PostV2DeploymentsGetConfigDeploymentsPublicFunction$inboundSchema
    ),
  });

/** @internal */
export type PostV2DeploymentsGetConfigDeploymentsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: PostV2DeploymentsGetConfigDeploymentsPublicFunction$Outbound;
};

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsToolCalls$outboundSchema:
  z.ZodType<
    PostV2DeploymentsGetConfigDeploymentsToolCalls$Outbound,
    z.ZodTypeDef,
    PostV2DeploymentsGetConfigDeploymentsToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      PostV2DeploymentsGetConfigDeploymentsPublicResponse200Type$outboundSchema,
    function: z.lazy(() =>
      PostV2DeploymentsGetConfigDeploymentsPublicFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigDeploymentsToolCalls$ {
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigDeploymentsToolCalls$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigDeploymentsToolCalls$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsToolCalls$Outbound` instead. */
  export type Outbound =
    PostV2DeploymentsGetConfigDeploymentsToolCalls$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigMessages$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: PostV2DeploymentsGetConfigDeploymentsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => PostV2DeploymentsGetConfig21$inboundSchema),
      z.lazy(() => PostV2DeploymentsGetConfig2Deployments2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => PostV2DeploymentsGetConfigDeploymentsToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type PostV2DeploymentsGetConfigMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | PostV2DeploymentsGetConfig21$Outbound
      | PostV2DeploymentsGetConfig2Deployments2$Outbound
    >;
  tool_calls?:
    | Array<PostV2DeploymentsGetConfigDeploymentsToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const PostV2DeploymentsGetConfigMessages$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigMessages$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfigMessages
> = z.object({
  role: PostV2DeploymentsGetConfigDeploymentsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => PostV2DeploymentsGetConfig21$outboundSchema),
      z.lazy(() => PostV2DeploymentsGetConfig2Deployments2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => PostV2DeploymentsGetConfigDeploymentsToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigMessages$ {
  /** @deprecated use `PostV2DeploymentsGetConfigMessages$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsGetConfigMessages$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigMessages$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigMessages$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigMessages$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfigMessages$Outbound;
}

/** @internal */
export const Format$inboundSchema: z.ZodNativeEnum<typeof Format> = z
  .nativeEnum(Format);

/** @internal */
export const Format$outboundSchema: z.ZodNativeEnum<typeof Format> =
  Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
  /** @deprecated use `Format$inboundSchema` instead. */
  export const inboundSchema = Format$inboundSchema;
  /** @deprecated use `Format$outboundSchema` instead. */
  export const outboundSchema = Format$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsGetConfigQuality$inboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsGetConfigQuality
> = z.nativeEnum(PostV2DeploymentsGetConfigQuality);

/** @internal */
export const PostV2DeploymentsGetConfigQuality$outboundSchema: z.ZodNativeEnum<
  typeof PostV2DeploymentsGetConfigQuality
> = PostV2DeploymentsGetConfigQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigQuality$ {
  /** @deprecated use `PostV2DeploymentsGetConfigQuality$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsGetConfigQuality$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigQuality$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigQuality$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsGetConfigResponseFormatType$inboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfigResponseFormatType> = z
    .nativeEnum(PostV2DeploymentsGetConfigResponseFormatType);

/** @internal */
export const PostV2DeploymentsGetConfigResponseFormatType$outboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfigResponseFormatType> =
    PostV2DeploymentsGetConfigResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigResponseFormatType$ {
  /** @deprecated use `PostV2DeploymentsGetConfigResponseFormatType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigResponseFormatType$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigResponseFormatType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigResponseFormatType$outboundSchema;
}

/** @internal */
export const ResponseFormat2$inboundSchema: z.ZodType<
  ResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PostV2DeploymentsGetConfigResponseFormatType$inboundSchema,
});

/** @internal */
export type ResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const ResponseFormat2$outboundSchema: z.ZodType<
  ResponseFormat2$Outbound,
  z.ZodTypeDef,
  ResponseFormat2
> = z.object({
  type: PostV2DeploymentsGetConfigResponseFormatType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat2$ {
  /** @deprecated use `ResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = ResponseFormat2$inboundSchema;
  /** @deprecated use `ResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = ResponseFormat2$outboundSchema;
  /** @deprecated use `ResponseFormat2$Outbound` instead. */
  export type Outbound = ResponseFormat2$Outbound;
}

/** @internal */
export const ResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatType
> = z.nativeEnum(ResponseFormatType);

/** @internal */
export const ResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatType
> = ResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatType$ {
  /** @deprecated use `ResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatType$inboundSchema;
  /** @deprecated use `ResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatType$outboundSchema;
}

/** @internal */
export const JsonSchema$inboundSchema: z.ZodType<
  JsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type JsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const JsonSchema$outboundSchema: z.ZodType<
  JsonSchema$Outbound,
  z.ZodTypeDef,
  JsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JsonSchema$ {
  /** @deprecated use `JsonSchema$inboundSchema` instead. */
  export const inboundSchema = JsonSchema$inboundSchema;
  /** @deprecated use `JsonSchema$outboundSchema` instead. */
  export const outboundSchema = JsonSchema$outboundSchema;
  /** @deprecated use `JsonSchema$Outbound` instead. */
  export type Outbound = JsonSchema$Outbound;
}

/** @internal */
export const ResponseFormat1$inboundSchema: z.ZodType<
  ResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponseFormatType$inboundSchema,
  json_schema: z.lazy(() => JsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type ResponseFormat1$Outbound = {
  type: string;
  json_schema: JsonSchema$Outbound;
};

/** @internal */
export const ResponseFormat1$outboundSchema: z.ZodType<
  ResponseFormat1$Outbound,
  z.ZodTypeDef,
  ResponseFormat1
> = z.object({
  type: ResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() => JsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat1$ {
  /** @deprecated use `ResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = ResponseFormat1$inboundSchema;
  /** @deprecated use `ResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = ResponseFormat1$outboundSchema;
  /** @deprecated use `ResponseFormat1$Outbound` instead. */
  export type Outbound = ResponseFormat1$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigResponseFormat$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ResponseFormat2$inboundSchema),
  z.lazy(() => ResponseFormat1$inboundSchema),
]);

/** @internal */
export type PostV2DeploymentsGetConfigResponseFormat$Outbound =
  | ResponseFormat2$Outbound
  | ResponseFormat1$Outbound;

/** @internal */
export const PostV2DeploymentsGetConfigResponseFormat$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigResponseFormat$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfigResponseFormat
> = z.union([
  z.lazy(() => ResponseFormat2$outboundSchema),
  z.lazy(() => ResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigResponseFormat$ {
  /** @deprecated use `PostV2DeploymentsGetConfigResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigResponseFormat$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigResponseFormat$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigResponseFormat$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfigResponseFormat$Outbound;
}

/** @internal */
export const PhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof PhotoRealVersion
> = z.nativeEnum(PhotoRealVersion);

/** @internal */
export const PhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof PhotoRealVersion
> = PhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PhotoRealVersion$ {
  /** @deprecated use `PhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = PhotoRealVersion$inboundSchema;
  /** @deprecated use `PhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = PhotoRealVersion$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsGetConfigEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfigEncodingFormat> = z
    .nativeEnum(PostV2DeploymentsGetConfigEncodingFormat);

/** @internal */
export const PostV2DeploymentsGetConfigEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof PostV2DeploymentsGetConfigEncodingFormat> =
    PostV2DeploymentsGetConfigEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigEncodingFormat$ {
  /** @deprecated use `PostV2DeploymentsGetConfigEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigEncodingFormat$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigEncodingFormat$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsGetConfigParameters$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: Format$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: PostV2DeploymentsGetConfigQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => ResponseFormat2$inboundSchema),
      z.lazy(() => ResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: PhotoRealVersion$inboundSchema.optional(),
  encoding_format: PostV2DeploymentsGetConfigEncodingFormat$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type PostV2DeploymentsGetConfigParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | ResponseFormat2$Outbound
    | ResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const PostV2DeploymentsGetConfigParameters$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigParameters$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfigParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: Format$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: PostV2DeploymentsGetConfigQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => ResponseFormat2$outboundSchema),
      z.lazy(() => ResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: PhotoRealVersion$outboundSchema.optional(),
  encodingFormat: PostV2DeploymentsGetConfigEncodingFormat$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigParameters$ {
  /** @deprecated use `PostV2DeploymentsGetConfigParameters$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigParameters$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigParameters$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigParameters$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigParameters$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfigParameters$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsPublicResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof PostV2DeploymentsGetConfigDeploymentsPublicResponseType
  > = z.nativeEnum(PostV2DeploymentsGetConfigDeploymentsPublicResponseType);

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsPublicResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof PostV2DeploymentsGetConfigDeploymentsPublicResponseType
  > = PostV2DeploymentsGetConfigDeploymentsPublicResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigDeploymentsPublicResponseType$ {
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsPublicResponseType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigDeploymentsPublicResponseType$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsPublicResponseType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigDeploymentsPublicResponseType$outboundSchema;
}

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsFunction$inboundSchema:
  z.ZodType<
    PostV2DeploymentsGetConfigDeploymentsFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    description: z.string().optional(),
    parameters: z.record(z.any()).optional(),
  });

/** @internal */
export type PostV2DeploymentsGetConfigDeploymentsFunction$Outbound = {
  name: string;
  description?: string | undefined;
  parameters?: { [k: string]: any } | undefined;
};

/** @internal */
export const PostV2DeploymentsGetConfigDeploymentsFunction$outboundSchema:
  z.ZodType<
    PostV2DeploymentsGetConfigDeploymentsFunction$Outbound,
    z.ZodTypeDef,
    PostV2DeploymentsGetConfigDeploymentsFunction
  > = z.object({
    name: z.string(),
    description: z.string().optional(),
    parameters: z.record(z.any()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigDeploymentsFunction$ {
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsFunction$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigDeploymentsFunction$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsFunction$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigDeploymentsFunction$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigDeploymentsFunction$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfigDeploymentsFunction$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigTools$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PostV2DeploymentsGetConfigDeploymentsPublicResponseType$inboundSchema,
  function: z.lazy(() =>
    PostV2DeploymentsGetConfigDeploymentsFunction$inboundSchema
  ),
});

/** @internal */
export type PostV2DeploymentsGetConfigTools$Outbound = {
  type: string;
  function: PostV2DeploymentsGetConfigDeploymentsFunction$Outbound;
};

/** @internal */
export const PostV2DeploymentsGetConfigTools$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigTools$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfigTools
> = z.object({
  type: PostV2DeploymentsGetConfigDeploymentsPublicResponseType$outboundSchema,
  function: z.lazy(() =>
    PostV2DeploymentsGetConfigDeploymentsFunction$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigTools$ {
  /** @deprecated use `PostV2DeploymentsGetConfigTools$inboundSchema` instead. */
  export const inboundSchema = PostV2DeploymentsGetConfigTools$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigTools$outboundSchema` instead. */
  export const outboundSchema = PostV2DeploymentsGetConfigTools$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigTools$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfigTools$Outbound;
}

/** @internal */
export const PostV2DeploymentsGetConfigResponseBody$inboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  provider: z.string(),
  model: z.string(),
  type: PostV2DeploymentsGetConfigDeploymentsPublicType$inboundSchema
    .optional(),
  messages: z.array(
    z.lazy(() => PostV2DeploymentsGetConfigMessages$inboundSchema),
  ),
  parameters: z.lazy(() => PostV2DeploymentsGetConfigParameters$inboundSchema),
  tools: z.array(z.lazy(() => PostV2DeploymentsGetConfigTools$inboundSchema))
    .optional(),
});

/** @internal */
export type PostV2DeploymentsGetConfigResponseBody$Outbound = {
  id: string;
  provider: string;
  model: string;
  type?: string | undefined;
  messages: Array<PostV2DeploymentsGetConfigMessages$Outbound>;
  parameters: PostV2DeploymentsGetConfigParameters$Outbound;
  tools?: Array<PostV2DeploymentsGetConfigTools$Outbound> | undefined;
};

/** @internal */
export const PostV2DeploymentsGetConfigResponseBody$outboundSchema: z.ZodType<
  PostV2DeploymentsGetConfigResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2DeploymentsGetConfigResponseBody
> = z.object({
  id: z.string(),
  provider: z.string(),
  model: z.string(),
  type: PostV2DeploymentsGetConfigDeploymentsPublicType$outboundSchema
    .optional(),
  messages: z.array(
    z.lazy(() => PostV2DeploymentsGetConfigMessages$outboundSchema),
  ),
  parameters: z.lazy(() => PostV2DeploymentsGetConfigParameters$outboundSchema),
  tools: z.array(z.lazy(() => PostV2DeploymentsGetConfigTools$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2DeploymentsGetConfigResponseBody$ {
  /** @deprecated use `PostV2DeploymentsGetConfigResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2DeploymentsGetConfigResponseBody$inboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2DeploymentsGetConfigResponseBody$outboundSchema;
  /** @deprecated use `PostV2DeploymentsGetConfigResponseBody$Outbound` instead. */
  export type Outbound = PostV2DeploymentsGetConfigResponseBody$Outbound;
}
