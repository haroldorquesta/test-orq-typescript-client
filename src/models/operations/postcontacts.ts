/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * Update user information payload
 */
export type PostContactsRequestBody = {
  /**
   * Unique string value to identify the contact user in the customer's system
   */
  externalId: string;
  /**
   * Display name or nickname of the user
   */
  displayName?: string | null | undefined;
  /**
   * Email address of the user
   */
  email?: string | null | undefined;
  /**
   * URL linking to the user's avatar image
   */
  avatarUrl?: string | null | undefined;
  /**
   * Array of UUIDs representing tags associated with the user
   */
  tags?: Array<string> | undefined;
  /**
   * Additional custom metadata associated with the user as key-value pairs
   */
  metadata?: { [k: string]: any } | undefined;
};

/**
 * Successful operation
 */
export type PostContactsResponseBody = {
  /**
   * Indicate whether the contact have been added or updated.
   */
  success: boolean;
};

/** @internal */
export const PostContactsRequestBody$inboundSchema: z.ZodType<
  PostContactsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
  display_name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  avatar_url: z.nullable(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "display_name": "displayName",
    "avatar_url": "avatarUrl",
  });
});

/** @internal */
export type PostContactsRequestBody$Outbound = {
  external_id: string;
  display_name?: string | null | undefined;
  email?: string | null | undefined;
  avatar_url?: string | null | undefined;
  tags?: Array<string> | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const PostContactsRequestBody$outboundSchema: z.ZodType<
  PostContactsRequestBody$Outbound,
  z.ZodTypeDef,
  PostContactsRequestBody
> = z.object({
  externalId: z.string(),
  displayName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  avatarUrl: z.nullable(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    displayName: "display_name",
    avatarUrl: "avatar_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostContactsRequestBody$ {
  /** @deprecated use `PostContactsRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostContactsRequestBody$inboundSchema;
  /** @deprecated use `PostContactsRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostContactsRequestBody$outboundSchema;
  /** @deprecated use `PostContactsRequestBody$Outbound` instead. */
  export type Outbound = PostContactsRequestBody$Outbound;
}

/** @internal */
export const PostContactsResponseBody$inboundSchema: z.ZodType<
  PostContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
});

/** @internal */
export type PostContactsResponseBody$Outbound = {
  success: boolean;
};

/** @internal */
export const PostContactsResponseBody$outboundSchema: z.ZodType<
  PostContactsResponseBody$Outbound,
  z.ZodTypeDef,
  PostContactsResponseBody
> = z.object({
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostContactsResponseBody$ {
  /** @deprecated use `PostContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostContactsResponseBody$inboundSchema;
  /** @deprecated use `PostContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostContactsResponseBody$outboundSchema;
  /** @deprecated use `PostContactsResponseBody$Outbound` instead. */
  export type Outbound = PostContactsResponseBody$Outbound;
}
