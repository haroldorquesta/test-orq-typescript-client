/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The role of the messages author, in this case **tool**.
 */
export const PostV2RouterChatCompletionsMessagesRouterPublicRole = {
  Tool: "tool",
} as const;
/**
 * The role of the messages author, in this case **tool**.
 */
export type PostV2RouterChatCompletionsMessagesRouterPublicRole = ClosedEnum<
  typeof PostV2RouterChatCompletionsMessagesRouterPublicRole
>;

export const PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType =
  {
    ImageUrl: "image_url",
  } as const;
export type PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType =
  ClosedEnum<
    typeof PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType
  >;

/**
 * Specifies the detail level of the image.
 */
export const PostV2RouterChatCompletions2Detail = {
  Low: "low",
  High: "high",
  Auto: "auto",
} as const;
/**
 * Specifies the detail level of the image.
 */
export type PostV2RouterChatCompletions2Detail = ClosedEnum<
  typeof PostV2RouterChatCompletions2Detail
>;

export type PostV2RouterChatCompletions2RouterPublicImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded image data.
   */
  url: string;
  /**
   * Specifies the detail level of the image.
   */
  detail?: PostV2RouterChatCompletions2Detail | undefined;
};

export type PostV2RouterChatCompletions2RouterPublic2 = {
  type: PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType;
  imageUrl: PostV2RouterChatCompletions2RouterPublicImageUrl;
};

export const PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType = {
  Text: "text",
} as const;
export type PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType =
  ClosedEnum<
    typeof PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType
  >;

export type PostV2RouterChatCompletions2RouterPublic1 = {
  type: PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType;
  text: string;
};

export type PostV2RouterChatCompletionsContentRouterPublic2 =
  | PostV2RouterChatCompletions2RouterPublic1
  | PostV2RouterChatCompletions2RouterPublic2;

/**
 * The contents of a particular role's message.
 */
export type PostV2RouterChatCompletionsMessagesRouterPublicContent =
  | string
  | Array<
    | PostV2RouterChatCompletions2RouterPublic1
    | PostV2RouterChatCompletions2RouterPublic2
  >;

export type Four = {
  /**
   * The role of the messages author, in this case **tool**.
   */
  role: PostV2RouterChatCompletionsMessagesRouterPublicRole;
  toolCallId: string;
  /**
   * The contents of a particular role's message.
   */
  content:
    | string
    | Array<
      | PostV2RouterChatCompletions2RouterPublic1
      | PostV2RouterChatCompletions2RouterPublic2
    >;
};

/**
 * The role of the messages author, in this case **assistant**.
 */
export const PostV2RouterChatCompletionsMessagesRouterRole = {
  Assistant: "assistant",
} as const;
/**
 * The role of the messages author, in this case **assistant**.
 */
export type PostV2RouterChatCompletionsMessagesRouterRole = ClosedEnum<
  typeof PostV2RouterChatCompletionsMessagesRouterRole
>;

/**
 * The contents of the assistant message. Required unless tool_calls is specified.
 */
export type PostV2RouterChatCompletionsMessagesRouterContent =
  | string
  | Array<any>;

/**
 * The type of the tool. Currently, only **function** is supported.
 */
export const MessagesType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only **function** is supported.
 */
export type MessagesType = ClosedEnum<typeof MessagesType>;

/**
 * The function that the model called.
 */
export type MessagesFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments: string;
};

export type MessagesToolCalls = {
  /**
   * The ID of the tool call.
   */
  id: string;
  /**
   * The type of the tool. Currently, only **function** is supported.
   */
  type: MessagesType;
  /**
   * The function that the model called.
   */
  function: MessagesFunction;
};

export type Messages3 = {
  /**
   * The role of the messages author, in this case **assistant**.
   */
  role: PostV2RouterChatCompletionsMessagesRouterRole;
  /**
   * The contents of the assistant message. Required unless tool_calls is specified.
   */
  content?: string | Array<any> | undefined;
  /**
   * The refusal message by the assistant.
   */
  refusal?: string | null | undefined;
  /**
   * The tool calls generated by the model, such as function calls.
   */
  toolCalls: Array<MessagesToolCalls>;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
};

/**
 * The role of the messages author, in this case **user**.
 */
export const PostV2RouterChatCompletionsMessagesRole = {
  User: "user",
} as const;
/**
 * The role of the messages author, in this case **user**.
 */
export type PostV2RouterChatCompletionsMessagesRole = ClosedEnum<
  typeof PostV2RouterChatCompletionsMessagesRole
>;

export const PostV2RouterChatCompletions2RouterPublicRequestType = {
  ImageUrl: "image_url",
} as const;
export type PostV2RouterChatCompletions2RouterPublicRequestType = ClosedEnum<
  typeof PostV2RouterChatCompletions2RouterPublicRequestType
>;

/**
 * Specifies the detail level of the image.
 */
export const TwoDetail = {
  Low: "low",
  High: "high",
  Auto: "auto",
} as const;
/**
 * Specifies the detail level of the image.
 */
export type TwoDetail = ClosedEnum<typeof TwoDetail>;

export type PostV2RouterChatCompletions2RouterImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded image data.
   */
  url: string;
  /**
   * Specifies the detail level of the image.
   */
  detail?: TwoDetail | undefined;
};

export type PostV2RouterChatCompletions2Router2 = {
  type: PostV2RouterChatCompletions2RouterPublicRequestType;
  imageUrl: PostV2RouterChatCompletions2RouterImageUrl;
};

export const PostV2RouterChatCompletions2RouterPublicType = {
  Text: "text",
} as const;
export type PostV2RouterChatCompletions2RouterPublicType = ClosedEnum<
  typeof PostV2RouterChatCompletions2RouterPublicType
>;

export type PostV2RouterChatCompletions2Router1 = {
  type: PostV2RouterChatCompletions2RouterPublicType;
  text: string;
};

export type PostV2RouterChatCompletionsContentRouter2 =
  | PostV2RouterChatCompletions2Router1
  | PostV2RouterChatCompletions2Router2;

/**
 * The contents of a particular role's message.
 */
export type PostV2RouterChatCompletionsMessagesContent =
  | string
  | Array<
    PostV2RouterChatCompletions2Router1 | PostV2RouterChatCompletions2Router2
  >;

export type Messages2 = {
  /**
   * The role of the messages author, in this case **user**.
   */
  role: PostV2RouterChatCompletionsMessagesRole;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
  /**
   * The contents of a particular role's message.
   */
  content:
    | string
    | Array<
      PostV2RouterChatCompletions2Router1 | PostV2RouterChatCompletions2Router2
    >;
};

/**
 * The role of the messages author, in this case **system**.
 */
export const MessagesRole = {
  System: "system",
} as const;
/**
 * The role of the messages author, in this case **system**.
 */
export type MessagesRole = ClosedEnum<typeof MessagesRole>;

export const PostV2RouterChatCompletions2RouterType = {
  ImageUrl: "image_url",
} as const;
export type PostV2RouterChatCompletions2RouterType = ClosedEnum<
  typeof PostV2RouterChatCompletions2RouterType
>;

/**
 * Specifies the detail level of the image.
 */
export const Detail = {
  Low: "low",
  High: "high",
  Auto: "auto",
} as const;
/**
 * Specifies the detail level of the image.
 */
export type Detail = ClosedEnum<typeof Detail>;

export type PostV2RouterChatCompletions2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded image data.
   */
  url: string;
  /**
   * Specifies the detail level of the image.
   */
  detail?: Detail | undefined;
};

export type PostV2RouterChatCompletions22 = {
  type: PostV2RouterChatCompletions2RouterType;
  imageUrl: PostV2RouterChatCompletions2ImageUrl;
};

export const PostV2RouterChatCompletions2Type = {
  Text: "text",
} as const;
export type PostV2RouterChatCompletions2Type = ClosedEnum<
  typeof PostV2RouterChatCompletions2Type
>;

export type PostV2RouterChatCompletions21 = {
  type: PostV2RouterChatCompletions2Type;
  text: string;
};

export type PostV2RouterChatCompletionsContent2 =
  | PostV2RouterChatCompletions21
  | PostV2RouterChatCompletions22;

/**
 * The contents of a particular role's message.
 */
export type MessagesContent =
  | string
  | Array<PostV2RouterChatCompletions21 | PostV2RouterChatCompletions22>;

export type Messages1 = {
  /**
   * The role of the messages author, in this case **system**.
   */
  role: MessagesRole;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
  /**
   * The contents of a particular role's message.
   */
  content:
    | string
    | Array<PostV2RouterChatCompletions21 | PostV2RouterChatCompletions22>;
};

export type PostV2RouterChatCompletionsMessages =
  | Messages1
  | Messages2
  | Four
  | Messages3;

/**
 * The type of the tool. Currently, only function is supported.
 */
export const PostV2RouterChatCompletionsType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only function is supported.
 */
export type PostV2RouterChatCompletionsType = ClosedEnum<
  typeof PostV2RouterChatCompletionsType
>;

export const PostV2RouterChatCompletionsRouterType = {
  Object: "object",
} as const;
export type PostV2RouterChatCompletionsRouterType = ClosedEnum<
  typeof PostV2RouterChatCompletionsRouterType
>;

/**
 * The parameters the functions accepts, described as a JSON Schema object
 */
export type ParametersT = {
  type: PostV2RouterChatCompletionsRouterType;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
};

export type PostV2RouterChatCompletionsFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object
   */
  parameters?: ParametersT | undefined;
  /**
   * Whether to enable strict schema adherence when generating the function call.
   */
  strict?: boolean | null | undefined;
};

export type Tools = {
  /**
   * The type of the tool. Currently, only function is supported.
   */
  type: PostV2RouterChatCompletionsType;
  function: PostV2RouterChatCompletionsFunction;
};

/**
 * Creates a model response for the given chat conversation.
 */
export type PostV2RouterChatCompletionsRequestBody = {
  /**
   * ID of the model to use
   */
  model: string;
  /**
   * A list of messages comprising the conversation so far.
   */
  messages: Array<Messages1 | Messages2 | Four | Messages3>;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
   */
  frequencyPenalty?: number | null | undefined;
  /**
   * The maximum number of tokens that can be generated in the chat completion.
   */
  maxTokens?: number | null | undefined;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
   */
  presencePenalty?: number | null | undefined;
  /**
   * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result.
   */
  seed?: number | null | undefined;
  /**
   * If set, partial message deltas will be sent, like in ChatGPT.
   */
  stream?: boolean | null | undefined;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   */
  temperature?: number | null | undefined;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
   */
  topP?: number | null | undefined;
  /**
   * A list of tools the model may call.
   */
  tools?: Array<Tools> | undefined;
};

/**
 * A response body that follows the official OpenAI schema
 */
export type PostV2RouterChatCompletionsRouterResponseBody = {
  data: string;
  event?: string | undefined;
  id?: string | undefined;
  retry?: number | undefined;
};

/**
 * The reason the model stopped generating tokens.
 */
export const ResponseBodyFinishReason = {
  Stop: "stop",
  Length: "length",
  ContentFilter: "content_filter",
  ToolCalls: "tool_calls",
} as const;
/**
 * The reason the model stopped generating tokens.
 */
export type ResponseBodyFinishReason = ClosedEnum<
  typeof ResponseBodyFinishReason
>;

export type PostV2RouterChatCompletionsResponseBodyTopLogprobs = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
};

export type PostV2RouterChatCompletionsResponseBodyContent = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
  /**
   * List of the most likely tokens and their log probability, at this token position.
   */
  topLogprobs: Array<PostV2RouterChatCompletionsResponseBodyTopLogprobs>;
};

export type PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
};

export type ResponseBodyRefusal = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
  /**
   * List of the most likely tokens and their log probability, at this token position.
   */
  topLogprobs: Array<PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs>;
};

/**
 * Log probability information for the choice.
 */
export type ResponseBodyLogprobs = {
  /**
   * A list of message content tokens with log probability information.
   */
  content: Array<PostV2RouterChatCompletionsResponseBodyContent> | null;
  /**
   * A list of message refusal tokens with log probability information.
   */
  refusal: Array<ResponseBodyRefusal> | null;
};

export const PostV2RouterChatCompletionsResponseBodyType = {
  Function: "function",
} as const;
export type PostV2RouterChatCompletionsResponseBodyType = ClosedEnum<
  typeof PostV2RouterChatCompletionsResponseBodyType
>;

/**
 * The function that the model called.
 */
export type PostV2RouterChatCompletionsResponseBodyFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments: string;
};

export type PostV2RouterChatCompletionsResponseBodyToolCalls = {
  id: string;
  type: PostV2RouterChatCompletionsResponseBodyType;
  /**
   * The function that the model called.
   */
  function: PostV2RouterChatCompletionsResponseBodyFunction;
};

export const PostV2RouterChatCompletionsResponseBodyRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
export type PostV2RouterChatCompletionsResponseBodyRole = ClosedEnum<
  typeof PostV2RouterChatCompletionsResponseBodyRole
>;

/**
 * A chat completion delta generated by streamed model responses.
 */
export type Delta = {
  content: string | null;
  refusal: string | null;
  toolCalls: Array<PostV2RouterChatCompletionsResponseBodyToolCalls>;
  role: PostV2RouterChatCompletionsResponseBodyRole;
};

export type PostV2RouterChatCompletionsResponseBodyChoices = {
  /**
   * The reason the model stopped generating tokens.
   */
  finishReason: ResponseBodyFinishReason;
  /**
   * The index of the choice in the list of choices.
   */
  index: number;
  /**
   * Log probability information for the choice.
   */
  logprobs: ResponseBodyLogprobs | null;
  /**
   * A chat completion delta generated by streamed model responses.
   */
  delta: Delta;
};

/**
 * Usage statistics for the completion request.
 */
export type PostV2RouterChatCompletionsResponseBodyUsage = {
  /**
   * Number of tokens in the generated completion.
   */
  completionTokens: number;
  /**
   * Number of tokens in the prompt.
   */
  promptTokens: number;
  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  totalTokens: number;
};

/**
 * Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
 */
export type ResponseBody2 = {
  /**
   * A unique identifier for the chat completion.
   */
  id: string;
  /**
   * A list of chat completion choices. Can contain more than one elements if n is greater than 1. Can also be empty for the last chunk if you set stream_options: {"include_usage": true}.
   */
  choices: Array<PostV2RouterChatCompletionsResponseBodyChoices>;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created.
   */
  created: number;
  /**
   * The model used for the chat completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with.
   */
  systemFingerprint: string;
  /**
   * The object type
   */
  object: string;
  /**
   * Usage statistics for the completion request.
   */
  usage: PostV2RouterChatCompletionsResponseBodyUsage;
};

/**
 * The reason the model stopped generating tokens.
 */
export const PostV2RouterChatCompletionsResponseBodyFinishReason = {
  Stop: "stop",
  Length: "length",
  ContentFilter: "content_filter",
  ToolCalls: "tool_calls",
} as const;
/**
 * The reason the model stopped generating tokens.
 */
export type PostV2RouterChatCompletionsResponseBodyFinishReason = ClosedEnum<
  typeof PostV2RouterChatCompletionsResponseBodyFinishReason
>;

export const ResponseBodyType = {
  Function: "function",
} as const;
export type ResponseBodyType = ClosedEnum<typeof ResponseBodyType>;

/**
 * The function that the model called.
 */
export type ResponseBodyFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments: string;
};

export type ResponseBodyToolCalls = {
  id: string;
  type: ResponseBodyType;
  /**
   * The function that the model called.
   */
  function: ResponseBodyFunction;
};

export const ResponseBodyRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
export type ResponseBodyRole = ClosedEnum<typeof ResponseBodyRole>;

/**
 * A chat completion message generated by the model.
 */
export type ResponseBodyMessage = {
  content: string | null;
  refusal: string | null;
  toolCalls: Array<ResponseBodyToolCalls>;
  role: ResponseBodyRole;
};

export type TopLogprobs = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
};

export type ResponseBodyContent = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
  /**
   * List of the most likely tokens and their log probability, at this token position.
   */
  topLogprobs: Array<TopLogprobs>;
};

export type ResponseBodyTopLogprobs = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
};

export type Refusal = {
  /**
   * The token.
   */
  token: string;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * A list of integers representing the UTF-8 bytes representation of the token.
   */
  bytes: Array<number> | null;
  /**
   * List of the most likely tokens and their log probability, at this token position.
   */
  topLogprobs: Array<ResponseBodyTopLogprobs>;
};

/**
 * Log probability information for the choice.
 */
export type Logprobs = {
  /**
   * A list of message content tokens with log probability information.
   */
  content: Array<ResponseBodyContent> | null;
  /**
   * A list of message refusal tokens with log probability information.
   */
  refusal: Array<Refusal> | null;
};

export type ResponseBodyChoices = {
  /**
   * The reason the model stopped generating tokens.
   */
  finishReason: PostV2RouterChatCompletionsResponseBodyFinishReason;
  /**
   * The index of the choice in the list of choices.
   */
  index: number;
  /**
   * A chat completion message generated by the model.
   */
  message: ResponseBodyMessage;
  /**
   * Log probability information for the choice.
   */
  logprobs: Logprobs | null;
};

/**
 * Usage statistics for the completion request.
 */
export type ResponseBodyUsage = {
  /**
   * Number of tokens in the generated completion.
   */
  completionTokens: number;
  /**
   * Number of tokens in the prompt.
   */
  promptTokens: number;
  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  totalTokens: number;
};

/**
 * Represents a chat completion response returned by model, based on the provided input.
 */
export type ResponseBody1 = {
  /**
   * A unique identifier for the chat completion.
   */
  id: string;
  /**
   * A list of chat completion choices. Can be more than one if n is greater than 1.
   */
  choices: Array<ResponseBodyChoices>;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created.
   */
  created: number;
  /**
   * The model used for the chat completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with.
   */
  systemFingerprint: string;
  /**
   * The object type
   */
  object: string;
  /**
   * Usage statistics for the completion request.
   */
  usage: ResponseBodyUsage;
};

/**
 * A response body that follows the official OpenAI schema
 */
export type PostV2RouterChatCompletionsResponseBody =
  | ResponseBody1
  | ResponseBody2;

export type PostV2RouterChatCompletionsResponse =
  | ResponseBody1
  | ResponseBody2
  | EventStream<PostV2RouterChatCompletionsRouterResponseBody>;

/** @internal */
export const PostV2RouterChatCompletionsMessagesRouterPublicRole$inboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsMessagesRouterPublicRole> =
    z.nativeEnum(PostV2RouterChatCompletionsMessagesRouterPublicRole);

/** @internal */
export const PostV2RouterChatCompletionsMessagesRouterPublicRole$outboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsMessagesRouterPublicRole> =
    PostV2RouterChatCompletionsMessagesRouterPublicRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsMessagesRouterPublicRole$ {
  /** @deprecated use `PostV2RouterChatCompletionsMessagesRouterPublicRole$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsMessagesRouterPublicRole$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsMessagesRouterPublicRole$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsMessagesRouterPublicRole$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType$inboundSchema:
  z.ZodNativeEnum<
    typeof PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType
  > = z.nativeEnum(
    PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType,
  );

/** @internal */
export const PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType$outboundSchema:
  z.ZodNativeEnum<
    typeof PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType
  > =
    PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType$ {
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletions2Detail$inboundSchema: z.ZodNativeEnum<
  typeof PostV2RouterChatCompletions2Detail
> = z.nativeEnum(PostV2RouterChatCompletions2Detail);

/** @internal */
export const PostV2RouterChatCompletions2Detail$outboundSchema: z.ZodNativeEnum<
  typeof PostV2RouterChatCompletions2Detail
> = PostV2RouterChatCompletions2Detail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2Detail$ {
  /** @deprecated use `PostV2RouterChatCompletions2Detail$inboundSchema` instead. */
  export const inboundSchema = PostV2RouterChatCompletions2Detail$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2Detail$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletions2Detail$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletions2RouterPublicImageUrl$inboundSchema:
  z.ZodType<
    PostV2RouterChatCompletions2RouterPublicImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    url: z.string(),
    detail: PostV2RouterChatCompletions2Detail$inboundSchema.optional(),
  });

/** @internal */
export type PostV2RouterChatCompletions2RouterPublicImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const PostV2RouterChatCompletions2RouterPublicImageUrl$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletions2RouterPublicImageUrl$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletions2RouterPublicImageUrl
  > = z.object({
    url: z.string(),
    detail: PostV2RouterChatCompletions2Detail$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2RouterPublicImageUrl$ {
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublicImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletions2RouterPublicImageUrl$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublicImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletions2RouterPublicImageUrl$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublicImageUrl$Outbound` instead. */
  export type Outbound =
    PostV2RouterChatCompletions2RouterPublicImageUrl$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletions2RouterPublic2$inboundSchema: z.ZodType<
  PostV2RouterChatCompletions2RouterPublic2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType$inboundSchema,
  image_url: z.lazy(() =>
    PostV2RouterChatCompletions2RouterPublicImageUrl$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type PostV2RouterChatCompletions2RouterPublic2$Outbound = {
  type: string;
  image_url: PostV2RouterChatCompletions2RouterPublicImageUrl$Outbound;
};

/** @internal */
export const PostV2RouterChatCompletions2RouterPublic2$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletions2RouterPublic2$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletions2RouterPublic2
  > = z.object({
    type:
      PostV2RouterChatCompletions2RouterPublicRequestRequestBodyMessagesType$outboundSchema,
    imageUrl: z.lazy(() =>
      PostV2RouterChatCompletions2RouterPublicImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2RouterPublic2$ {
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublic2$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletions2RouterPublic2$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublic2$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletions2RouterPublic2$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublic2$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletions2RouterPublic2$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType
  > = z.nativeEnum(
    PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType,
  );

/** @internal */
export const PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType
  > =
    PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType$ {
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletions2RouterPublic1$inboundSchema: z.ZodType<
  PostV2RouterChatCompletions2RouterPublic1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type PostV2RouterChatCompletions2RouterPublic1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const PostV2RouterChatCompletions2RouterPublic1$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletions2RouterPublic1$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletions2RouterPublic1
  > = z.object({
    type:
      PostV2RouterChatCompletions2RouterPublicRequestRequestBodyType$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2RouterPublic1$ {
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublic1$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletions2RouterPublic1$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublic1$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletions2RouterPublic1$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublic1$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletions2RouterPublic1$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsContentRouterPublic2$inboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsContentRouterPublic2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => PostV2RouterChatCompletions2RouterPublic1$inboundSchema),
    z.lazy(() => PostV2RouterChatCompletions2RouterPublic2$inboundSchema),
  ]);

/** @internal */
export type PostV2RouterChatCompletionsContentRouterPublic2$Outbound =
  | PostV2RouterChatCompletions2RouterPublic1$Outbound
  | PostV2RouterChatCompletions2RouterPublic2$Outbound;

/** @internal */
export const PostV2RouterChatCompletionsContentRouterPublic2$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsContentRouterPublic2$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletionsContentRouterPublic2
  > = z.union([
    z.lazy(() => PostV2RouterChatCompletions2RouterPublic1$outboundSchema),
    z.lazy(() => PostV2RouterChatCompletions2RouterPublic2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsContentRouterPublic2$ {
  /** @deprecated use `PostV2RouterChatCompletionsContentRouterPublic2$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsContentRouterPublic2$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsContentRouterPublic2$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsContentRouterPublic2$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsContentRouterPublic2$Outbound` instead. */
  export type Outbound =
    PostV2RouterChatCompletionsContentRouterPublic2$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsMessagesRouterPublicContent$inboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsMessagesRouterPublicContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => PostV2RouterChatCompletions2RouterPublic1$inboundSchema),
      z.lazy(() => PostV2RouterChatCompletions2RouterPublic2$inboundSchema),
    ])),
  ]);

/** @internal */
export type PostV2RouterChatCompletionsMessagesRouterPublicContent$Outbound =
  | string
  | Array<
    | PostV2RouterChatCompletions2RouterPublic1$Outbound
    | PostV2RouterChatCompletions2RouterPublic2$Outbound
  >;

/** @internal */
export const PostV2RouterChatCompletionsMessagesRouterPublicContent$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsMessagesRouterPublicContent$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletionsMessagesRouterPublicContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => PostV2RouterChatCompletions2RouterPublic1$outboundSchema),
      z.lazy(() => PostV2RouterChatCompletions2RouterPublic2$outboundSchema),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsMessagesRouterPublicContent$ {
  /** @deprecated use `PostV2RouterChatCompletionsMessagesRouterPublicContent$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsMessagesRouterPublicContent$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsMessagesRouterPublicContent$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsMessagesRouterPublicContent$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsMessagesRouterPublicContent$Outbound` instead. */
  export type Outbound =
    PostV2RouterChatCompletionsMessagesRouterPublicContent$Outbound;
}

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({
    role: PostV2RouterChatCompletionsMessagesRouterPublicRole$inboundSchema,
    tool_call_id: z.string(),
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => PostV2RouterChatCompletions2RouterPublic1$inboundSchema),
        z.lazy(() => PostV2RouterChatCompletions2RouterPublic2$inboundSchema),
      ])),
    ]),
  }).transform((v) => {
    return remap$(v, {
      "tool_call_id": "toolCallId",
    });
  });

/** @internal */
export type Four$Outbound = {
  role: string;
  tool_call_id: string;
  content:
    | string
    | Array<
      | PostV2RouterChatCompletions2RouterPublic1$Outbound
      | PostV2RouterChatCompletions2RouterPublic2$Outbound
    >;
};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({
    role: PostV2RouterChatCompletionsMessagesRouterPublicRole$outboundSchema,
    toolCallId: z.string(),
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => PostV2RouterChatCompletions2RouterPublic1$outboundSchema),
        z.lazy(() =>
          PostV2RouterChatCompletions2RouterPublic2$outboundSchema
        ),
      ])),
    ]),
  }).transform((v) => {
    return remap$(v, {
      toolCallId: "tool_call_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsMessagesRouterRole$inboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsMessagesRouterRole> = z
    .nativeEnum(PostV2RouterChatCompletionsMessagesRouterRole);

/** @internal */
export const PostV2RouterChatCompletionsMessagesRouterRole$outboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsMessagesRouterRole> =
    PostV2RouterChatCompletionsMessagesRouterRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsMessagesRouterRole$ {
  /** @deprecated use `PostV2RouterChatCompletionsMessagesRouterRole$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsMessagesRouterRole$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsMessagesRouterRole$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsMessagesRouterRole$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletionsMessagesRouterContent$inboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsMessagesRouterContent,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.any())]);

/** @internal */
export type PostV2RouterChatCompletionsMessagesRouterContent$Outbound =
  | string
  | Array<any>;

/** @internal */
export const PostV2RouterChatCompletionsMessagesRouterContent$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsMessagesRouterContent$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletionsMessagesRouterContent
  > = z.union([z.string(), z.array(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsMessagesRouterContent$ {
  /** @deprecated use `PostV2RouterChatCompletionsMessagesRouterContent$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsMessagesRouterContent$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsMessagesRouterContent$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsMessagesRouterContent$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsMessagesRouterContent$Outbound` instead. */
  export type Outbound =
    PostV2RouterChatCompletionsMessagesRouterContent$Outbound;
}

/** @internal */
export const MessagesType$inboundSchema: z.ZodNativeEnum<typeof MessagesType> =
  z.nativeEnum(MessagesType);

/** @internal */
export const MessagesType$outboundSchema: z.ZodNativeEnum<typeof MessagesType> =
  MessagesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesType$ {
  /** @deprecated use `MessagesType$inboundSchema` instead. */
  export const inboundSchema = MessagesType$inboundSchema;
  /** @deprecated use `MessagesType$outboundSchema` instead. */
  export const outboundSchema = MessagesType$outboundSchema;
}

/** @internal */
export const MessagesFunction$inboundSchema: z.ZodType<
  MessagesFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type MessagesFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const MessagesFunction$outboundSchema: z.ZodType<
  MessagesFunction$Outbound,
  z.ZodTypeDef,
  MessagesFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesFunction$ {
  /** @deprecated use `MessagesFunction$inboundSchema` instead. */
  export const inboundSchema = MessagesFunction$inboundSchema;
  /** @deprecated use `MessagesFunction$outboundSchema` instead. */
  export const outboundSchema = MessagesFunction$outboundSchema;
  /** @deprecated use `MessagesFunction$Outbound` instead. */
  export type Outbound = MessagesFunction$Outbound;
}

/** @internal */
export const MessagesToolCalls$inboundSchema: z.ZodType<
  MessagesToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: MessagesType$inboundSchema,
  function: z.lazy(() => MessagesFunction$inboundSchema),
});

/** @internal */
export type MessagesToolCalls$Outbound = {
  id: string;
  type: string;
  function: MessagesFunction$Outbound;
};

/** @internal */
export const MessagesToolCalls$outboundSchema: z.ZodType<
  MessagesToolCalls$Outbound,
  z.ZodTypeDef,
  MessagesToolCalls
> = z.object({
  id: z.string(),
  type: MessagesType$outboundSchema,
  function: z.lazy(() => MessagesFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesToolCalls$ {
  /** @deprecated use `MessagesToolCalls$inboundSchema` instead. */
  export const inboundSchema = MessagesToolCalls$inboundSchema;
  /** @deprecated use `MessagesToolCalls$outboundSchema` instead. */
  export const outboundSchema = MessagesToolCalls$outboundSchema;
  /** @deprecated use `MessagesToolCalls$Outbound` instead. */
  export type Outbound = MessagesToolCalls$Outbound;
}

/** @internal */
export const Messages3$inboundSchema: z.ZodType<
  Messages3,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: PostV2RouterChatCompletionsMessagesRouterRole$inboundSchema,
  content: z.union([z.string(), z.array(z.any())]).optional(),
  refusal: z.nullable(z.string()).optional(),
  tool_calls: z.array(z.lazy(() => MessagesToolCalls$inboundSchema)),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type Messages3$Outbound = {
  role: string;
  content?: string | Array<any> | undefined;
  refusal?: string | null | undefined;
  tool_calls: Array<MessagesToolCalls$Outbound>;
  name?: string | undefined;
};

/** @internal */
export const Messages3$outboundSchema: z.ZodType<
  Messages3$Outbound,
  z.ZodTypeDef,
  Messages3
> = z.object({
  role: PostV2RouterChatCompletionsMessagesRouterRole$outboundSchema,
  content: z.union([z.string(), z.array(z.any())]).optional(),
  refusal: z.nullable(z.string()).optional(),
  toolCalls: z.array(z.lazy(() => MessagesToolCalls$outboundSchema)),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages3$ {
  /** @deprecated use `Messages3$inboundSchema` instead. */
  export const inboundSchema = Messages3$inboundSchema;
  /** @deprecated use `Messages3$outboundSchema` instead. */
  export const outboundSchema = Messages3$outboundSchema;
  /** @deprecated use `Messages3$Outbound` instead. */
  export type Outbound = Messages3$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsMessagesRole$inboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsMessagesRole> = z
    .nativeEnum(PostV2RouterChatCompletionsMessagesRole);

/** @internal */
export const PostV2RouterChatCompletionsMessagesRole$outboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsMessagesRole> =
    PostV2RouterChatCompletionsMessagesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsMessagesRole$ {
  /** @deprecated use `PostV2RouterChatCompletionsMessagesRole$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsMessagesRole$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsMessagesRole$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsMessagesRole$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletions2RouterPublicRequestType$inboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletions2RouterPublicRequestType> =
    z.nativeEnum(PostV2RouterChatCompletions2RouterPublicRequestType);

/** @internal */
export const PostV2RouterChatCompletions2RouterPublicRequestType$outboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletions2RouterPublicRequestType> =
    PostV2RouterChatCompletions2RouterPublicRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2RouterPublicRequestType$ {
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublicRequestType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletions2RouterPublicRequestType$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublicRequestType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletions2RouterPublicRequestType$outboundSchema;
}

/** @internal */
export const TwoDetail$inboundSchema: z.ZodNativeEnum<typeof TwoDetail> = z
  .nativeEnum(TwoDetail);

/** @internal */
export const TwoDetail$outboundSchema: z.ZodNativeEnum<typeof TwoDetail> =
  TwoDetail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TwoDetail$ {
  /** @deprecated use `TwoDetail$inboundSchema` instead. */
  export const inboundSchema = TwoDetail$inboundSchema;
  /** @deprecated use `TwoDetail$outboundSchema` instead. */
  export const outboundSchema = TwoDetail$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletions2RouterImageUrl$inboundSchema:
  z.ZodType<PostV2RouterChatCompletions2RouterImageUrl, z.ZodTypeDef, unknown> =
    z.object({
      url: z.string(),
      detail: TwoDetail$inboundSchema.optional(),
    });

/** @internal */
export type PostV2RouterChatCompletions2RouterImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const PostV2RouterChatCompletions2RouterImageUrl$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletions2RouterImageUrl$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletions2RouterImageUrl
  > = z.object({
    url: z.string(),
    detail: TwoDetail$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2RouterImageUrl$ {
  /** @deprecated use `PostV2RouterChatCompletions2RouterImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletions2RouterImageUrl$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2RouterImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletions2RouterImageUrl$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2RouterImageUrl$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletions2RouterImageUrl$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletions2Router2$inboundSchema: z.ZodType<
  PostV2RouterChatCompletions2Router2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PostV2RouterChatCompletions2RouterPublicRequestType$inboundSchema,
  image_url: z.lazy(() =>
    PostV2RouterChatCompletions2RouterImageUrl$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type PostV2RouterChatCompletions2Router2$Outbound = {
  type: string;
  image_url: PostV2RouterChatCompletions2RouterImageUrl$Outbound;
};

/** @internal */
export const PostV2RouterChatCompletions2Router2$outboundSchema: z.ZodType<
  PostV2RouterChatCompletions2Router2$Outbound,
  z.ZodTypeDef,
  PostV2RouterChatCompletions2Router2
> = z.object({
  type: PostV2RouterChatCompletions2RouterPublicRequestType$outboundSchema,
  imageUrl: z.lazy(() =>
    PostV2RouterChatCompletions2RouterImageUrl$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2Router2$ {
  /** @deprecated use `PostV2RouterChatCompletions2Router2$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletions2Router2$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2Router2$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletions2Router2$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2Router2$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletions2Router2$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletions2RouterPublicType$inboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletions2RouterPublicType> = z
    .nativeEnum(PostV2RouterChatCompletions2RouterPublicType);

/** @internal */
export const PostV2RouterChatCompletions2RouterPublicType$outboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletions2RouterPublicType> =
    PostV2RouterChatCompletions2RouterPublicType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2RouterPublicType$ {
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublicType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletions2RouterPublicType$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2RouterPublicType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletions2RouterPublicType$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletions2Router1$inboundSchema: z.ZodType<
  PostV2RouterChatCompletions2Router1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PostV2RouterChatCompletions2RouterPublicType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type PostV2RouterChatCompletions2Router1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const PostV2RouterChatCompletions2Router1$outboundSchema: z.ZodType<
  PostV2RouterChatCompletions2Router1$Outbound,
  z.ZodTypeDef,
  PostV2RouterChatCompletions2Router1
> = z.object({
  type: PostV2RouterChatCompletions2RouterPublicType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2Router1$ {
  /** @deprecated use `PostV2RouterChatCompletions2Router1$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletions2Router1$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2Router1$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletions2Router1$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2Router1$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletions2Router1$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsContentRouter2$inboundSchema: z.ZodType<
  PostV2RouterChatCompletionsContentRouter2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostV2RouterChatCompletions2Router1$inboundSchema),
  z.lazy(() => PostV2RouterChatCompletions2Router2$inboundSchema),
]);

/** @internal */
export type PostV2RouterChatCompletionsContentRouter2$Outbound =
  | PostV2RouterChatCompletions2Router1$Outbound
  | PostV2RouterChatCompletions2Router2$Outbound;

/** @internal */
export const PostV2RouterChatCompletionsContentRouter2$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsContentRouter2$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletionsContentRouter2
  > = z.union([
    z.lazy(() => PostV2RouterChatCompletions2Router1$outboundSchema),
    z.lazy(() => PostV2RouterChatCompletions2Router2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsContentRouter2$ {
  /** @deprecated use `PostV2RouterChatCompletionsContentRouter2$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsContentRouter2$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsContentRouter2$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsContentRouter2$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsContentRouter2$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletionsContentRouter2$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsMessagesContent$inboundSchema:
  z.ZodType<PostV2RouterChatCompletionsMessagesContent, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => PostV2RouterChatCompletions2Router1$inboundSchema),
        z.lazy(() => PostV2RouterChatCompletions2Router2$inboundSchema),
      ])),
    ]);

/** @internal */
export type PostV2RouterChatCompletionsMessagesContent$Outbound =
  | string
  | Array<
    | PostV2RouterChatCompletions2Router1$Outbound
    | PostV2RouterChatCompletions2Router2$Outbound
  >;

/** @internal */
export const PostV2RouterChatCompletionsMessagesContent$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsMessagesContent$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletionsMessagesContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => PostV2RouterChatCompletions2Router1$outboundSchema),
      z.lazy(() => PostV2RouterChatCompletions2Router2$outboundSchema),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsMessagesContent$ {
  /** @deprecated use `PostV2RouterChatCompletionsMessagesContent$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsMessagesContent$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsMessagesContent$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsMessagesContent$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsMessagesContent$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletionsMessagesContent$Outbound;
}

/** @internal */
export const Messages2$inboundSchema: z.ZodType<
  Messages2,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: PostV2RouterChatCompletionsMessagesRole$inboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => PostV2RouterChatCompletions2Router1$inboundSchema),
      z.lazy(() => PostV2RouterChatCompletions2Router2$inboundSchema),
    ])),
  ]),
});

/** @internal */
export type Messages2$Outbound = {
  role: string;
  name?: string | undefined;
  content:
    | string
    | Array<
      | PostV2RouterChatCompletions2Router1$Outbound
      | PostV2RouterChatCompletions2Router2$Outbound
    >;
};

/** @internal */
export const Messages2$outboundSchema: z.ZodType<
  Messages2$Outbound,
  z.ZodTypeDef,
  Messages2
> = z.object({
  role: PostV2RouterChatCompletionsMessagesRole$outboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => PostV2RouterChatCompletions2Router1$outboundSchema),
      z.lazy(() => PostV2RouterChatCompletions2Router2$outboundSchema),
    ])),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages2$ {
  /** @deprecated use `Messages2$inboundSchema` instead. */
  export const inboundSchema = Messages2$inboundSchema;
  /** @deprecated use `Messages2$outboundSchema` instead. */
  export const outboundSchema = Messages2$outboundSchema;
  /** @deprecated use `Messages2$Outbound` instead. */
  export type Outbound = Messages2$Outbound;
}

/** @internal */
export const MessagesRole$inboundSchema: z.ZodNativeEnum<typeof MessagesRole> =
  z.nativeEnum(MessagesRole);

/** @internal */
export const MessagesRole$outboundSchema: z.ZodNativeEnum<typeof MessagesRole> =
  MessagesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesRole$ {
  /** @deprecated use `MessagesRole$inboundSchema` instead. */
  export const inboundSchema = MessagesRole$inboundSchema;
  /** @deprecated use `MessagesRole$outboundSchema` instead. */
  export const outboundSchema = MessagesRole$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletions2RouterType$inboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletions2RouterType> = z.nativeEnum(
    PostV2RouterChatCompletions2RouterType,
  );

/** @internal */
export const PostV2RouterChatCompletions2RouterType$outboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletions2RouterType> =
    PostV2RouterChatCompletions2RouterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2RouterType$ {
  /** @deprecated use `PostV2RouterChatCompletions2RouterType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletions2RouterType$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2RouterType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletions2RouterType$outboundSchema;
}

/** @internal */
export const Detail$inboundSchema: z.ZodNativeEnum<typeof Detail> = z
  .nativeEnum(Detail);

/** @internal */
export const Detail$outboundSchema: z.ZodNativeEnum<typeof Detail> =
  Detail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Detail$ {
  /** @deprecated use `Detail$inboundSchema` instead. */
  export const inboundSchema = Detail$inboundSchema;
  /** @deprecated use `Detail$outboundSchema` instead. */
  export const outboundSchema = Detail$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletions2ImageUrl$inboundSchema: z.ZodType<
  PostV2RouterChatCompletions2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: Detail$inboundSchema.optional(),
});

/** @internal */
export type PostV2RouterChatCompletions2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const PostV2RouterChatCompletions2ImageUrl$outboundSchema: z.ZodType<
  PostV2RouterChatCompletions2ImageUrl$Outbound,
  z.ZodTypeDef,
  PostV2RouterChatCompletions2ImageUrl
> = z.object({
  url: z.string(),
  detail: Detail$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2ImageUrl$ {
  /** @deprecated use `PostV2RouterChatCompletions2ImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletions2ImageUrl$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2ImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletions2ImageUrl$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2ImageUrl$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletions2ImageUrl$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletions22$inboundSchema: z.ZodType<
  PostV2RouterChatCompletions22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PostV2RouterChatCompletions2RouterType$inboundSchema,
  image_url: z.lazy(() => PostV2RouterChatCompletions2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type PostV2RouterChatCompletions22$Outbound = {
  type: string;
  image_url: PostV2RouterChatCompletions2ImageUrl$Outbound;
};

/** @internal */
export const PostV2RouterChatCompletions22$outboundSchema: z.ZodType<
  PostV2RouterChatCompletions22$Outbound,
  z.ZodTypeDef,
  PostV2RouterChatCompletions22
> = z.object({
  type: PostV2RouterChatCompletions2RouterType$outboundSchema,
  imageUrl: z.lazy(() => PostV2RouterChatCompletions2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions22$ {
  /** @deprecated use `PostV2RouterChatCompletions22$inboundSchema` instead. */
  export const inboundSchema = PostV2RouterChatCompletions22$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions22$outboundSchema` instead. */
  export const outboundSchema = PostV2RouterChatCompletions22$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions22$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletions22$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletions2Type$inboundSchema: z.ZodNativeEnum<
  typeof PostV2RouterChatCompletions2Type
> = z.nativeEnum(PostV2RouterChatCompletions2Type);

/** @internal */
export const PostV2RouterChatCompletions2Type$outboundSchema: z.ZodNativeEnum<
  typeof PostV2RouterChatCompletions2Type
> = PostV2RouterChatCompletions2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions2Type$ {
  /** @deprecated use `PostV2RouterChatCompletions2Type$inboundSchema` instead. */
  export const inboundSchema = PostV2RouterChatCompletions2Type$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions2Type$outboundSchema` instead. */
  export const outboundSchema = PostV2RouterChatCompletions2Type$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletions21$inboundSchema: z.ZodType<
  PostV2RouterChatCompletions21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PostV2RouterChatCompletions2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type PostV2RouterChatCompletions21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const PostV2RouterChatCompletions21$outboundSchema: z.ZodType<
  PostV2RouterChatCompletions21$Outbound,
  z.ZodTypeDef,
  PostV2RouterChatCompletions21
> = z.object({
  type: PostV2RouterChatCompletions2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletions21$ {
  /** @deprecated use `PostV2RouterChatCompletions21$inboundSchema` instead. */
  export const inboundSchema = PostV2RouterChatCompletions21$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions21$outboundSchema` instead. */
  export const outboundSchema = PostV2RouterChatCompletions21$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletions21$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletions21$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsContent2$inboundSchema: z.ZodType<
  PostV2RouterChatCompletionsContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostV2RouterChatCompletions21$inboundSchema),
  z.lazy(() => PostV2RouterChatCompletions22$inboundSchema),
]);

/** @internal */
export type PostV2RouterChatCompletionsContent2$Outbound =
  | PostV2RouterChatCompletions21$Outbound
  | PostV2RouterChatCompletions22$Outbound;

/** @internal */
export const PostV2RouterChatCompletionsContent2$outboundSchema: z.ZodType<
  PostV2RouterChatCompletionsContent2$Outbound,
  z.ZodTypeDef,
  PostV2RouterChatCompletionsContent2
> = z.union([
  z.lazy(() => PostV2RouterChatCompletions21$outboundSchema),
  z.lazy(() => PostV2RouterChatCompletions22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsContent2$ {
  /** @deprecated use `PostV2RouterChatCompletionsContent2$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsContent2$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsContent2$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsContent2$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsContent2$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletionsContent2$Outbound;
}

/** @internal */
export const MessagesContent$inboundSchema: z.ZodType<
  MessagesContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => PostV2RouterChatCompletions21$inboundSchema),
    z.lazy(() => PostV2RouterChatCompletions22$inboundSchema),
  ])),
]);

/** @internal */
export type MessagesContent$Outbound =
  | string
  | Array<
    | PostV2RouterChatCompletions21$Outbound
    | PostV2RouterChatCompletions22$Outbound
  >;

/** @internal */
export const MessagesContent$outboundSchema: z.ZodType<
  MessagesContent$Outbound,
  z.ZodTypeDef,
  MessagesContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => PostV2RouterChatCompletions21$outboundSchema),
    z.lazy(() => PostV2RouterChatCompletions22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesContent$ {
  /** @deprecated use `MessagesContent$inboundSchema` instead. */
  export const inboundSchema = MessagesContent$inboundSchema;
  /** @deprecated use `MessagesContent$outboundSchema` instead. */
  export const outboundSchema = MessagesContent$outboundSchema;
  /** @deprecated use `MessagesContent$Outbound` instead. */
  export type Outbound = MessagesContent$Outbound;
}

/** @internal */
export const Messages1$inboundSchema: z.ZodType<
  Messages1,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: MessagesRole$inboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => PostV2RouterChatCompletions21$inboundSchema),
      z.lazy(() => PostV2RouterChatCompletions22$inboundSchema),
    ])),
  ]),
});

/** @internal */
export type Messages1$Outbound = {
  role: string;
  name?: string | undefined;
  content:
    | string
    | Array<
      | PostV2RouterChatCompletions21$Outbound
      | PostV2RouterChatCompletions22$Outbound
    >;
};

/** @internal */
export const Messages1$outboundSchema: z.ZodType<
  Messages1$Outbound,
  z.ZodTypeDef,
  Messages1
> = z.object({
  role: MessagesRole$outboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => PostV2RouterChatCompletions21$outboundSchema),
      z.lazy(() => PostV2RouterChatCompletions22$outboundSchema),
    ])),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages1$ {
  /** @deprecated use `Messages1$inboundSchema` instead. */
  export const inboundSchema = Messages1$inboundSchema;
  /** @deprecated use `Messages1$outboundSchema` instead. */
  export const outboundSchema = Messages1$outboundSchema;
  /** @deprecated use `Messages1$Outbound` instead. */
  export type Outbound = Messages1$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsMessages$inboundSchema: z.ZodType<
  PostV2RouterChatCompletionsMessages,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Messages1$inboundSchema),
  z.lazy(() => Messages2$inboundSchema),
  z.lazy(() => Four$inboundSchema),
  z.lazy(() => Messages3$inboundSchema),
]);

/** @internal */
export type PostV2RouterChatCompletionsMessages$Outbound =
  | Messages1$Outbound
  | Messages2$Outbound
  | Four$Outbound
  | Messages3$Outbound;

/** @internal */
export const PostV2RouterChatCompletionsMessages$outboundSchema: z.ZodType<
  PostV2RouterChatCompletionsMessages$Outbound,
  z.ZodTypeDef,
  PostV2RouterChatCompletionsMessages
> = z.union([
  z.lazy(() => Messages1$outboundSchema),
  z.lazy(() => Messages2$outboundSchema),
  z.lazy(() => Four$outboundSchema),
  z.lazy(() => Messages3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsMessages$ {
  /** @deprecated use `PostV2RouterChatCompletionsMessages$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsMessages$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsMessages$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsMessages$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsMessages$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletionsMessages$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsType$inboundSchema: z.ZodNativeEnum<
  typeof PostV2RouterChatCompletionsType
> = z.nativeEnum(PostV2RouterChatCompletionsType);

/** @internal */
export const PostV2RouterChatCompletionsType$outboundSchema: z.ZodNativeEnum<
  typeof PostV2RouterChatCompletionsType
> = PostV2RouterChatCompletionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsType$ {
  /** @deprecated use `PostV2RouterChatCompletionsType$inboundSchema` instead. */
  export const inboundSchema = PostV2RouterChatCompletionsType$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsType$outboundSchema` instead. */
  export const outboundSchema = PostV2RouterChatCompletionsType$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletionsRouterType$inboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsRouterType> = z.nativeEnum(
    PostV2RouterChatCompletionsRouterType,
  );

/** @internal */
export const PostV2RouterChatCompletionsRouterType$outboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsRouterType> =
    PostV2RouterChatCompletionsRouterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsRouterType$ {
  /** @deprecated use `PostV2RouterChatCompletionsRouterType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsRouterType$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsRouterType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsRouterType$outboundSchema;
}

/** @internal */
export const ParametersT$inboundSchema: z.ZodType<
  ParametersT,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PostV2RouterChatCompletionsRouterType$inboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
});

/** @internal */
export type ParametersT$Outbound = {
  type: string;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
};

/** @internal */
export const ParametersT$outboundSchema: z.ZodType<
  ParametersT$Outbound,
  z.ZodTypeDef,
  ParametersT
> = z.object({
  type: PostV2RouterChatCompletionsRouterType$outboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParametersT$ {
  /** @deprecated use `ParametersT$inboundSchema` instead. */
  export const inboundSchema = ParametersT$inboundSchema;
  /** @deprecated use `ParametersT$outboundSchema` instead. */
  export const outboundSchema = ParametersT$outboundSchema;
  /** @deprecated use `ParametersT$Outbound` instead. */
  export type Outbound = ParametersT$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsFunction$inboundSchema: z.ZodType<
  PostV2RouterChatCompletionsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.lazy(() => ParametersT$inboundSchema).optional(),
  strict: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type PostV2RouterChatCompletionsFunction$Outbound = {
  name: string;
  description?: string | undefined;
  parameters?: ParametersT$Outbound | undefined;
  strict: boolean | null;
};

/** @internal */
export const PostV2RouterChatCompletionsFunction$outboundSchema: z.ZodType<
  PostV2RouterChatCompletionsFunction$Outbound,
  z.ZodTypeDef,
  PostV2RouterChatCompletionsFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.lazy(() => ParametersT$outboundSchema).optional(),
  strict: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsFunction$ {
  /** @deprecated use `PostV2RouterChatCompletionsFunction$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsFunction$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsFunction$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsFunction$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsFunction$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletionsFunction$Outbound;
}

/** @internal */
export const Tools$inboundSchema: z.ZodType<Tools, z.ZodTypeDef, unknown> = z
  .object({
    type: PostV2RouterChatCompletionsType$inboundSchema,
    function: z.lazy(() => PostV2RouterChatCompletionsFunction$inboundSchema),
  });

/** @internal */
export type Tools$Outbound = {
  type: string;
  function: PostV2RouterChatCompletionsFunction$Outbound;
};

/** @internal */
export const Tools$outboundSchema: z.ZodType<
  Tools$Outbound,
  z.ZodTypeDef,
  Tools
> = z.object({
  type: PostV2RouterChatCompletionsType$outboundSchema,
  function: z.lazy(() => PostV2RouterChatCompletionsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools$ {
  /** @deprecated use `Tools$inboundSchema` instead. */
  export const inboundSchema = Tools$inboundSchema;
  /** @deprecated use `Tools$outboundSchema` instead. */
  export const outboundSchema = Tools$outboundSchema;
  /** @deprecated use `Tools$Outbound` instead. */
  export type Outbound = Tools$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsRequestBody$inboundSchema: z.ZodType<
  PostV2RouterChatCompletionsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  messages: z.array(
    z.union([
      z.lazy(() => Messages1$inboundSchema),
      z.lazy(() => Messages2$inboundSchema),
      z.lazy(() => Four$inboundSchema),
      z.lazy(() => Messages3$inboundSchema),
    ]),
  ),
  frequency_penalty: z.nullable(z.number().default(0)),
  max_tokens: z.nullable(z.number()).optional(),
  presence_penalty: z.nullable(z.number().default(0)),
  seed: z.nullable(z.number()).optional(),
  stream: z.nullable(z.boolean().default(false)),
  temperature: z.nullable(z.number().default(1)),
  top_p: z.nullable(z.number().default(1)),
  tools: z.array(z.lazy(() => Tools$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "frequency_penalty": "frequencyPenalty",
    "max_tokens": "maxTokens",
    "presence_penalty": "presencePenalty",
    "top_p": "topP",
  });
});

/** @internal */
export type PostV2RouterChatCompletionsRequestBody$Outbound = {
  model: string;
  messages: Array<
    Messages1$Outbound | Messages2$Outbound | Four$Outbound | Messages3$Outbound
  >;
  frequency_penalty: number | null;
  max_tokens?: number | null | undefined;
  presence_penalty: number | null;
  seed?: number | null | undefined;
  stream: boolean | null;
  temperature: number | null;
  top_p: number | null;
  tools?: Array<Tools$Outbound> | undefined;
};

/** @internal */
export const PostV2RouterChatCompletionsRequestBody$outboundSchema: z.ZodType<
  PostV2RouterChatCompletionsRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2RouterChatCompletionsRequestBody
> = z.object({
  model: z.string(),
  messages: z.array(
    z.union([
      z.lazy(() => Messages1$outboundSchema),
      z.lazy(() => Messages2$outboundSchema),
      z.lazy(() => Four$outboundSchema),
      z.lazy(() => Messages3$outboundSchema),
    ]),
  ),
  frequencyPenalty: z.nullable(z.number().default(0)),
  maxTokens: z.nullable(z.number()).optional(),
  presencePenalty: z.nullable(z.number().default(0)),
  seed: z.nullable(z.number()).optional(),
  stream: z.nullable(z.boolean().default(false)),
  temperature: z.nullable(z.number().default(1)),
  topP: z.nullable(z.number().default(1)),
  tools: z.array(z.lazy(() => Tools$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    frequencyPenalty: "frequency_penalty",
    maxTokens: "max_tokens",
    presencePenalty: "presence_penalty",
    topP: "top_p",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsRequestBody$ {
  /** @deprecated use `PostV2RouterChatCompletionsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsRequestBody$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsRequestBody$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsRequestBody$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletionsRequestBody$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsRouterResponseBody$inboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsRouterResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.string(),
    event: z.string().optional(),
    id: z.string().optional(),
    retry: z.number().int().optional(),
  });

/** @internal */
export type PostV2RouterChatCompletionsRouterResponseBody$Outbound = {
  data: string;
  event?: string | undefined;
  id?: string | undefined;
  retry?: number | undefined;
};

/** @internal */
export const PostV2RouterChatCompletionsRouterResponseBody$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsRouterResponseBody$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletionsRouterResponseBody
  > = z.object({
    data: z.string(),
    event: z.string().optional(),
    id: z.string().optional(),
    retry: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsRouterResponseBody$ {
  /** @deprecated use `PostV2RouterChatCompletionsRouterResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsRouterResponseBody$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsRouterResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsRouterResponseBody$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsRouterResponseBody$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletionsRouterResponseBody$Outbound;
}

/** @internal */
export const ResponseBodyFinishReason$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFinishReason
> = z.nativeEnum(ResponseBodyFinishReason);

/** @internal */
export const ResponseBodyFinishReason$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFinishReason
> = ResponseBodyFinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFinishReason$ {
  /** @deprecated use `ResponseBodyFinishReason$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFinishReason$inboundSchema;
  /** @deprecated use `ResponseBodyFinishReason$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFinishReason$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyTopLogprobs$inboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyTopLogprobs,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
  });

/** @internal */
export type PostV2RouterChatCompletionsResponseBodyTopLogprobs$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyTopLogprobs$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyTopLogprobs$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletionsResponseBodyTopLogprobs
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsResponseBodyTopLogprobs$ {
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyTopLogprobs$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsResponseBodyTopLogprobs$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyTopLogprobs$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsResponseBodyTopLogprobs$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyTopLogprobs$Outbound` instead. */
  export type Outbound =
    PostV2RouterChatCompletionsResponseBodyTopLogprobs$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyContent$inboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyContent,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
    top_logprobs: z.array(
      z.lazy(() =>
        PostV2RouterChatCompletionsResponseBodyTopLogprobs$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "top_logprobs": "topLogprobs",
    });
  });

/** @internal */
export type PostV2RouterChatCompletionsResponseBodyContent$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<
    PostV2RouterChatCompletionsResponseBodyTopLogprobs$Outbound
  >;
};

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyContent$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyContent$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletionsResponseBodyContent
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
    topLogprobs: z.array(
      z.lazy(() =>
        PostV2RouterChatCompletionsResponseBodyTopLogprobs$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      topLogprobs: "top_logprobs",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsResponseBodyContent$ {
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyContent$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsResponseBodyContent$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyContent$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsResponseBodyContent$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyContent$Outbound` instead. */
  export type Outbound =
    PostV2RouterChatCompletionsResponseBodyContent$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$inboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
  });

/** @internal */
export type PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$Outbound =
  {
    token: string;
    logprob: number;
    bytes: Array<number> | null;
  };

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs
  > = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$ {
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$Outbound` instead. */
  export type Outbound =
    PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$Outbound;
}

/** @internal */
export const ResponseBodyRefusal$inboundSchema: z.ZodType<
  ResponseBodyRefusal,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  top_logprobs: z.array(
    z.lazy(() =>
      PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$inboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type ResponseBodyRefusal$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<
    PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$Outbound
  >;
};

/** @internal */
export const ResponseBodyRefusal$outboundSchema: z.ZodType<
  ResponseBodyRefusal$Outbound,
  z.ZodTypeDef,
  ResponseBodyRefusal
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  topLogprobs: z.array(
    z.lazy(() =>
      PostV2RouterChatCompletionsResponseBodyRouterTopLogprobs$outboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRefusal$ {
  /** @deprecated use `ResponseBodyRefusal$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRefusal$inboundSchema;
  /** @deprecated use `ResponseBodyRefusal$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRefusal$outboundSchema;
  /** @deprecated use `ResponseBodyRefusal$Outbound` instead. */
  export type Outbound = ResponseBodyRefusal$Outbound;
}

/** @internal */
export const ResponseBodyLogprobs$inboundSchema: z.ZodType<
  ResponseBodyLogprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(
    z.array(z.lazy(() =>
      PostV2RouterChatCompletionsResponseBodyContent$inboundSchema
    )),
  ),
  refusal: z.nullable(z.array(z.lazy(() => ResponseBodyRefusal$inboundSchema))),
});

/** @internal */
export type ResponseBodyLogprobs$Outbound = {
  content:
    | Array<PostV2RouterChatCompletionsResponseBodyContent$Outbound>
    | null;
  refusal: Array<ResponseBodyRefusal$Outbound> | null;
};

/** @internal */
export const ResponseBodyLogprobs$outboundSchema: z.ZodType<
  ResponseBodyLogprobs$Outbound,
  z.ZodTypeDef,
  ResponseBodyLogprobs
> = z.object({
  content: z.nullable(
    z.array(z.lazy(() =>
      PostV2RouterChatCompletionsResponseBodyContent$outboundSchema
    )),
  ),
  refusal: z.nullable(
    z.array(z.lazy(() => ResponseBodyRefusal$outboundSchema)),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyLogprobs$ {
  /** @deprecated use `ResponseBodyLogprobs$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyLogprobs$inboundSchema;
  /** @deprecated use `ResponseBodyLogprobs$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyLogprobs$outboundSchema;
  /** @deprecated use `ResponseBodyLogprobs$Outbound` instead. */
  export type Outbound = ResponseBodyLogprobs$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyType$inboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsResponseBodyType> = z
    .nativeEnum(PostV2RouterChatCompletionsResponseBodyType);

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyType$outboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsResponseBodyType> =
    PostV2RouterChatCompletionsResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsResponseBodyType$ {
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsResponseBodyType$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsResponseBodyType$outboundSchema;
}

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyFunction$inboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type PostV2RouterChatCompletionsResponseBodyFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyFunction$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyFunction$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletionsResponseBodyFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsResponseBodyFunction$ {
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsResponseBodyFunction$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsResponseBodyFunction$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyFunction$Outbound` instead. */
  export type Outbound =
    PostV2RouterChatCompletionsResponseBodyFunction$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyToolCalls$inboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    type: PostV2RouterChatCompletionsResponseBodyType$inboundSchema,
    function: z.lazy(() =>
      PostV2RouterChatCompletionsResponseBodyFunction$inboundSchema
    ),
  });

/** @internal */
export type PostV2RouterChatCompletionsResponseBodyToolCalls$Outbound = {
  id: string;
  type: string;
  function: PostV2RouterChatCompletionsResponseBodyFunction$Outbound;
};

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyToolCalls$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyToolCalls$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletionsResponseBodyToolCalls
  > = z.object({
    id: z.string(),
    type: PostV2RouterChatCompletionsResponseBodyType$outboundSchema,
    function: z.lazy(() =>
      PostV2RouterChatCompletionsResponseBodyFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsResponseBodyToolCalls$ {
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsResponseBodyToolCalls$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsResponseBodyToolCalls$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyToolCalls$Outbound` instead. */
  export type Outbound =
    PostV2RouterChatCompletionsResponseBodyToolCalls$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyRole$inboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsResponseBodyRole> = z
    .nativeEnum(PostV2RouterChatCompletionsResponseBodyRole);

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyRole$outboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsResponseBodyRole> =
    PostV2RouterChatCompletionsResponseBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsResponseBodyRole$ {
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyRole$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsResponseBodyRole$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyRole$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsResponseBodyRole$outboundSchema;
}

/** @internal */
export const Delta$inboundSchema: z.ZodType<Delta, z.ZodTypeDef, unknown> = z
  .object({
    content: z.nullable(z.string()),
    refusal: z.nullable(z.string()),
    tool_calls: z.array(
      z.lazy(() =>
        PostV2RouterChatCompletionsResponseBodyToolCalls$inboundSchema
      ),
    ),
    role: PostV2RouterChatCompletionsResponseBodyRole$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type Delta$Outbound = {
  content: string | null;
  refusal: string | null;
  tool_calls: Array<PostV2RouterChatCompletionsResponseBodyToolCalls$Outbound>;
  role: string;
};

/** @internal */
export const Delta$outboundSchema: z.ZodType<
  Delta$Outbound,
  z.ZodTypeDef,
  Delta
> = z.object({
  content: z.nullable(z.string()),
  refusal: z.nullable(z.string()),
  toolCalls: z.array(
    z.lazy(() =>
      PostV2RouterChatCompletionsResponseBodyToolCalls$outboundSchema
    ),
  ),
  role: PostV2RouterChatCompletionsResponseBodyRole$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Delta$ {
  /** @deprecated use `Delta$inboundSchema` instead. */
  export const inboundSchema = Delta$inboundSchema;
  /** @deprecated use `Delta$outboundSchema` instead. */
  export const outboundSchema = Delta$outboundSchema;
  /** @deprecated use `Delta$Outbound` instead. */
  export type Outbound = Delta$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyChoices$inboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyChoices,
    z.ZodTypeDef,
    unknown
  > = z.object({
    finish_reason: ResponseBodyFinishReason$inboundSchema,
    index: z.number(),
    logprobs: z.nullable(z.lazy(() => ResponseBodyLogprobs$inboundSchema)),
    delta: z.lazy(() => Delta$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "finish_reason": "finishReason",
    });
  });

/** @internal */
export type PostV2RouterChatCompletionsResponseBodyChoices$Outbound = {
  finish_reason: string;
  index: number;
  logprobs: ResponseBodyLogprobs$Outbound | null;
  delta: Delta$Outbound;
};

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyChoices$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyChoices$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletionsResponseBodyChoices
  > = z.object({
    finishReason: ResponseBodyFinishReason$outboundSchema,
    index: z.number(),
    logprobs: z.nullable(z.lazy(() => ResponseBodyLogprobs$outboundSchema)),
    delta: z.lazy(() => Delta$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      finishReason: "finish_reason",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsResponseBodyChoices$ {
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyChoices$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsResponseBodyChoices$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyChoices$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsResponseBodyChoices$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyChoices$Outbound` instead. */
  export type Outbound =
    PostV2RouterChatCompletionsResponseBodyChoices$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyUsage$inboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyUsage,
    z.ZodTypeDef,
    unknown
  > = z.object({
    completion_tokens: z.number(),
    prompt_tokens: z.number(),
    total_tokens: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "completion_tokens": "completionTokens",
      "prompt_tokens": "promptTokens",
      "total_tokens": "totalTokens",
    });
  });

/** @internal */
export type PostV2RouterChatCompletionsResponseBodyUsage$Outbound = {
  completion_tokens: number;
  prompt_tokens: number;
  total_tokens: number;
};

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyUsage$outboundSchema:
  z.ZodType<
    PostV2RouterChatCompletionsResponseBodyUsage$Outbound,
    z.ZodTypeDef,
    PostV2RouterChatCompletionsResponseBodyUsage
  > = z.object({
    completionTokens: z.number(),
    promptTokens: z.number(),
    totalTokens: z.number(),
  }).transform((v) => {
    return remap$(v, {
      completionTokens: "completion_tokens",
      promptTokens: "prompt_tokens",
      totalTokens: "total_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsResponseBodyUsage$ {
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyUsage$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsResponseBodyUsage$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyUsage$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsResponseBodyUsage$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyUsage$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletionsResponseBodyUsage$Outbound;
}

/** @internal */
export const ResponseBody2$inboundSchema: z.ZodType<
  ResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  choices: z.array(
    z.lazy(() => PostV2RouterChatCompletionsResponseBodyChoices$inboundSchema),
  ),
  created: z.number(),
  model: z.string(),
  system_fingerprint: z.string(),
  object: z.string(),
  usage: z.lazy(() =>
    PostV2RouterChatCompletionsResponseBodyUsage$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type ResponseBody2$Outbound = {
  id: string;
  choices: Array<PostV2RouterChatCompletionsResponseBodyChoices$Outbound>;
  created: number;
  model: string;
  system_fingerprint: string;
  object: string;
  usage: PostV2RouterChatCompletionsResponseBodyUsage$Outbound;
};

/** @internal */
export const ResponseBody2$outboundSchema: z.ZodType<
  ResponseBody2$Outbound,
  z.ZodTypeDef,
  ResponseBody2
> = z.object({
  id: z.string(),
  choices: z.array(
    z.lazy(() => PostV2RouterChatCompletionsResponseBodyChoices$outboundSchema),
  ),
  created: z.number(),
  model: z.string(),
  systemFingerprint: z.string(),
  object: z.string(),
  usage: z.lazy(() =>
    PostV2RouterChatCompletionsResponseBodyUsage$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody2$ {
  /** @deprecated use `ResponseBody2$inboundSchema` instead. */
  export const inboundSchema = ResponseBody2$inboundSchema;
  /** @deprecated use `ResponseBody2$outboundSchema` instead. */
  export const outboundSchema = ResponseBody2$outboundSchema;
  /** @deprecated use `ResponseBody2$Outbound` instead. */
  export type Outbound = ResponseBody2$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyFinishReason$inboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsResponseBodyFinishReason> =
    z.nativeEnum(PostV2RouterChatCompletionsResponseBodyFinishReason);

/** @internal */
export const PostV2RouterChatCompletionsResponseBodyFinishReason$outboundSchema:
  z.ZodNativeEnum<typeof PostV2RouterChatCompletionsResponseBodyFinishReason> =
    PostV2RouterChatCompletionsResponseBodyFinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsResponseBodyFinishReason$ {
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyFinishReason$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsResponseBodyFinishReason$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBodyFinishReason$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsResponseBodyFinishReason$outboundSchema;
}

/** @internal */
export const ResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyType
> = z.nativeEnum(ResponseBodyType);

/** @internal */
export const ResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyType
> = ResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyType$ {
  /** @deprecated use `ResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyType$inboundSchema;
  /** @deprecated use `ResponseBodyType$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyType$outboundSchema;
}

/** @internal */
export const ResponseBodyFunction$inboundSchema: z.ZodType<
  ResponseBodyFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type ResponseBodyFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const ResponseBodyFunction$outboundSchema: z.ZodType<
  ResponseBodyFunction$Outbound,
  z.ZodTypeDef,
  ResponseBodyFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFunction$ {
  /** @deprecated use `ResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFunction$inboundSchema;
  /** @deprecated use `ResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFunction$outboundSchema;
  /** @deprecated use `ResponseBodyFunction$Outbound` instead. */
  export type Outbound = ResponseBodyFunction$Outbound;
}

/** @internal */
export const ResponseBodyToolCalls$inboundSchema: z.ZodType<
  ResponseBodyToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: ResponseBodyType$inboundSchema,
  function: z.lazy(() => ResponseBodyFunction$inboundSchema),
});

/** @internal */
export type ResponseBodyToolCalls$Outbound = {
  id: string;
  type: string;
  function: ResponseBodyFunction$Outbound;
};

/** @internal */
export const ResponseBodyToolCalls$outboundSchema: z.ZodType<
  ResponseBodyToolCalls$Outbound,
  z.ZodTypeDef,
  ResponseBodyToolCalls
> = z.object({
  id: z.string(),
  type: ResponseBodyType$outboundSchema,
  function: z.lazy(() => ResponseBodyFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyToolCalls$ {
  /** @deprecated use `ResponseBodyToolCalls$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyToolCalls$inboundSchema;
  /** @deprecated use `ResponseBodyToolCalls$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyToolCalls$outboundSchema;
  /** @deprecated use `ResponseBodyToolCalls$Outbound` instead. */
  export type Outbound = ResponseBodyToolCalls$Outbound;
}

/** @internal */
export const ResponseBodyRole$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyRole
> = z.nativeEnum(ResponseBodyRole);

/** @internal */
export const ResponseBodyRole$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyRole
> = ResponseBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRole$ {
  /** @deprecated use `ResponseBodyRole$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRole$inboundSchema;
  /** @deprecated use `ResponseBodyRole$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRole$outboundSchema;
}

/** @internal */
export const ResponseBodyMessage$inboundSchema: z.ZodType<
  ResponseBodyMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()),
  refusal: z.nullable(z.string()),
  tool_calls: z.array(z.lazy(() => ResponseBodyToolCalls$inboundSchema)),
  role: ResponseBodyRole$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ResponseBodyMessage$Outbound = {
  content: string | null;
  refusal: string | null;
  tool_calls: Array<ResponseBodyToolCalls$Outbound>;
  role: string;
};

/** @internal */
export const ResponseBodyMessage$outboundSchema: z.ZodType<
  ResponseBodyMessage$Outbound,
  z.ZodTypeDef,
  ResponseBodyMessage
> = z.object({
  content: z.nullable(z.string()),
  refusal: z.nullable(z.string()),
  toolCalls: z.array(z.lazy(() => ResponseBodyToolCalls$outboundSchema)),
  role: ResponseBodyRole$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyMessage$ {
  /** @deprecated use `ResponseBodyMessage$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyMessage$inboundSchema;
  /** @deprecated use `ResponseBodyMessage$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyMessage$outboundSchema;
  /** @deprecated use `ResponseBodyMessage$Outbound` instead. */
  export type Outbound = ResponseBodyMessage$Outbound;
}

/** @internal */
export const TopLogprobs$inboundSchema: z.ZodType<
  TopLogprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/** @internal */
export type TopLogprobs$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

/** @internal */
export const TopLogprobs$outboundSchema: z.ZodType<
  TopLogprobs$Outbound,
  z.ZodTypeDef,
  TopLogprobs
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopLogprobs$ {
  /** @deprecated use `TopLogprobs$inboundSchema` instead. */
  export const inboundSchema = TopLogprobs$inboundSchema;
  /** @deprecated use `TopLogprobs$outboundSchema` instead. */
  export const outboundSchema = TopLogprobs$outboundSchema;
  /** @deprecated use `TopLogprobs$Outbound` instead. */
  export type Outbound = TopLogprobs$Outbound;
}

/** @internal */
export const ResponseBodyContent$inboundSchema: z.ZodType<
  ResponseBodyContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  top_logprobs: z.array(z.lazy(() => TopLogprobs$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type ResponseBodyContent$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<TopLogprobs$Outbound>;
};

/** @internal */
export const ResponseBodyContent$outboundSchema: z.ZodType<
  ResponseBodyContent$Outbound,
  z.ZodTypeDef,
  ResponseBodyContent
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  topLogprobs: z.array(z.lazy(() => TopLogprobs$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyContent$ {
  /** @deprecated use `ResponseBodyContent$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyContent$inboundSchema;
  /** @deprecated use `ResponseBodyContent$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyContent$outboundSchema;
  /** @deprecated use `ResponseBodyContent$Outbound` instead. */
  export type Outbound = ResponseBodyContent$Outbound;
}

/** @internal */
export const ResponseBodyTopLogprobs$inboundSchema: z.ZodType<
  ResponseBodyTopLogprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/** @internal */
export type ResponseBodyTopLogprobs$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

/** @internal */
export const ResponseBodyTopLogprobs$outboundSchema: z.ZodType<
  ResponseBodyTopLogprobs$Outbound,
  z.ZodTypeDef,
  ResponseBodyTopLogprobs
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyTopLogprobs$ {
  /** @deprecated use `ResponseBodyTopLogprobs$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyTopLogprobs$inboundSchema;
  /** @deprecated use `ResponseBodyTopLogprobs$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyTopLogprobs$outboundSchema;
  /** @deprecated use `ResponseBodyTopLogprobs$Outbound` instead. */
  export type Outbound = ResponseBodyTopLogprobs$Outbound;
}

/** @internal */
export const Refusal$inboundSchema: z.ZodType<Refusal, z.ZodTypeDef, unknown> =
  z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number())),
    top_logprobs: z.array(z.lazy(() => ResponseBodyTopLogprobs$inboundSchema)),
  }).transform((v) => {
    return remap$(v, {
      "top_logprobs": "topLogprobs",
    });
  });

/** @internal */
export type Refusal$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<ResponseBodyTopLogprobs$Outbound>;
};

/** @internal */
export const Refusal$outboundSchema: z.ZodType<
  Refusal$Outbound,
  z.ZodTypeDef,
  Refusal
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  topLogprobs: z.array(z.lazy(() => ResponseBodyTopLogprobs$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Refusal$ {
  /** @deprecated use `Refusal$inboundSchema` instead. */
  export const inboundSchema = Refusal$inboundSchema;
  /** @deprecated use `Refusal$outboundSchema` instead. */
  export const outboundSchema = Refusal$outboundSchema;
  /** @deprecated use `Refusal$Outbound` instead. */
  export type Outbound = Refusal$Outbound;
}

/** @internal */
export const Logprobs$inboundSchema: z.ZodType<
  Logprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.array(z.lazy(() => ResponseBodyContent$inboundSchema))),
  refusal: z.nullable(z.array(z.lazy(() => Refusal$inboundSchema))),
});

/** @internal */
export type Logprobs$Outbound = {
  content: Array<ResponseBodyContent$Outbound> | null;
  refusal: Array<Refusal$Outbound> | null;
};

/** @internal */
export const Logprobs$outboundSchema: z.ZodType<
  Logprobs$Outbound,
  z.ZodTypeDef,
  Logprobs
> = z.object({
  content: z.nullable(
    z.array(z.lazy(() => ResponseBodyContent$outboundSchema)),
  ),
  refusal: z.nullable(z.array(z.lazy(() => Refusal$outboundSchema))),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Logprobs$ {
  /** @deprecated use `Logprobs$inboundSchema` instead. */
  export const inboundSchema = Logprobs$inboundSchema;
  /** @deprecated use `Logprobs$outboundSchema` instead. */
  export const outboundSchema = Logprobs$outboundSchema;
  /** @deprecated use `Logprobs$Outbound` instead. */
  export type Outbound = Logprobs$Outbound;
}

/** @internal */
export const ResponseBodyChoices$inboundSchema: z.ZodType<
  ResponseBodyChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  finish_reason:
    PostV2RouterChatCompletionsResponseBodyFinishReason$inboundSchema,
  index: z.number(),
  message: z.lazy(() => ResponseBodyMessage$inboundSchema),
  logprobs: z.nullable(z.lazy(() => Logprobs$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type ResponseBodyChoices$Outbound = {
  finish_reason: string;
  index: number;
  message: ResponseBodyMessage$Outbound;
  logprobs: Logprobs$Outbound | null;
};

/** @internal */
export const ResponseBodyChoices$outboundSchema: z.ZodType<
  ResponseBodyChoices$Outbound,
  z.ZodTypeDef,
  ResponseBodyChoices
> = z.object({
  finishReason:
    PostV2RouterChatCompletionsResponseBodyFinishReason$outboundSchema,
  index: z.number(),
  message: z.lazy(() => ResponseBodyMessage$outboundSchema),
  logprobs: z.nullable(z.lazy(() => Logprobs$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyChoices$ {
  /** @deprecated use `ResponseBodyChoices$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyChoices$inboundSchema;
  /** @deprecated use `ResponseBodyChoices$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyChoices$outboundSchema;
  /** @deprecated use `ResponseBodyChoices$Outbound` instead. */
  export type Outbound = ResponseBodyChoices$Outbound;
}

/** @internal */
export const ResponseBodyUsage$inboundSchema: z.ZodType<
  ResponseBodyUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  completion_tokens: z.number(),
  prompt_tokens: z.number(),
  total_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "completion_tokens": "completionTokens",
    "prompt_tokens": "promptTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type ResponseBodyUsage$Outbound = {
  completion_tokens: number;
  prompt_tokens: number;
  total_tokens: number;
};

/** @internal */
export const ResponseBodyUsage$outboundSchema: z.ZodType<
  ResponseBodyUsage$Outbound,
  z.ZodTypeDef,
  ResponseBodyUsage
> = z.object({
  completionTokens: z.number(),
  promptTokens: z.number(),
  totalTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    completionTokens: "completion_tokens",
    promptTokens: "prompt_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyUsage$ {
  /** @deprecated use `ResponseBodyUsage$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyUsage$inboundSchema;
  /** @deprecated use `ResponseBodyUsage$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyUsage$outboundSchema;
  /** @deprecated use `ResponseBodyUsage$Outbound` instead. */
  export type Outbound = ResponseBodyUsage$Outbound;
}

/** @internal */
export const ResponseBody1$inboundSchema: z.ZodType<
  ResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  choices: z.array(z.lazy(() => ResponseBodyChoices$inboundSchema)),
  created: z.number(),
  model: z.string(),
  system_fingerprint: z.string(),
  object: z.string(),
  usage: z.lazy(() => ResponseBodyUsage$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type ResponseBody1$Outbound = {
  id: string;
  choices: Array<ResponseBodyChoices$Outbound>;
  created: number;
  model: string;
  system_fingerprint: string;
  object: string;
  usage: ResponseBodyUsage$Outbound;
};

/** @internal */
export const ResponseBody1$outboundSchema: z.ZodType<
  ResponseBody1$Outbound,
  z.ZodTypeDef,
  ResponseBody1
> = z.object({
  id: z.string(),
  choices: z.array(z.lazy(() => ResponseBodyChoices$outboundSchema)),
  created: z.number(),
  model: z.string(),
  systemFingerprint: z.string(),
  object: z.string(),
  usage: z.lazy(() => ResponseBodyUsage$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody1$ {
  /** @deprecated use `ResponseBody1$inboundSchema` instead. */
  export const inboundSchema = ResponseBody1$inboundSchema;
  /** @deprecated use `ResponseBody1$outboundSchema` instead. */
  export const outboundSchema = ResponseBody1$outboundSchema;
  /** @deprecated use `ResponseBody1$Outbound` instead. */
  export type Outbound = ResponseBody1$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsResponseBody$inboundSchema: z.ZodType<
  PostV2RouterChatCompletionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ResponseBody1$inboundSchema),
  z.lazy(() => ResponseBody2$inboundSchema),
]);

/** @internal */
export type PostV2RouterChatCompletionsResponseBody$Outbound =
  | ResponseBody1$Outbound
  | ResponseBody2$Outbound;

/** @internal */
export const PostV2RouterChatCompletionsResponseBody$outboundSchema: z.ZodType<
  PostV2RouterChatCompletionsResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2RouterChatCompletionsResponseBody
> = z.union([
  z.lazy(() => ResponseBody1$outboundSchema),
  z.lazy(() => ResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsResponseBody$ {
  /** @deprecated use `PostV2RouterChatCompletionsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsResponseBody$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsResponseBody$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponseBody$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletionsResponseBody$Outbound;
}

/** @internal */
export const PostV2RouterChatCompletionsResponse$inboundSchema: z.ZodType<
  PostV2RouterChatCompletionsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.lazy(() => ResponseBody1$inboundSchema),
    z.lazy(() => ResponseBody2$inboundSchema),
  ]),
  z.instanceof(ReadableStream<Uint8Array>).transform(stream => {
    return new EventStream({
      stream,
      decoder(rawEvent) {
        const schema = z.lazy(() =>
          PostV2RouterChatCompletionsRouterResponseBody$inboundSchema
        );
        return schema.parse(rawEvent);
      },
    });
  }),
]);

/** @internal */
export type PostV2RouterChatCompletionsResponse$Outbound =
  | ResponseBody1$Outbound
  | ResponseBody2$Outbound
  | never;

/** @internal */
export const PostV2RouterChatCompletionsResponse$outboundSchema: z.ZodType<
  PostV2RouterChatCompletionsResponse$Outbound,
  z.ZodTypeDef,
  PostV2RouterChatCompletionsResponse
> = z.union([
  z.union([
    z.lazy(() => ResponseBody1$outboundSchema),
    z.lazy(() => ResponseBody2$outboundSchema),
  ]),
  z.never(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2RouterChatCompletionsResponse$ {
  /** @deprecated use `PostV2RouterChatCompletionsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostV2RouterChatCompletionsResponse$inboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV2RouterChatCompletionsResponse$outboundSchema;
  /** @deprecated use `PostV2RouterChatCompletionsResponse$Outbound` instead. */
  export type Outbound = PostV2RouterChatCompletionsResponse$Outbound;
}
