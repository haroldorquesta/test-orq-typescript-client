/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Input text to embed, encoded as a string or array of tokens.
 */
export type Input = string | Array<string>;

/**
 * Type of the document element
 */
export const EncodingFormat = {
  Base64: "base64",
  Float: "float",
} as const;
/**
 * Type of the document element
 */
export type EncodingFormat = ClosedEnum<typeof EncodingFormat>;

export type RouterEmbeddingRequestBody = {
  /**
   * Input text to embed, encoded as a string or array of tokens.
   */
  input: string | Array<string>;
  /**
   * ID of the model to use
   */
  model: string;
  /**
   * Type of the document element
   */
  encodingFormat?: EncodingFormat | undefined;
  /**
   * The number of dimensions the resulting output embeddings should have.
   */
  dimensions?: number | undefined;
  /**
   * A unique identifier representing your end-user
   */
  user?: string | undefined;
};

export const RouterEmbeddingObject = {
  List: "list",
} as const;
export type RouterEmbeddingObject = ClosedEnum<typeof RouterEmbeddingObject>;

/**
 * The object type, which is always "embedding".
 */
export const RouterEmbeddingRouterEmbeddingsObject = {
  Embedding: "embedding",
} as const;
/**
 * The object type, which is always "embedding".
 */
export type RouterEmbeddingRouterEmbeddingsObject = ClosedEnum<
  typeof RouterEmbeddingRouterEmbeddingsObject
>;

/**
 * The embedding result.
 */
export type Embedding = Array<number> | string;

export type RouterEmbeddingData = {
  /**
   * The object type, which is always "embedding".
   */
  object: RouterEmbeddingRouterEmbeddingsObject;
  /**
   * The embedding result.
   */
  embedding: Array<number> | string;
  /**
   * The index of the embedding in the list of embeddings.
   */
  index: number;
};

export type RouterEmbeddingUsage = {
  promptTokens: number;
  totalTokens: number;
};

/**
 * Embeddings created
 */
export type RouterEmbeddingResponseBody = {
  object: RouterEmbeddingObject;
  data: Array<RouterEmbeddingData>;
  /**
   * ID of the model to use
   */
  model: string;
  usage: RouterEmbeddingUsage;
};

/** @internal */
export const Input$inboundSchema: z.ZodType<Input, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.array(z.string())]);

/** @internal */
export type Input$Outbound = string | Array<string>;

/** @internal */
export const Input$outboundSchema: z.ZodType<
  Input$Outbound,
  z.ZodTypeDef,
  Input
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Input$ {
  /** @deprecated use `Input$inboundSchema` instead. */
  export const inboundSchema = Input$inboundSchema;
  /** @deprecated use `Input$outboundSchema` instead. */
  export const outboundSchema = Input$outboundSchema;
  /** @deprecated use `Input$Outbound` instead. */
  export type Outbound = Input$Outbound;
}

export function inputToJSON(input: Input): string {
  return JSON.stringify(Input$outboundSchema.parse(input));
}

export function inputFromJSON(
  jsonString: string,
): SafeParseResult<Input, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Input$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Input' from JSON`,
  );
}

/** @internal */
export const EncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof EncodingFormat
> = z.nativeEnum(EncodingFormat);

/** @internal */
export const EncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof EncodingFormat
> = EncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncodingFormat$ {
  /** @deprecated use `EncodingFormat$inboundSchema` instead. */
  export const inboundSchema = EncodingFormat$inboundSchema;
  /** @deprecated use `EncodingFormat$outboundSchema` instead. */
  export const outboundSchema = EncodingFormat$outboundSchema;
}

/** @internal */
export const RouterEmbeddingRequestBody$inboundSchema: z.ZodType<
  RouterEmbeddingRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.union([z.string(), z.array(z.string())]),
  model: z.string(),
  encoding_format: EncodingFormat$inboundSchema.default("float"),
  dimensions: z.number().optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type RouterEmbeddingRequestBody$Outbound = {
  input: string | Array<string>;
  model: string;
  encoding_format: string;
  dimensions?: number | undefined;
  user?: string | undefined;
};

/** @internal */
export const RouterEmbeddingRequestBody$outboundSchema: z.ZodType<
  RouterEmbeddingRequestBody$Outbound,
  z.ZodTypeDef,
  RouterEmbeddingRequestBody
> = z.object({
  input: z.union([z.string(), z.array(z.string())]),
  model: z.string(),
  encodingFormat: EncodingFormat$outboundSchema.default("float"),
  dimensions: z.number().optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterEmbeddingRequestBody$ {
  /** @deprecated use `RouterEmbeddingRequestBody$inboundSchema` instead. */
  export const inboundSchema = RouterEmbeddingRequestBody$inboundSchema;
  /** @deprecated use `RouterEmbeddingRequestBody$outboundSchema` instead. */
  export const outboundSchema = RouterEmbeddingRequestBody$outboundSchema;
  /** @deprecated use `RouterEmbeddingRequestBody$Outbound` instead. */
  export type Outbound = RouterEmbeddingRequestBody$Outbound;
}

export function routerEmbeddingRequestBodyToJSON(
  routerEmbeddingRequestBody: RouterEmbeddingRequestBody,
): string {
  return JSON.stringify(
    RouterEmbeddingRequestBody$outboundSchema.parse(routerEmbeddingRequestBody),
  );
}

export function routerEmbeddingRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RouterEmbeddingRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouterEmbeddingRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouterEmbeddingRequestBody' from JSON`,
  );
}

/** @internal */
export const RouterEmbeddingObject$inboundSchema: z.ZodNativeEnum<
  typeof RouterEmbeddingObject
> = z.nativeEnum(RouterEmbeddingObject);

/** @internal */
export const RouterEmbeddingObject$outboundSchema: z.ZodNativeEnum<
  typeof RouterEmbeddingObject
> = RouterEmbeddingObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterEmbeddingObject$ {
  /** @deprecated use `RouterEmbeddingObject$inboundSchema` instead. */
  export const inboundSchema = RouterEmbeddingObject$inboundSchema;
  /** @deprecated use `RouterEmbeddingObject$outboundSchema` instead. */
  export const outboundSchema = RouterEmbeddingObject$outboundSchema;
}

/** @internal */
export const RouterEmbeddingRouterEmbeddingsObject$inboundSchema:
  z.ZodNativeEnum<typeof RouterEmbeddingRouterEmbeddingsObject> = z.nativeEnum(
    RouterEmbeddingRouterEmbeddingsObject,
  );

/** @internal */
export const RouterEmbeddingRouterEmbeddingsObject$outboundSchema:
  z.ZodNativeEnum<typeof RouterEmbeddingRouterEmbeddingsObject> =
    RouterEmbeddingRouterEmbeddingsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterEmbeddingRouterEmbeddingsObject$ {
  /** @deprecated use `RouterEmbeddingRouterEmbeddingsObject$inboundSchema` instead. */
  export const inboundSchema =
    RouterEmbeddingRouterEmbeddingsObject$inboundSchema;
  /** @deprecated use `RouterEmbeddingRouterEmbeddingsObject$outboundSchema` instead. */
  export const outboundSchema =
    RouterEmbeddingRouterEmbeddingsObject$outboundSchema;
}

/** @internal */
export const Embedding$inboundSchema: z.ZodType<
  Embedding,
  z.ZodTypeDef,
  unknown
> = z.union([z.array(z.number()), z.string()]);

/** @internal */
export type Embedding$Outbound = Array<number> | string;

/** @internal */
export const Embedding$outboundSchema: z.ZodType<
  Embedding$Outbound,
  z.ZodTypeDef,
  Embedding
> = z.union([z.array(z.number()), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Embedding$ {
  /** @deprecated use `Embedding$inboundSchema` instead. */
  export const inboundSchema = Embedding$inboundSchema;
  /** @deprecated use `Embedding$outboundSchema` instead. */
  export const outboundSchema = Embedding$outboundSchema;
  /** @deprecated use `Embedding$Outbound` instead. */
  export type Outbound = Embedding$Outbound;
}

export function embeddingToJSON(embedding: Embedding): string {
  return JSON.stringify(Embedding$outboundSchema.parse(embedding));
}

export function embeddingFromJSON(
  jsonString: string,
): SafeParseResult<Embedding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Embedding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Embedding' from JSON`,
  );
}

/** @internal */
export const RouterEmbeddingData$inboundSchema: z.ZodType<
  RouterEmbeddingData,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: RouterEmbeddingRouterEmbeddingsObject$inboundSchema,
  embedding: z.union([z.array(z.number()), z.string()]),
  index: z.number(),
});

/** @internal */
export type RouterEmbeddingData$Outbound = {
  object: string;
  embedding: Array<number> | string;
  index: number;
};

/** @internal */
export const RouterEmbeddingData$outboundSchema: z.ZodType<
  RouterEmbeddingData$Outbound,
  z.ZodTypeDef,
  RouterEmbeddingData
> = z.object({
  object: RouterEmbeddingRouterEmbeddingsObject$outboundSchema,
  embedding: z.union([z.array(z.number()), z.string()]),
  index: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterEmbeddingData$ {
  /** @deprecated use `RouterEmbeddingData$inboundSchema` instead. */
  export const inboundSchema = RouterEmbeddingData$inboundSchema;
  /** @deprecated use `RouterEmbeddingData$outboundSchema` instead. */
  export const outboundSchema = RouterEmbeddingData$outboundSchema;
  /** @deprecated use `RouterEmbeddingData$Outbound` instead. */
  export type Outbound = RouterEmbeddingData$Outbound;
}

export function routerEmbeddingDataToJSON(
  routerEmbeddingData: RouterEmbeddingData,
): string {
  return JSON.stringify(
    RouterEmbeddingData$outboundSchema.parse(routerEmbeddingData),
  );
}

export function routerEmbeddingDataFromJSON(
  jsonString: string,
): SafeParseResult<RouterEmbeddingData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouterEmbeddingData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouterEmbeddingData' from JSON`,
  );
}

/** @internal */
export const RouterEmbeddingUsage$inboundSchema: z.ZodType<
  RouterEmbeddingUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.number(),
  total_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type RouterEmbeddingUsage$Outbound = {
  prompt_tokens: number;
  total_tokens: number;
};

/** @internal */
export const RouterEmbeddingUsage$outboundSchema: z.ZodType<
  RouterEmbeddingUsage$Outbound,
  z.ZodTypeDef,
  RouterEmbeddingUsage
> = z.object({
  promptTokens: z.number(),
  totalTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterEmbeddingUsage$ {
  /** @deprecated use `RouterEmbeddingUsage$inboundSchema` instead. */
  export const inboundSchema = RouterEmbeddingUsage$inboundSchema;
  /** @deprecated use `RouterEmbeddingUsage$outboundSchema` instead. */
  export const outboundSchema = RouterEmbeddingUsage$outboundSchema;
  /** @deprecated use `RouterEmbeddingUsage$Outbound` instead. */
  export type Outbound = RouterEmbeddingUsage$Outbound;
}

export function routerEmbeddingUsageToJSON(
  routerEmbeddingUsage: RouterEmbeddingUsage,
): string {
  return JSON.stringify(
    RouterEmbeddingUsage$outboundSchema.parse(routerEmbeddingUsage),
  );
}

export function routerEmbeddingUsageFromJSON(
  jsonString: string,
): SafeParseResult<RouterEmbeddingUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouterEmbeddingUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouterEmbeddingUsage' from JSON`,
  );
}

/** @internal */
export const RouterEmbeddingResponseBody$inboundSchema: z.ZodType<
  RouterEmbeddingResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: RouterEmbeddingObject$inboundSchema,
  data: z.array(z.lazy(() => RouterEmbeddingData$inboundSchema)),
  model: z.string(),
  usage: z.lazy(() => RouterEmbeddingUsage$inboundSchema),
});

/** @internal */
export type RouterEmbeddingResponseBody$Outbound = {
  object: string;
  data: Array<RouterEmbeddingData$Outbound>;
  model: string;
  usage: RouterEmbeddingUsage$Outbound;
};

/** @internal */
export const RouterEmbeddingResponseBody$outboundSchema: z.ZodType<
  RouterEmbeddingResponseBody$Outbound,
  z.ZodTypeDef,
  RouterEmbeddingResponseBody
> = z.object({
  object: RouterEmbeddingObject$outboundSchema,
  data: z.array(z.lazy(() => RouterEmbeddingData$outboundSchema)),
  model: z.string(),
  usage: z.lazy(() => RouterEmbeddingUsage$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouterEmbeddingResponseBody$ {
  /** @deprecated use `RouterEmbeddingResponseBody$inboundSchema` instead. */
  export const inboundSchema = RouterEmbeddingResponseBody$inboundSchema;
  /** @deprecated use `RouterEmbeddingResponseBody$outboundSchema` instead. */
  export const outboundSchema = RouterEmbeddingResponseBody$outboundSchema;
  /** @deprecated use `RouterEmbeddingResponseBody$Outbound` instead. */
  export type Outbound = RouterEmbeddingResponseBody$Outbound;
}

export function routerEmbeddingResponseBodyToJSON(
  routerEmbeddingResponseBody: RouterEmbeddingResponseBody,
): string {
  return JSON.stringify(
    RouterEmbeddingResponseBody$outboundSchema.parse(
      routerEmbeddingResponseBody,
    ),
  );
}

export function routerEmbeddingResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RouterEmbeddingResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouterEmbeddingResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouterEmbeddingResponseBody' from JSON`,
  );
}
