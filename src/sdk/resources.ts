/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { resourcesDeleteV2ResourcesDatasetsDatasetId } from "../funcs/resourcesDeleteV2ResourcesDatasetsDatasetId.js";
import { resourcesDeleteV2ResourcesDatasetsDatasetIdRowsBulk } from "../funcs/resourcesDeleteV2ResourcesDatasetsDatasetIdRowsBulk.js";
import { resourcesDeleteV2ResourcesDatasetsDatasetIdRowsRowId } from "../funcs/resourcesDeleteV2ResourcesDatasetsDatasetIdRowsRowId.js";
import { resourcesGetV2ResourcesDatasets } from "../funcs/resourcesGetV2ResourcesDatasets.js";
import { resourcesGetV2ResourcesDatasetsDatasetId } from "../funcs/resourcesGetV2ResourcesDatasetsDatasetId.js";
import { resourcesGetV2ResourcesDatasetsDatasetIdRows } from "../funcs/resourcesGetV2ResourcesDatasetsDatasetIdRows.js";
import { resourcesGetV2ResourcesDatasetsDatasetIdRowsRowId } from "../funcs/resourcesGetV2ResourcesDatasetsDatasetIdRowsRowId.js";
import { resourcesPatchV2ResourcesDatasetsDatasetId } from "../funcs/resourcesPatchV2ResourcesDatasetsDatasetId.js";
import { resourcesPatchV2ResourcesDatasetsDatasetIdRowsRowId } from "../funcs/resourcesPatchV2ResourcesDatasetsDatasetIdRowsRowId.js";
import { resourcesPostV2ResourcesDatasets } from "../funcs/resourcesPostV2ResourcesDatasets.js";
import { resourcesPostV2ResourcesDatasetsDatasetIdRows } from "../funcs/resourcesPostV2ResourcesDatasetsDatasetIdRows.js";
import { resourcesPostV2ResourcesDatasetsDatasetIdRowsBulk } from "../funcs/resourcesPostV2ResourcesDatasetsDatasetIdRowsBulk.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Resources extends ClientSDK {
  /**
   * Create a dataset
   *
   * @remarks
   * Create a dataset
   */
  async postV2ResourcesDatasets(
    request?: operations.PostV2ResourcesDatasetsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostV2ResourcesDatasetsResponseBody> {
    return unwrapAsync(resourcesPostV2ResourcesDatasets(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all datasets
   */
  async getV2ResourcesDatasets(
    request: operations.GetV2ResourcesDatasetsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2ResourcesDatasetsResponseBody> {
    return unwrapAsync(resourcesGetV2ResourcesDatasets(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a dataset
   */
  async deleteV2ResourcesDatasetsDatasetId(
    request: operations.DeleteV2ResourcesDatasetsDatasetIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(resourcesDeleteV2ResourcesDatasetsDatasetId(
      this,
      request,
      options,
    ));
  }

  /**
   * Get one  dataset
   */
  async getV2ResourcesDatasetsDatasetId(
    request: operations.GetV2ResourcesDatasetsDatasetIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2ResourcesDatasetsDatasetIdResponseBody> {
    return unwrapAsync(resourcesGetV2ResourcesDatasetsDatasetId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a dataset
   *
   * @remarks
   * Update a dataset
   */
  async patchV2ResourcesDatasetsDatasetId(
    request: operations.PatchV2ResourcesDatasetsDatasetIdRequest,
    options?: RequestOptions,
  ): Promise<operations.PatchV2ResourcesDatasetsDatasetIdResponseBody> {
    return unwrapAsync(resourcesPatchV2ResourcesDatasetsDatasetId(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a list of dataset rows
   */
  async postV2ResourcesDatasetsDatasetIdRowsBulk(
    request: operations.PostV2ResourcesDatasetsDatasetIdRowsBulkRequest,
    options?: RequestOptions,
  ): Promise<
    Array<operations.PostV2ResourcesDatasetsDatasetIdRowsBulkResponseBody>
  > {
    return unwrapAsync(resourcesPostV2ResourcesDatasetsDatasetIdRowsBulk(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a list of dataset rows
   */
  async deleteV2ResourcesDatasetsDatasetIdRowsBulk(
    request: operations.DeleteV2ResourcesDatasetsDatasetIdRowsBulkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(resourcesDeleteV2ResourcesDatasetsDatasetIdRowsBulk(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a dataset row
   */
  async postV2ResourcesDatasetsDatasetIdRows(
    request: operations.PostV2ResourcesDatasetsDatasetIdRowsRequest,
    options?: RequestOptions,
  ): Promise<operations.PostV2ResourcesDatasetsDatasetIdRowsResponseBody> {
    return unwrapAsync(resourcesPostV2ResourcesDatasetsDatasetIdRows(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve all dataset rows
   */
  async getV2ResourcesDatasetsDatasetIdRows(
    request: operations.GetV2ResourcesDatasetsDatasetIdRowsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2ResourcesDatasetsDatasetIdRowsResponseBody> {
    return unwrapAsync(resourcesGetV2ResourcesDatasetsDatasetIdRows(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a dataset row
   */
  async deleteV2ResourcesDatasetsDatasetIdRowsRowId(
    request: operations.DeleteV2ResourcesDatasetsDatasetIdRowsRowIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(resourcesDeleteV2ResourcesDatasetsDatasetIdRowsRowId(
      this,
      request,
      options,
    ));
  }

  /**
   * Get one dataset row
   */
  async getV2ResourcesDatasetsDatasetIdRowsRowId(
    request: operations.GetV2ResourcesDatasetsDatasetIdRowsRowIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2ResourcesDatasetsDatasetIdRowsRowIdResponseBody> {
    return unwrapAsync(resourcesGetV2ResourcesDatasetsDatasetIdRowsRowId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a dataset row
   */
  async patchV2ResourcesDatasetsDatasetIdRowsRowId(
    request: operations.PatchV2ResourcesDatasetsDatasetIdRowsRowIdRequest,
    options?: RequestOptions,
  ): Promise<
    operations.PatchV2ResourcesDatasetsDatasetIdRowsRowIdResponseBody
  > {
    return unwrapAsync(resourcesPatchV2ResourcesDatasetsDatasetIdRowsRowId(
      this,
      request,
      options,
    ));
  }
}
