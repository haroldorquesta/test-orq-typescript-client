/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { publicAddMetrics } from "../funcs/publicAddMetrics.js";
import { publicBulkUpload } from "../funcs/publicBulkUpload.js";
import { publicCreate } from "../funcs/publicCreate.js";
import { Create2AcceptEnum, publicCreate2 } from "../funcs/publicCreate2.js";
import { publicCreate3 } from "../funcs/publicCreate3.js";
import { publicCreate4 } from "../funcs/publicCreate4.js";
import { publicGenerate } from "../funcs/publicGenerate.js";
import { publicGetConfig } from "../funcs/publicGetConfig.js";
import { InvokeAcceptEnum, publicInvoke } from "../funcs/publicInvoke.js";
import { publicList } from "../funcs/publicList.js";
import { publicRerank } from "../funcs/publicRerank.js";
import { publicUpload } from "../funcs/publicUpload.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { InvokeAcceptEnum } from "../funcs/publicInvoke.js";

export { Create2AcceptEnum } from "../funcs/publicCreate2.js";

export class Public extends ClientSDK {
  /**
   * Get config
   *
   * @remarks
   * Retrieve the deployment configuration
   */
  async getConfig(
    request: operations.PostV2DeploymentsGetConfigRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2DeploymentsGetConfigResponseBody | undefined> {
    return unwrapAsync(publicGetConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Invoke
   *
   * @remarks
   * Invoke a deployment with a given payload
   */
  async invoke(
    request: components.Deployments,
    options?: RequestOptions & { acceptHeaderOverride?: InvokeAcceptEnum },
  ): Promise<operations.PostV2DeploymentsInvokeResponse | undefined> {
    return unwrapAsync(publicInvoke(
      this,
      request,
      options,
    ));
  }

  /**
   * Add metrics
   *
   * @remarks
   * Add metrics to a deployment
   */
  async addMetrics(
    request: operations.PostV2DeploymentsIdMetricsRequest,
    options?: RequestOptions,
  ): Promise<operations.PostV2DeploymentsIdMetricsResponseBody> {
    return unwrapAsync(publicAddMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * List all deployments
   *
   * @remarks
   * Returns a list of your deployments. The deployments are returned sorted by creation date, with the most recent deployments appearing first.
   */
  async list(
    request: operations.GetV2DeploymentsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2DeploymentsResponseBody> {
    return unwrapAsync(publicList(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload file
   *
   * @remarks
   * Files are used to upload documents that can be used with features like [Deployments](https://docs.orq.ai/reference/post_v2-deployments-get-config).
   */
  async upload(
    request: operations.PostV2FilesRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2FilesResponseBody> {
    return unwrapAsync(publicUpload(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk upload file
   *
   * @remarks
   * Files are used to upload documents that can be used with features like [Deployments](https://docs.orq.ai/reference/post_v2-deployments-get-config).
   */
  async bulkUpload(
    request: operations.PostV2FilesBulkRequestBody,
    options?: RequestOptions,
  ): Promise<Array<operations.ResponseBody>> {
    return unwrapAsync(publicBulkUpload(
      this,
      request,
      options,
    ));
  }

  /**
   * Embeddings
   *
   * @remarks
   * Creates an embedding vector representing the input text.
   */
  async create(
    request: operations.PostV2RouterEmbeddingsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2RouterEmbeddingsResponseBody> {
    return unwrapAsync(publicCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Chat
   *
   * @remarks
   * For sending requests to chat completion models
   */
  async create2(
    request: operations.PostV2RouterChatCompletionsRequestBody,
    options?: RequestOptions & { acceptHeaderOverride?: Create2AcceptEnum },
  ): Promise<operations.PostV2RouterChatCompletionsResponse> {
    return unwrapAsync(publicCreate2(
      this,
      request,
      options,
    ));
  }

  /**
   * legacy completions route
   *
   * @remarks
   * For sending requests to legacy completion models
   */
  async create3(
    request?: operations.PostV2RouterCompletionsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostV2RouterCompletionsResponseBody> {
    return unwrapAsync(publicCreate3(
      this,
      request,
      options,
    ));
  }

  /**
   * rerank route
   *
   * @remarks
   * For sending requests to rerank models
   */
  async rerank(
    request?: operations.PostV2RouterRerankRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostV2RouterRerankResponseBody> {
    return unwrapAsync(publicRerank(
      this,
      request,
      options,
    ));
  }

  async generate(
    request?: operations.PostV2RouterImagesGenerationsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostV2RouterImagesGenerationsResponseBody> {
    return unwrapAsync(publicGenerate(
      this,
      request,
      options,
    ));
  }

  async create4(
    request?: operations.PostV2RemoteconfigsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostV2RemoteconfigsResponseBody> {
    return unwrapAsync(publicCreate4(
      this,
      request,
      options,
    ));
  }
}
