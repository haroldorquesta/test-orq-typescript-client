/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { publicGetV2Deployments } from "../funcs/publicGetV2Deployments.js";
import { InvokeAcceptEnum, publicInvoke } from "../funcs/publicInvoke.js";
import { publicPostV2DeploymentsGetConfig } from "../funcs/publicPostV2DeploymentsGetConfig.js";
import { publicPostV2DeploymentsIdMetrics } from "../funcs/publicPostV2DeploymentsIdMetrics.js";
import { publicPostV2Files } from "../funcs/publicPostV2Files.js";
import { publicPostV2FilesBulk } from "../funcs/publicPostV2FilesBulk.js";
import { publicPostV2Remoteconfigs } from "../funcs/publicPostV2Remoteconfigs.js";
import {
  PostV2RouterChatCompletionsAcceptEnum,
  publicPostV2RouterChatCompletions,
} from "../funcs/publicPostV2RouterChatCompletions.js";
import { publicPostV2RouterCompletions } from "../funcs/publicPostV2RouterCompletions.js";
import { publicPostV2RouterEmbeddings } from "../funcs/publicPostV2RouterEmbeddings.js";
import { publicPostV2RouterImagesGenerations } from "../funcs/publicPostV2RouterImagesGenerations.js";
import { publicPostV2RouterRerank } from "../funcs/publicPostV2RouterRerank.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { InvokeAcceptEnum } from "../funcs/publicInvoke.js";

export { PostV2RouterChatCompletionsAcceptEnum } from "../funcs/publicPostV2RouterChatCompletions.js";

export class Public extends ClientSDK {
  /**
   * Get config
   *
   * @remarks
   * Retrieve the deployment configuration
   */
  async postV2DeploymentsGetConfig(
    request: operations.PostV2DeploymentsGetConfigRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2DeploymentsGetConfigResponseBody | undefined> {
    return unwrapAsync(publicPostV2DeploymentsGetConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Invoke
   *
   * @remarks
   * Invoke a deployment with a given payload
   */
  async invoke(
    request: components.Deployments,
    options?: RequestOptions & { acceptHeaderOverride?: InvokeAcceptEnum },
  ): Promise<operations.PostV2DeploymentsInvokeResponse | undefined> {
    return unwrapAsync(publicInvoke(
      this,
      request,
      options,
    ));
  }

  /**
   * Add metrics
   *
   * @remarks
   * Add metrics to a deployment
   */
  async postV2DeploymentsIdMetrics(
    request: operations.PostV2DeploymentsIdMetricsRequest,
    options?: RequestOptions,
  ): Promise<operations.PostV2DeploymentsIdMetricsResponseBody> {
    return unwrapAsync(publicPostV2DeploymentsIdMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * List all deployments
   *
   * @remarks
   * Returns a list of your deployments. The deployments are returned sorted by creation date, with the most recent deployments appearing first.
   */
  async getV2Deployments(
    request: operations.GetV2DeploymentsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2DeploymentsResponseBody> {
    return unwrapAsync(publicGetV2Deployments(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload file
   *
   * @remarks
   * Files are used to upload documents that can be used with features like [Deployments](https://docs.orq.ai/reference/post_v2-deployments-get-config).
   */
  async postV2Files(
    request: operations.PostV2FilesRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2FilesResponseBody> {
    return unwrapAsync(publicPostV2Files(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk upload file
   *
   * @remarks
   * Files are used to upload documents that can be used with features like [Deployments](https://docs.orq.ai/reference/post_v2-deployments-get-config).
   */
  async postV2FilesBulk(
    request: operations.PostV2FilesBulkRequestBody,
    options?: RequestOptions,
  ): Promise<Array<operations.ResponseBody>> {
    return unwrapAsync(publicPostV2FilesBulk(
      this,
      request,
      options,
    ));
  }

  /**
   * Embeddings
   *
   * @remarks
   * Creates an embedding vector representing the input text.
   */
  async postV2RouterEmbeddings(
    request: operations.PostV2RouterEmbeddingsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2RouterEmbeddingsResponseBody> {
    return unwrapAsync(publicPostV2RouterEmbeddings(
      this,
      request,
      options,
    ));
  }

  /**
   * Chat
   *
   * @remarks
   * For sending requests to chat completion models
   */
  async postV2RouterChatCompletions(
    request: operations.PostV2RouterChatCompletionsRequestBody,
    options?: RequestOptions & {
      acceptHeaderOverride?: PostV2RouterChatCompletionsAcceptEnum;
    },
  ): Promise<operations.PostV2RouterChatCompletionsResponse> {
    return unwrapAsync(publicPostV2RouterChatCompletions(
      this,
      request,
      options,
    ));
  }

  /**
   * legacy completions route
   *
   * @remarks
   * For sending requests to legacy completion models
   */
  async postV2RouterCompletions(
    request?: operations.PostV2RouterCompletionsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostV2RouterCompletionsResponseBody> {
    return unwrapAsync(publicPostV2RouterCompletions(
      this,
      request,
      options,
    ));
  }

  /**
   * rerank route
   *
   * @remarks
   * For sending requests to rerank models
   */
  async postV2RouterRerank(
    request?: operations.PostV2RouterRerankRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostV2RouterRerankResponseBody> {
    return unwrapAsync(publicPostV2RouterRerank(
      this,
      request,
      options,
    ));
  }

  async postV2RouterImagesGenerations(
    request?: operations.PostV2RouterImagesGenerationsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostV2RouterImagesGenerationsResponseBody> {
    return unwrapAsync(publicPostV2RouterImagesGenerations(
      this,
      request,
      options,
    ));
  }

  async postV2Remoteconfigs(
    request?: operations.PostV2RemoteconfigsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostV2RemoteconfigsResponseBody> {
    return unwrapAsync(publicPostV2Remoteconfigs(
      this,
      request,
      options,
    ));
  }
}
